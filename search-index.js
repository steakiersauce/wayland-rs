var searchIndex = {};
searchIndex["wayland_client"] = {"doc":"Client-side Wayland connector","items":[[3,"Display","wayland_client","A connection to a wayland server",null,null],[3,"EventQueue","","An event queue for protocol messages",null,null],[3,"QueueToken","","A token representing this event queue",null,null],[3,"ReadEventsGuard","","A guard over a read intention.",null,null],[3,"GlobalManager","","An utility to manage global objects",null,null],[3,"NewProxy","","A newly-created proxy that needs implementation",null,null],[3,"Proxy","","An handle to a wayland proxy",null,null],[4,"ConnectError","","Enum representing the possible reasons why connecting to the wayland server failed",null,null],[13,"NoWaylandLib","","The library was compiled with the `dlopen` feature, and the `libwayland-client.so` library could not be found at runtime",0,null],[13,"NoCompositorListening","","Any needed library was found, but the listening socket of the server could not be found.",0,null],[13,"InvalidName","","The provided socket name is invalid",0,null],[4,"GlobalError","","An error that occured trying to bind a global",null,null],[13,"Missing","","The requested global was missing",1,null],[13,"VersionTooLow","","The global abvertized by the server has a lower version number than the one requested",1,null],[4,"GlobalEvent","","Event provided to the user callback of GlobalManager",null,null],[13,"New","","A new global was created",2,null],[12,"id","wayland_client::GlobalEvent","Id of the new global",2,null],[12,"interface","","Interface of the new global",2,null],[12,"version","","Maximum supported version of the new global",2,null],[13,"Removed","wayland_client","A global was removed",2,null],[12,"id","wayland_client::GlobalEvent","Id of the removed global",2,null],[12,"interface","","Interface of the removed global",2,null],[11,"fmt","wayland_client","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_external_display","","Create a Display and Event Queue from an external display",3,null],[11,"connect_to_env","","Attempt to connect to a wayland server using the contents of the environment variables",3,{"inputs":[],"output":{"generics":["connecterror"],"name":"result"}}],[11,"connect_to_name","","Attempt to connect to a wayland server socket with given name",3,{"inputs":[{"name":"s"}],"output":{"generics":["connecterror"],"name":"result"}}],[11,"flush","","Non-blocking write to the server",3,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"create_event_queue","","Create a new event queue associated with this wayland connection",3,{"inputs":[{"name":"self"}],"output":{"name":"eventqueue"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"proxy"}}],[11,"dispatch","","Dispatches events from the internal buffer.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"ioresult"}}],[11,"dispatch_pending","","Dispatches pending events from the internal buffer.",4,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"ioresult"}}],[11,"sync_roundtrip","","Synchronous roundtrip",4,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"ioresult"}}],[11,"get_token","","Create a new token associated with this event queue",4,{"inputs":[{"name":"self"}],"output":{"name":"queuetoken"}}],[11,"prepare_read","","Prepare an conccurent read",4,{"inputs":[{"name":"self"}],"output":{"generics":["readeventsguard"],"name":"option"}}],[11,"read_events","","Read events",5,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"ioresult"}}],[11,"cancel","","Cancel the read",5,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"globalmanager"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a global manager handling a registry",6,{"inputs":[{"generics":["wlregistry"],"name":"newproxy"}],"output":{"name":"globalmanager"}}],[11,"new_with_cb","","Create a global manager handling a registry with a callback",6,{"inputs":[{"generics":["wlregistry"],"name":"newproxy"},{"name":"impl"}],"output":{"name":"globalmanager"}}],[11,"instantiate_auto","","Instanciate a global with highest available version",6,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy","globalerror"],"name":"result"}}],[11,"instantiate_exact","","Instanciate a global with a specific version",6,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["newproxy","globalerror"],"name":"result"}}],[11,"list","","Retrieve the list of currently known globals",6,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"send","","Send a request through this object",7,null],[11,"is_alive","","Check if the object associated with this proxy is still alive",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"version","","Retrieve the interface version of this wayland object instance",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"set_user_data","","Associate an arbitrary payload to this object",7,null],[11,"get_user_data","","Retrieve the arbitrary payload associated to this object",7,null],[11,"is_external","","Check whether this proxy is managed by the library or not",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Check if the other proxy refers to the same underlying wayland object",7,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"name":"bool"}}],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",7,null],[11,"from_c_ptr","","Create a `Proxy` instance from a C pointer",7,null],[11,"make_wrapper","","Create a wrapper for this object for queue management",7,{"inputs":[{"name":"self"},{"name":"queuetoken"}],"output":{"generics":["proxy"],"name":"result"}}],[11,"child","","Create a new child object",7,{"inputs":[{"name":"self"}],"output":{"name":"newproxy"}}],[11,"is_implemented_with","","Check whether this proxy has been implemented with given type",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"proxy"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"implement","","Implement this proxy using given function and implementation data.",8,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"proxy"}}],[11,"implement_nonsend","","Implement this proxy using given function and implementation data.",8,{"inputs":[{"name":"self"},{"name":"impl"},{"name":"queuetoken"}],"output":{"name":"proxy"}}],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",8,null],[11,"from_c_ptr","","Create a `NewProxy` instance from a C pointer.",8,null],[0,"cursor","","Cursor utilities",null,null],[3,"CursorTheme","wayland_client::cursor","Represents a cursor theme loaded from the system.",null,null],[3,"Cursor","","A cursor from a theme. Can contain several images if animated.",null,null],[3,"CursorImageBuffer","","A buffer containing a cursor image.",null,null],[5,"is_available","","Checks if the wayland-cursor lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[5,"load_theme","","Attempts to load a cursor theme from given name.",null,{"inputs":[{"generics":["str"],"name":"option"},{"name":"u32"},{"name":"proxy"}],"output":{"name":"cursortheme"}}],[11,"get_cursor","","Retrieve a cursor from the theme.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["cursor"],"name":"option"}}],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"name","","Retrieve the name of this cursor.",10,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"image_count","","Retrieve the number of images contained in this animated cursor",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"frame","","Retrieve the image number of cursor animation.",10,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"usize"}}],[11,"frame_and_duration","","Retrieve the image number and its duration.",10,null],[11,"frame_buffer","","Retrieve a `CursorImageBuffer` containing the given image of an animation.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["cursorimagebuffer"],"name":"option"}}],[11,"frame_info","","Retrive the metadate associated with given frame of the animation.",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"proxy"}}],[0,"egl","wayland_client","EGL utilities",null,null],[3,"WlEglSurface","wayland_client::egl","EGL surface",null,null],[5,"is_available","","Checks if the wayland-egl lib is available and can be used",null,{"inputs":[],"output":{"name":"bool"}}],[11,"new","","Create an EGL surface from a wayland surface",12,{"inputs":[{"name":"proxy"},{"name":"i32"},{"name":"i32"}],"output":{"name":"wleglsurface"}}],[11,"new_from_raw","","Create an EGL surface from a raw pointer to a wayland surface",12,null],[11,"get_size","","Fetch current size of the EGL surface",12,null],[11,"resize","","Resize the EGL surface",12,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"ptr","","Raw pointer to the EGL surface",12,null],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[0,"commons","wayland_client","Re-export of wayland-commons",null,null],[0,"sys","","C-associated types",null,null],[0,"client","wayland_client::sys","Bindings to the client library `libwayland-client.so`",null,null],[4,"wl_proxy","wayland_client::sys::client","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[3,"WaylandClient","","",null,null],[12,"wl_display_connect_to_fd","","",13,null],[12,"wl_display_connect","","",13,null],[12,"wl_display_disconnect","","",13,null],[12,"wl_display_get_fd","","",13,null],[12,"wl_display_roundtrip","","",13,null],[12,"wl_display_read_events","","",13,null],[12,"wl_display_prepare_read","","",13,null],[12,"wl_display_cancel_read","","",13,null],[12,"wl_display_dispatch","","",13,null],[12,"wl_display_dispatch_pending","","",13,null],[12,"wl_display_get_error","","",13,null],[12,"wl_display_get_protocol_error","","",13,null],[12,"wl_display_flush","","",13,null],[12,"wl_event_queue_destroy","","",13,null],[12,"wl_display_create_queue","","",13,null],[12,"wl_display_roundtrip_queue","","",13,null],[12,"wl_display_prepare_read_queue","","",13,null],[12,"wl_display_dispatch_queue","","",13,null],[12,"wl_display_dispatch_queue_pending","","",13,null],[12,"wl_proxy_create","","",13,null],[12,"wl_proxy_destroy","","",13,null],[12,"wl_proxy_add_listener","","",13,null],[12,"wl_proxy_get_listener","","",13,null],[12,"wl_proxy_add_dispatcher","","",13,null],[12,"wl_proxy_marshal_array_constructor","","",13,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",13,null],[12,"wl_proxy_marshal_array","","",13,null],[12,"wl_proxy_set_user_data","","",13,null],[12,"wl_proxy_get_user_data","","",13,null],[12,"wl_proxy_get_id","","",13,null],[12,"wl_proxy_get_class","","",13,null],[12,"wl_proxy_set_queue","","",13,null],[12,"wl_proxy_get_version","","",13,null],[12,"wl_proxy_create_wrapper","","",13,null],[12,"wl_proxy_wrapper_destroy","","",13,null],[12,"wl_log_set_handler_client","","",13,null],[12,"wl_list_init","","",13,null],[12,"wl_list_insert","","",13,null],[12,"wl_list_remove","","",13,null],[12,"wl_list_length","","",13,null],[12,"wl_list_empty","","",13,null],[12,"wl_list_insert_list","","",13,null],[12,"wl_array_init","","",13,null],[12,"wl_array_release","","",13,null],[12,"wl_array_add","","",13,null],[12,"wl_array_copy","","",13,null],[12,"wl_proxy_marshal_constructor","","",13,null],[12,"wl_proxy_marshal_constructor_versioned","","",13,null],[12,"wl_proxy_marshal","","",13,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"common","wayland_client::sys","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_client::sys::common","",null,null],[12,"name","","",14,null],[12,"signature","","",14,null],[12,"types","","",14,null],[3,"wl_interface","","",null,null],[12,"name","","",15,null],[12,"version","","",15,null],[12,"request_count","","",15,null],[12,"requests","","",15,null],[12,"event_count","","",15,null],[12,"events","","",15,null],[3,"wl_list","","",null,null],[12,"prev","","",16,null],[12,"next","","",16,null],[3,"wl_array","","",null,null],[12,"size","","",17,null],[12,"alloc","","",17,null],[12,"data","","",17,null],[6,"wl_fixed_t","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[19,"wl_argument","","",null,null],[12,"i","","",18,null],[12,"u","","",18,null],[12,"f","","",18,null],[12,"s","","",18,null],[12,"o","","",18,null],[12,"n","","",18,null],[12,"a","","",18,null],[12,"h","","",18,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"protocol_interfaces","wayland_client::sys","",null,null],[7,"wl_display_requests","wayland_client::sys::protocol_interfaces","",null,null],[7,"wl_display_events","","",null,null],[7,"wl_display_interface","","",null,null],[7,"wl_registry_requests","","",null,null],[7,"wl_registry_events","","",null,null],[7,"wl_registry_interface","","",null,null],[7,"wl_callback_events","","",null,null],[7,"wl_callback_interface","","",null,null],[7,"wl_compositor_requests","","",null,null],[7,"wl_compositor_interface","","",null,null],[7,"wl_shm_pool_requests","","",null,null],[7,"wl_shm_pool_interface","","",null,null],[7,"wl_shm_requests","","",null,null],[7,"wl_shm_events","","",null,null],[7,"wl_shm_interface","","",null,null],[7,"wl_buffer_requests","","",null,null],[7,"wl_buffer_events","","",null,null],[7,"wl_buffer_interface","","",null,null],[7,"wl_data_offer_requests","","",null,null],[7,"wl_data_offer_events","","",null,null],[7,"wl_data_offer_interface","","",null,null],[7,"wl_data_source_requests","","",null,null],[7,"wl_data_source_events","","",null,null],[7,"wl_data_source_interface","","",null,null],[7,"wl_data_device_requests","","",null,null],[7,"wl_data_device_events","","",null,null],[7,"wl_data_device_interface","","",null,null],[7,"wl_data_device_manager_requests","","",null,null],[7,"wl_data_device_manager_interface","","",null,null],[7,"wl_shell_requests","","",null,null],[7,"wl_shell_interface","","",null,null],[7,"wl_shell_surface_requests","","",null,null],[7,"wl_shell_surface_events","","",null,null],[7,"wl_shell_surface_interface","","",null,null],[7,"wl_surface_requests","","",null,null],[7,"wl_surface_events","","",null,null],[7,"wl_surface_interface","","",null,null],[7,"wl_seat_requests","","",null,null],[7,"wl_seat_events","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"wl_pointer_requests","","",null,null],[7,"wl_pointer_events","","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"wl_keyboard_requests","","",null,null],[7,"wl_keyboard_events","","",null,null],[7,"wl_keyboard_interface","","",null,null],[7,"wl_touch_requests","","",null,null],[7,"wl_touch_events","","",null,null],[7,"wl_touch_interface","","",null,null],[7,"wl_output_requests","","",null,null],[7,"wl_output_events","","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_region_requests","","",null,null],[7,"wl_region_interface","","",null,null],[7,"wl_subcompositor_requests","","",null,null],[7,"wl_subcompositor_interface","","",null,null],[7,"wl_subsurface_requests","","",null,null],[7,"wl_subsurface_interface","","",null,null],[0,"protocol","wayland_client","Generated interfaces for the core wayland protocol",null,null],[0,"wl_display","wayland_client::protocol","core global object",null,null],[3,"WlDisplay","wayland_client::protocol::wl_display","",null,null],[4,"Error","","global error values",null,null],[13,"InvalidObject","","server couldn't find object",19,null],[13,"InvalidMethod","","method doesn't exist on the specified interface",19,null],[13,"NoMemory","","server is out of memory",19,null],[4,"Request","","",null,null],[13,"Sync","","asynchronous roundtrip",20,null],[12,"callback","wayland_client::protocol::wl_display::Request","",20,null],[13,"GetRegistry","wayland_client::protocol::wl_display","get global registry object",20,null],[12,"registry","wayland_client::protocol::wl_display::Request","",20,null],[4,"Event","wayland_client::protocol::wl_display","",null,null],[13,"Error","","fatal error event",21,null],[12,"object_id","wayland_client::protocol::wl_display::Event","",21,null],[12,"code","","",21,null],[12,"message","","",21,null],[13,"DeleteId","wayland_client::protocol::wl_display","acknowledge object ID deletion",21,null],[12,"id","wayland_client::protocol::wl_display::Event","",21,null],[8,"RequestsTrait","wayland_client::protocol::wl_display","",null,null],[10,"sync","","asynchronous roundtrip",22,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_registry","","get global registry object",22,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_registry","wayland_client::protocol","global registry object",null,null],[3,"WlRegistry","wayland_client::protocol::wl_registry","",null,null],[4,"Request","","",null,null],[13,"Bind","","bind an object to the display",23,null],[12,"name","wayland_client::protocol::wl_registry::Request","",23,null],[12,"id","","",23,null],[4,"Event","wayland_client::protocol::wl_registry","",null,null],[13,"Global","","announce global object",24,null],[12,"name","wayland_client::protocol::wl_registry::Event","",24,null],[12,"interface","","",24,null],[12,"version","","",24,null],[13,"GlobalRemove","wayland_client::protocol::wl_registry","announce removal of global object",24,null],[12,"name","wayland_client::protocol::wl_registry::Event","",24,null],[8,"RequestsTrait","wayland_client::protocol::wl_registry","",null,null],[10,"bind","","bind an object to the display",25,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_callback","wayland_client::protocol","callback object",null,null],[3,"WlCallback","wayland_client::protocol::wl_callback","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"Done","","done event",26,null],[12,"callback_data","wayland_client::protocol::wl_callback::Event","",26,null],[8,"RequestsTrait","wayland_client::protocol::wl_callback","",null,null],[0,"wl_compositor","wayland_client::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_client::protocol::wl_compositor","",null,null],[4,"Request","","",null,null],[13,"CreateSurface","","create new surface",27,null],[12,"id","wayland_client::protocol::wl_compositor::Request","",27,null],[13,"CreateRegion","wayland_client::protocol::wl_compositor","create new region",27,null],[12,"id","wayland_client::protocol::wl_compositor::Request","",27,null],[4,"Event","wayland_client::protocol::wl_compositor","",null,null],[8,"RequestsTrait","","",null,null],[10,"create_surface","","create new surface",28,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"create_region","","create new region",28,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_shm_pool","wayland_client::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_client::protocol::wl_shm_pool","",null,null],[4,"Request","","",null,null],[13,"CreateBuffer","","create a buffer from the pool",29,null],[12,"id","wayland_client::protocol::wl_shm_pool::Request","",29,null],[12,"offset","","",29,null],[12,"width","","",29,null],[12,"height","","",29,null],[12,"stride","","",29,null],[12,"format","","",29,null],[13,"Destroy","wayland_client::protocol::wl_shm_pool","destroy the pool",29,null],[13,"Resize","","change the size of the pool mapping",29,null],[12,"size","wayland_client::protocol::wl_shm_pool::Request","",29,null],[4,"Event","wayland_client::protocol::wl_shm_pool","",null,null],[8,"RequestsTrait","","",null,null],[10,"create_buffer","","create a buffer from the pool",30,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"format"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"destroy","","destroy the pool",30,null],[10,"resize","","change the size of the pool mapping",30,null],[0,"wl_shm","wayland_client::protocol","shared memory support",null,null],[3,"WlShm","wayland_client::protocol::wl_shm","",null,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","buffer format is not known",31,null],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",31,null],[13,"InvalidFd","","mmapping the file descriptor failed",31,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",32,null],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",32,null],[13,"C8","","8-bit color index format, [7:0] C",32,null],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",32,null],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",32,null],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",32,null],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",32,null],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",32,null],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",32,null],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",32,null],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",32,null],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",32,null],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",32,null],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",32,null],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",32,null],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",32,null],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",32,null],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",32,null],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",32,null],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",32,null],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",32,null],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",32,null],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",32,null],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",32,null],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",32,null],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",32,null],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",32,null],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",32,null],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",32,null],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",32,null],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",32,null],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",32,null],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",32,null],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",32,null],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",32,null],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",32,null],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",32,null],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",32,null],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",32,null],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",32,null],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",32,null],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",32,null],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",32,null],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",32,null],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",32,null],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",32,null],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",32,null],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",32,null],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",32,null],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",32,null],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",32,null],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",32,null],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",32,null],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",32,null],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",32,null],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",32,null],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",32,null],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",32,null],[4,"Request","","",null,null],[13,"CreatePool","","create a shm pool",33,null],[12,"id","wayland_client::protocol::wl_shm::Request","",33,null],[12,"fd","","",33,null],[12,"size","","",33,null],[4,"Event","wayland_client::protocol::wl_shm","",null,null],[13,"Format","","pixel format description",34,null],[12,"format","wayland_client::protocol::wl_shm::Event","",34,null],[8,"RequestsTrait","wayland_client::protocol::wl_shm","",null,null],[10,"create_pool","","create a shm pool",35,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"i32"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_buffer","wayland_client::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_client::protocol::wl_buffer","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy a buffer",36,null],[4,"Event","","",null,null],[13,"Release","","compositor releases buffer",37,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy a buffer",38,null],[0,"wl_data_offer","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_client::protocol::wl_data_offer","",null,null],[4,"Error","","",null,null],[13,"InvalidFinish","","finish request was called untimely",39,null],[13,"InvalidActionMask","","action mask contains invalid values",39,null],[13,"InvalidAction","","action argument has an invalid value",39,null],[13,"InvalidOffer","","offer doesn't accept this request",39,null],[4,"Request","","",null,null],[13,"Accept","","accept one of the offered mime types",40,null],[12,"serial","wayland_client::protocol::wl_data_offer::Request","",40,null],[12,"mime_type","","",40,null],[13,"Receive","wayland_client::protocol::wl_data_offer","request that the data is transferred",40,null],[12,"mime_type","wayland_client::protocol::wl_data_offer::Request","",40,null],[12,"fd","","",40,null],[13,"Destroy","wayland_client::protocol::wl_data_offer","destroy data offer",40,null],[13,"Finish","","the offer will no longer be used",40,null],[13,"SetActions","","set the available/preferred drag-and-drop actions",40,null],[12,"dnd_actions","wayland_client::protocol::wl_data_offer::Request","",40,null],[12,"preferred_action","","",40,null],[4,"Event","wayland_client::protocol::wl_data_offer","",null,null],[13,"Offer","","advertise offered mime type",41,null],[12,"mime_type","wayland_client::protocol::wl_data_offer::Event","",41,null],[13,"SourceActions","wayland_client::protocol::wl_data_offer","notify the source-side available actions",41,null],[12,"source_actions","wayland_client::protocol::wl_data_offer::Event","",41,null],[13,"Action","wayland_client::protocol::wl_data_offer","notify the selected action",41,null],[12,"dnd_action","wayland_client::protocol::wl_data_offer::Event","",41,null],[8,"RequestsTrait","wayland_client::protocol::wl_data_offer","",null,null],[10,"accept","","accept one of the offered mime types",42,null],[10,"receive","","request that the data is transferred",42,null],[10,"destroy","","destroy data offer",42,null],[10,"finish","","the offer will no longer be used",42,null],[10,"set_actions","","set the available/preferred drag-and-drop actions",42,null],[0,"wl_data_source","wayland_client::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_client::protocol::wl_data_source","",null,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","action mask contains invalid values",43,null],[13,"InvalidSource","","source doesn't accept this request",43,null],[4,"Request","","",null,null],[13,"Offer","","add an offered mime type",44,null],[12,"mime_type","wayland_client::protocol::wl_data_source::Request","",44,null],[13,"Destroy","wayland_client::protocol::wl_data_source","destroy the data source",44,null],[13,"SetActions","","set the available drag-and-drop actions",44,null],[12,"dnd_actions","wayland_client::protocol::wl_data_source::Request","",44,null],[4,"Event","wayland_client::protocol::wl_data_source","",null,null],[13,"Target","","a target accepts an offered mime type",45,null],[12,"mime_type","wayland_client::protocol::wl_data_source::Event","",45,null],[13,"Send","wayland_client::protocol::wl_data_source","send the data",45,null],[12,"mime_type","wayland_client::protocol::wl_data_source::Event","",45,null],[12,"fd","","",45,null],[13,"Cancelled","wayland_client::protocol::wl_data_source","selection was cancelled",45,null],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",45,null],[13,"DndFinished","","the drag-and-drop operation concluded",45,null],[13,"Action","","notify the selected action",45,null],[12,"dnd_action","wayland_client::protocol::wl_data_source::Event","",45,null],[8,"RequestsTrait","wayland_client::protocol::wl_data_source","",null,null],[10,"offer","","add an offered mime type",46,null],[10,"destroy","","destroy the data source",46,null],[10,"set_actions","","set the available drag-and-drop actions",46,null],[0,"wl_data_device","wayland_client::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_client::protocol::wl_data_device","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",47,null],[4,"Request","","",null,null],[13,"StartDrag","","start drag-and-drop operation",48,null],[12,"source","wayland_client::protocol::wl_data_device::Request","",48,null],[12,"origin","","",48,null],[12,"icon","","",48,null],[12,"serial","","",48,null],[13,"SetSelection","wayland_client::protocol::wl_data_device","copy data to the selection",48,null],[12,"source","wayland_client::protocol::wl_data_device::Request","",48,null],[12,"serial","","",48,null],[13,"Release","wayland_client::protocol::wl_data_device","destroy data device",48,null],[4,"Event","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",49,null],[12,"id","wayland_client::protocol::wl_data_device::Event","",49,null],[13,"Enter","wayland_client::protocol::wl_data_device","initiate drag-and-drop session",49,null],[12,"serial","wayland_client::protocol::wl_data_device::Event","",49,null],[12,"surface","","",49,null],[12,"x","","",49,null],[12,"y","","",49,null],[12,"id","","",49,null],[13,"Leave","wayland_client::protocol::wl_data_device","end drag-and-drop session",49,null],[13,"Motion","","drag-and-drop session motion",49,null],[12,"time","wayland_client::protocol::wl_data_device::Event","",49,null],[12,"x","","",49,null],[12,"y","","",49,null],[13,"Drop","wayland_client::protocol::wl_data_device","end drag-and-drop session successfully",49,null],[13,"Selection","","advertise new selection",49,null],[12,"id","wayland_client::protocol::wl_data_device::Event","",49,null],[8,"RequestsTrait","wayland_client::protocol::wl_data_device","",null,null],[10,"start_drag","","start drag-and-drop operation",50,null],[10,"set_selection","","copy data to the selection",50,null],[10,"release","","destroy data device",50,null],[0,"wl_data_device_manager","wayland_client::protocol","data transfer interface",null,null],[3,"DndAction","wayland_client::protocol::wl_data_device_manager","drag and drop actions",null,null],[3,"WlDataDeviceManager","","",null,null],[4,"Request","","",null,null],[13,"CreateDataSource","","create a new data source",51,null],[12,"id","wayland_client::protocol::wl_data_device_manager::Request","",51,null],[13,"GetDataDevice","wayland_client::protocol::wl_data_device_manager","create a new data device",51,null],[12,"id","wayland_client::protocol::wl_data_device_manager::Request","",51,null],[12,"seat","","",51,null],[4,"Event","wayland_client::protocol::wl_data_device_manager","",null,null],[8,"RequestsTrait","","",null,null],[10,"create_data_source","","create a new data source",52,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_data_device","","create a new data device",52,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_shell","wayland_client::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_client::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",53,null],[4,"Request","","",null,null],[13,"GetShellSurface","","create a shell surface from a surface",54,null],[12,"id","wayland_client::protocol::wl_shell::Request","",54,null],[12,"surface","","",54,null],[4,"Event","wayland_client::protocol::wl_shell","",null,null],[8,"RequestsTrait","","",null,null],[10,"get_shell_surface","","create a shell surface from a surface",55,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_shell_surface","wayland_client::protocol","desktop-style metadata interface",null,null],[3,"Resize","wayland_client::protocol::wl_shell_surface","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[3,"WlShellSurface","","",null,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",56,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",56,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",56,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",56,null],[4,"Request","","",null,null],[13,"Pong","","respond to a ping event",57,null],[12,"serial","wayland_client::protocol::wl_shell_surface::Request","",57,null],[13,"Move","wayland_client::protocol::wl_shell_surface","start an interactive move",57,null],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",57,null],[12,"serial","","",57,null],[13,"Resize","wayland_client::protocol::wl_shell_surface","start an interactive resize",57,null],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",57,null],[12,"serial","","",57,null],[12,"edges","","",57,null],[13,"SetToplevel","wayland_client::protocol::wl_shell_surface","make the surface a toplevel surface",57,null],[13,"SetTransient","","make the surface a transient surface",57,null],[12,"parent","wayland_client::protocol::wl_shell_surface::Request","",57,null],[12,"x","","",57,null],[12,"y","","",57,null],[12,"flags","","",57,null],[13,"SetFullscreen","wayland_client::protocol::wl_shell_surface","make the surface a fullscreen surface",57,null],[12,"method","wayland_client::protocol::wl_shell_surface::Request","",57,null],[12,"framerate","","",57,null],[12,"output","","",57,null],[13,"SetPopup","wayland_client::protocol::wl_shell_surface","make the surface a popup surface",57,null],[12,"seat","wayland_client::protocol::wl_shell_surface::Request","",57,null],[12,"serial","","",57,null],[12,"parent","","",57,null],[12,"x","","",57,null],[12,"y","","",57,null],[12,"flags","","",57,null],[13,"SetMaximized","wayland_client::protocol::wl_shell_surface","make the surface a maximized surface",57,null],[12,"output","wayland_client::protocol::wl_shell_surface::Request","",57,null],[13,"SetTitle","wayland_client::protocol::wl_shell_surface","set surface title",57,null],[12,"title","wayland_client::protocol::wl_shell_surface::Request","",57,null],[13,"SetClass","wayland_client::protocol::wl_shell_surface","set surface class",57,null],[12,"class_","wayland_client::protocol::wl_shell_surface::Request","",57,null],[4,"Event","wayland_client::protocol::wl_shell_surface","",null,null],[13,"Ping","","ping client",58,null],[12,"serial","wayland_client::protocol::wl_shell_surface::Event","",58,null],[13,"Configure","wayland_client::protocol::wl_shell_surface","suggest resize",58,null],[12,"edges","wayland_client::protocol::wl_shell_surface::Event","",58,null],[12,"width","","",58,null],[12,"height","","",58,null],[13,"PopupDone","wayland_client::protocol::wl_shell_surface","popup interaction is done",58,null],[8,"RequestsTrait","","",null,null],[10,"pong","","respond to a ping event",59,null],[10,"_move","","start an interactive move",59,null],[10,"resize","","start an interactive resize",59,null],[10,"set_toplevel","","make the surface a toplevel surface",59,null],[10,"set_transient","","make the surface a transient surface",59,null],[10,"set_fullscreen","","make the surface a fullscreen surface",59,null],[10,"set_popup","","make the surface a popup surface",59,null],[10,"set_maximized","","make the surface a maximized surface",59,null],[10,"set_title","","set surface title",59,null],[10,"set_class","","set surface class",59,null],[0,"wl_surface","wayland_client::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_client::protocol::wl_surface","",null,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","buffer scale value is invalid",60,null],[13,"InvalidTransform","","buffer transform value is invalid",60,null],[4,"Request","","",null,null],[13,"Destroy","","delete surface",61,null],[13,"Attach","","set the surface contents",61,null],[12,"buffer","wayland_client::protocol::wl_surface::Request","",61,null],[12,"x","","",61,null],[12,"y","","",61,null],[13,"Damage","wayland_client::protocol::wl_surface","mark part of the surface damaged",61,null],[12,"x","wayland_client::protocol::wl_surface::Request","",61,null],[12,"y","","",61,null],[12,"width","","",61,null],[12,"height","","",61,null],[13,"Frame","wayland_client::protocol::wl_surface","request a frame throttling hint",61,null],[12,"callback","wayland_client::protocol::wl_surface::Request","",61,null],[13,"SetOpaqueRegion","wayland_client::protocol::wl_surface","set opaque region",61,null],[12,"region","wayland_client::protocol::wl_surface::Request","",61,null],[13,"SetInputRegion","wayland_client::protocol::wl_surface","set input region",61,null],[12,"region","wayland_client::protocol::wl_surface::Request","",61,null],[13,"Commit","wayland_client::protocol::wl_surface","commit pending surface state",61,null],[13,"SetBufferTransform","","sets the buffer transformation",61,null],[12,"transform","wayland_client::protocol::wl_surface::Request","",61,null],[13,"SetBufferScale","wayland_client::protocol::wl_surface","sets the buffer scaling factor",61,null],[12,"scale","wayland_client::protocol::wl_surface::Request","",61,null],[13,"DamageBuffer","wayland_client::protocol::wl_surface","mark part of the surface damaged using buffer coordinates",61,null],[12,"x","wayland_client::protocol::wl_surface::Request","",61,null],[12,"y","","",61,null],[12,"width","","",61,null],[12,"height","","",61,null],[4,"Event","wayland_client::protocol::wl_surface","",null,null],[13,"Enter","","surface enters an output",62,null],[12,"output","wayland_client::protocol::wl_surface::Event","",62,null],[13,"Leave","wayland_client::protocol::wl_surface","surface leaves an output",62,null],[12,"output","wayland_client::protocol::wl_surface::Event","",62,null],[8,"RequestsTrait","wayland_client::protocol::wl_surface","",null,null],[10,"destroy","","delete surface",63,null],[10,"attach","","set the surface contents",63,null],[10,"damage","","mark part of the surface damaged",63,null],[10,"frame","","request a frame throttling hint",63,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"set_opaque_region","","set opaque region",63,null],[10,"set_input_region","","set input region",63,null],[10,"commit","","commit pending surface state",63,null],[10,"set_buffer_transform","","sets the buffer transformation",63,null],[10,"set_buffer_scale","","sets the buffer scaling factor",63,null],[10,"damage_buffer","","mark part of the surface damaged using buffer coordinates",63,null],[0,"wl_seat","wayland_client::protocol","group of input devices",null,null],[3,"Capability","wayland_client::protocol::wl_seat","seat capability bitmask",null,null],[3,"WlSeat","","",null,null],[4,"Request","","",null,null],[13,"GetPointer","","return pointer object",64,null],[12,"id","wayland_client::protocol::wl_seat::Request","",64,null],[13,"GetKeyboard","wayland_client::protocol::wl_seat","return keyboard object",64,null],[12,"id","wayland_client::protocol::wl_seat::Request","",64,null],[13,"GetTouch","wayland_client::protocol::wl_seat","return touch object",64,null],[12,"id","wayland_client::protocol::wl_seat::Request","",64,null],[13,"Release","wayland_client::protocol::wl_seat","release the seat object",64,null],[4,"Event","","",null,null],[13,"Capabilities","","seat capabilities changed",65,null],[12,"capabilities","wayland_client::protocol::wl_seat::Event","",65,null],[13,"Name","wayland_client::protocol::wl_seat","unique identifier for this seat",65,null],[12,"name","wayland_client::protocol::wl_seat::Event","",65,null],[8,"RequestsTrait","wayland_client::protocol::wl_seat","",null,null],[10,"get_pointer","","return pointer object",66,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_keyboard","","return keyboard object",66,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_touch","","return touch object",66,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"release","","release the seat object",66,null],[0,"wl_pointer","wayland_client::protocol","pointer input device",null,null],[3,"WlPointer","wayland_client::protocol::wl_pointer","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",67,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",68,null],[13,"Pressed","","the button is pressed",68,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","vertical axis",69,null],[13,"HorizontalScroll","","horizontal axis",69,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",70,null],[13,"Finger","","finger on a touch surface",70,null],[13,"Continuous","","continuous coordinate space",70,null],[4,"Request","","",null,null],[13,"SetCursor","","set the pointer surface",71,null],[12,"serial","wayland_client::protocol::wl_pointer::Request","",71,null],[12,"surface","","",71,null],[12,"hotspot_x","","",71,null],[12,"hotspot_y","","",71,null],[13,"Release","wayland_client::protocol::wl_pointer","release the pointer object",71,null],[4,"Event","","",null,null],[13,"Enter","","enter event",72,null],[12,"serial","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"surface","","",72,null],[12,"surface_x","","",72,null],[12,"surface_y","","",72,null],[13,"Leave","wayland_client::protocol::wl_pointer","leave event",72,null],[12,"serial","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"surface","","",72,null],[13,"Motion","wayland_client::protocol::wl_pointer","pointer motion event",72,null],[12,"time","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"surface_x","","",72,null],[12,"surface_y","","",72,null],[13,"Button","wayland_client::protocol::wl_pointer","pointer button event",72,null],[12,"serial","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"time","","",72,null],[12,"button","","",72,null],[12,"state","","",72,null],[13,"Axis","wayland_client::protocol::wl_pointer","axis event",72,null],[12,"time","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"axis","","",72,null],[12,"value","","",72,null],[13,"Frame","wayland_client::protocol::wl_pointer","end of a pointer event sequence",72,null],[13,"AxisSource","","axis source event",72,null],[12,"axis_source","wayland_client::protocol::wl_pointer::Event","",72,null],[13,"AxisStop","wayland_client::protocol::wl_pointer","axis stop event",72,null],[12,"time","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"axis","","",72,null],[13,"AxisDiscrete","wayland_client::protocol::wl_pointer","axis click event",72,null],[12,"axis","wayland_client::protocol::wl_pointer::Event","",72,null],[12,"discrete","","",72,null],[8,"RequestsTrait","wayland_client::protocol::wl_pointer","",null,null],[10,"set_cursor","","set the pointer surface",73,null],[10,"release","","release the pointer object",73,null],[0,"wl_keyboard","wayland_client::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_client::protocol::wl_keyboard","",null,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",74,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",74,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","key is not pressed",75,null],[13,"Pressed","","key is pressed",75,null],[4,"Request","","",null,null],[13,"Release","","release the keyboard object",76,null],[4,"Event","","",null,null],[13,"Keymap","","keyboard mapping",77,null],[12,"format","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"fd","","",77,null],[12,"size","","",77,null],[13,"Enter","wayland_client::protocol::wl_keyboard","enter event",77,null],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"surface","","",77,null],[12,"keys","","",77,null],[13,"Leave","wayland_client::protocol::wl_keyboard","leave event",77,null],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"surface","","",77,null],[13,"Key","wayland_client::protocol::wl_keyboard","key event",77,null],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"time","","",77,null],[12,"key","","",77,null],[12,"state","","",77,null],[13,"Modifiers","wayland_client::protocol::wl_keyboard","modifier and group state",77,null],[12,"serial","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"mods_depressed","","",77,null],[12,"mods_latched","","",77,null],[12,"mods_locked","","",77,null],[12,"group","","",77,null],[13,"RepeatInfo","wayland_client::protocol::wl_keyboard","repeat rate and delay",77,null],[12,"rate","wayland_client::protocol::wl_keyboard::Event","",77,null],[12,"delay","","",77,null],[8,"RequestsTrait","wayland_client::protocol::wl_keyboard","",null,null],[10,"release","","release the keyboard object",78,null],[0,"wl_touch","wayland_client::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_client::protocol::wl_touch","",null,null],[4,"Request","","",null,null],[13,"Release","","release the touch object",79,null],[4,"Event","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",80,null],[12,"serial","wayland_client::protocol::wl_touch::Event","",80,null],[12,"time","","",80,null],[12,"surface","","",80,null],[12,"id","","",80,null],[12,"x","","",80,null],[12,"y","","",80,null],[13,"Up","wayland_client::protocol::wl_touch","end of a touch event sequence",80,null],[12,"serial","wayland_client::protocol::wl_touch::Event","",80,null],[12,"time","","",80,null],[12,"id","","",80,null],[13,"Motion","wayland_client::protocol::wl_touch","update of touch point coordinates",80,null],[12,"time","wayland_client::protocol::wl_touch::Event","",80,null],[12,"id","","",80,null],[12,"x","","",80,null],[12,"y","","",80,null],[13,"Frame","wayland_client::protocol::wl_touch","end of touch frame event",80,null],[13,"Cancel","","touch session cancelled",80,null],[8,"RequestsTrait","","",null,null],[10,"release","","release the touch object",81,null],[0,"wl_output","wayland_client::protocol","compositor output region",null,null],[3,"Mode","wayland_client::protocol::wl_output","mode information",null,null],[3,"WlOutput","","",null,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","unknown geometry",82,null],[13,"None","","no geometry",82,null],[13,"HorizontalRgb","","horizontal RGB",82,null],[13,"HorizontalBgr","","horizontal BGR",82,null],[13,"VerticalRgb","","vertical RGB",82,null],[13,"VerticalBgr","","vertical BGR",82,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","no transform",83,null],[13,"_90","","90 degrees counter-clockwise",83,null],[13,"_180","","180 degrees counter-clockwise",83,null],[13,"_270","","270 degrees counter-clockwise",83,null],[13,"Flipped","","180 degree flip around a vertical axis",83,null],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",83,null],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",83,null],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",83,null],[4,"Request","","",null,null],[13,"Release","","release the output object",84,null],[4,"Event","","",null,null],[13,"Geometry","","properties of the output",85,null],[12,"x","wayland_client::protocol::wl_output::Event","",85,null],[12,"y","","",85,null],[12,"physical_width","","",85,null],[12,"physical_height","","",85,null],[12,"subpixel","","",85,null],[12,"make","","",85,null],[12,"model","","",85,null],[12,"transform","","",85,null],[13,"Mode","wayland_client::protocol::wl_output","advertise available modes for the output",85,null],[12,"flags","wayland_client::protocol::wl_output::Event","",85,null],[12,"width","","",85,null],[12,"height","","",85,null],[12,"refresh","","",85,null],[13,"Done","wayland_client::protocol::wl_output","sent all information about output",85,null],[13,"Scale","","output scaling properties",85,null],[12,"factor","wayland_client::protocol::wl_output::Event","",85,null],[8,"RequestsTrait","wayland_client::protocol::wl_output","",null,null],[10,"release","","release the output object",86,null],[0,"wl_region","wayland_client::protocol","region interface",null,null],[3,"WlRegion","wayland_client::protocol::wl_region","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy region",87,null],[13,"Add","","add rectangle to region",87,null],[12,"x","wayland_client::protocol::wl_region::Request","",87,null],[12,"y","","",87,null],[12,"width","","",87,null],[12,"height","","",87,null],[13,"Subtract","wayland_client::protocol::wl_region","subtract rectangle from region",87,null],[12,"x","wayland_client::protocol::wl_region::Request","",87,null],[12,"y","","",87,null],[12,"width","","",87,null],[12,"height","","",87,null],[4,"Event","wayland_client::protocol::wl_region","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy region",88,null],[10,"add","","add rectangle to region",88,null],[10,"subtract","","subtract rectangle from region",88,null],[0,"wl_subcompositor","wayland_client::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_client::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","the to-be sub-surface is invalid",89,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the subcompositor interface",90,null],[13,"GetSubsurface","","give a surface the role sub-surface",90,null],[12,"id","wayland_client::protocol::wl_subcompositor::Request","",90,null],[12,"surface","","",90,null],[12,"parent","","",90,null],[4,"Event","wayland_client::protocol::wl_subcompositor","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","unbind from the subcompositor interface",91,null],[10,"get_subsurface","","give a surface the role sub-surface",91,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wl_subsurface","wayland_client::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_client::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","wl_surface is not a sibling or the parent",92,null],[4,"Request","","",null,null],[13,"Destroy","","remove sub-surface interface",93,null],[13,"SetPosition","","reposition the sub-surface",93,null],[12,"x","wayland_client::protocol::wl_subsurface::Request","",93,null],[12,"y","","",93,null],[13,"PlaceAbove","wayland_client::protocol::wl_subsurface","restack the sub-surface",93,null],[12,"sibling","wayland_client::protocol::wl_subsurface::Request","",93,null],[13,"PlaceBelow","wayland_client::protocol::wl_subsurface","restack the sub-surface",93,null],[12,"sibling","wayland_client::protocol::wl_subsurface::Request","",93,null],[13,"SetSync","wayland_client::protocol::wl_subsurface","set sub-surface to synchronized mode",93,null],[13,"SetDesync","","set sub-surface to desynchronized mode",93,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","remove sub-surface interface",94,null],[10,"set_position","","reposition the sub-surface",94,null],[10,"place_above","","restack the sub-surface",94,null],[10,"place_below","","restack the sub-surface",94,null],[10,"set_sync","","set sub-surface to synchronized mode",94,null],[10,"set_desync","","set sub-surface to desynchronized mode",94,null],[11,"clone","wayland_client::protocol::wl_display","",19,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",19,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",20,null],[11,"as_raw_c_in","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",21,null],[11,"as_raw_c_in","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",95,null],[11,"sync","wayland_client","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"get_registry","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"is_destructor","wayland_client::protocol::wl_registry","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",23,null],[11,"as_raw_c_in","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",24,null],[11,"as_raw_c_in","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",96,null],[11,"bind","wayland_client","",7,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"is_destructor","wayland_client::protocol::wl_callback","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",97,null],[11,"as_raw_c_in","","",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",26,null],[11,"as_raw_c_in","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",98,null],[11,"is_destructor","wayland_client::protocol::wl_compositor","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",27,null],[11,"as_raw_c_in","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",99,null],[11,"as_raw_c_in","","",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",100,null],[11,"create_surface","wayland_client","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"create_region","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"is_destructor","wayland_client::protocol::wl_shm_pool","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",29,null],[11,"as_raw_c_in","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",101,null],[11,"as_raw_c_in","","",101,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",102,null],[11,"create_buffer","wayland_client","",7,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"format"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"destroy","","",7,null],[11,"resize","","",7,null],[11,"clone","wayland_client::protocol::wl_shm","",31,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",31,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"from_raw","","",32,{"inputs":[{"name":"u32"}],"output":{"generics":["format"],"name":"option"}}],[11,"to_raw","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",33,null],[11,"as_raw_c_in","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",34,null],[11,"as_raw_c_in","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",103,null],[11,"create_pool","wayland_client","",7,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"i32"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"is_destructor","wayland_client::protocol::wl_buffer","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",36,null],[11,"as_raw_c_in","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",37,null],[11,"as_raw_c_in","","",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",104,null],[11,"destroy","wayland_client","",7,null],[11,"clone","wayland_client::protocol::wl_data_offer","",39,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",39,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",40,null],[11,"as_raw_c_in","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",41,null],[11,"as_raw_c_in","","",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",105,null],[11,"accept","wayland_client","",7,null],[11,"receive","","",7,null],[11,"destroy","","",7,null],[11,"finish","","",7,null],[11,"set_actions","","",7,null],[11,"clone","wayland_client::protocol::wl_data_source","",43,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",43,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",43,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",44,null],[11,"as_raw_c_in","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",45,null],[11,"as_raw_c_in","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",106,null],[11,"offer","wayland_client","",7,null],[11,"destroy","","",7,null],[11,"set_actions","","",7,null],[11,"clone","wayland_client::protocol::wl_data_device","",47,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",47,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",47,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",48,null],[11,"as_raw_c_in","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",49,null],[11,"as_raw_c_in","","",49,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",107,null],[11,"start_drag","wayland_client","",7,null],[11,"set_selection","","",7,null],[11,"release","","",7,null],[11,"eq","wayland_client::protocol::wl_data_device_manager","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ne","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"partial_cmp","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"le","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"gt","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ge","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"cmp","","",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"ordering"}}],[11,"hash","","",108,null],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no action",108,null],[18,"Copy","","copy action",108,null],[18,"Move","","move action",108,null],[18,"Ask","","ask action",108,null],[11,"empty","","Returns an empty set of flags.",108,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",108,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",108,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",108,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",108,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",108,{"inputs":[{"name":"self"},{"name":"dndaction"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitor_assign","","Adds the set of flags.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitxor_assign","","Toggles the set of flags.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",108,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",108,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"extend","","",108,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",108,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",108,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"to_raw","","",108,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",51,null],[11,"as_raw_c_in","","",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",109,null],[11,"as_raw_c_in","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",110,null],[11,"create_data_source","wayland_client","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"get_data_device","","",7,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"clone","wayland_client::protocol::wl_shell","",53,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",53,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",53,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",54,null],[11,"as_raw_c_in","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",111,null],[11,"as_raw_c_in","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",112,null],[11,"get_shell_surface","wayland_client","",7,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"eq","wayland_client::protocol::wl_shell_surface","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ne","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"clone","","",113,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"partial_cmp","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"le","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"gt","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ge","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"cmp","","",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"ordering"}}],[11,"hash","","",113,null],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no edge",113,null],[18,"Top","","top edge",113,null],[18,"Bottom","","bottom edge",113,null],[18,"Left","","left edge",113,null],[18,"TopLeft","","top and left edges",113,null],[18,"BottomLeft","","bottom and left edges",113,null],[18,"Right","","right edge",113,null],[18,"TopRight","","top and right edges",113,null],[18,"BottomRight","","bottom and right edges",113,null],[11,"empty","","Returns an empty set of flags.",113,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",113,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",113,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",113,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",113,{"inputs":[{"name":"self"},{"name":"resize"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitor_assign","","Adds the set of flags.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitxor_assign","","Toggles the set of flags.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"sub_assign","","Disables all flags enabled in the set.",113,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",113,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"extend","","",113,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",113,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",113,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"to_raw","","",113,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ne","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"clone","","",114,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"partial_cmp","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"le","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"gt","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ge","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"cmp","","",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"ordering"}}],[11,"hash","","",114,null],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Inactive","","do not set keyboard focus",114,null],[11,"empty","","Returns an empty set of flags.",114,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",114,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",114,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",114,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",114,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",114,{"inputs":[{"name":"self"},{"name":"transient"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitor_assign","","Adds the set of flags.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitxor_assign","","Toggles the set of flags.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"sub_assign","","Disables all flags enabled in the set.",114,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",114,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"extend","","",114,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",114,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",114,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"to_raw","","",114,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmethod"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"fullscreenmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",56,{"inputs":[{"name":"u32"}],"output":{"generics":["fullscreenmethod"],"name":"option"}}],[11,"to_raw","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",57,null],[11,"as_raw_c_in","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",58,null],[11,"as_raw_c_in","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",115,null],[11,"pong","wayland_client","",7,null],[11,"_move","","",7,null],[11,"resize","","",7,null],[11,"set_toplevel","","",7,null],[11,"set_transient","","",7,null],[11,"set_fullscreen","","",7,null],[11,"set_popup","","",7,null],[11,"set_maximized","","",7,null],[11,"set_title","","",7,null],[11,"set_class","","",7,null],[11,"clone","wayland_client::protocol::wl_surface","",60,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",60,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",60,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",60,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",61,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",61,null],[11,"as_raw_c_in","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",62,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",62,null],[11,"as_raw_c_in","","",62,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",116,null],[11,"destroy","wayland_client","",7,null],[11,"attach","","",7,null],[11,"damage","","",7,null],[11,"frame","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"set_opaque_region","","",7,null],[11,"set_input_region","","",7,null],[11,"commit","","",7,null],[11,"set_buffer_transform","","",7,null],[11,"set_buffer_scale","","",7,null],[11,"damage_buffer","","",7,null],[11,"eq","wayland_client::protocol::wl_seat","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ne","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"partial_cmp","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"le","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"gt","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ge","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"cmp","","",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"ordering"}}],[11,"hash","","",117,null],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Pointer","","the seat has pointer devices",117,null],[18,"Keyboard","","the seat has one or more keyboards",117,null],[18,"Touch","","the seat has touch devices",117,null],[11,"empty","","Returns an empty set of flags.",117,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",117,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",117,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",117,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",117,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",117,{"inputs":[{"name":"self"},{"name":"capability"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitor_assign","","Adds the set of flags.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitxor_assign","","Toggles the set of flags.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"sub_assign","","Disables all flags enabled in the set.",117,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",117,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"extend","","",117,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",117,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",117,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",117,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",64,null],[11,"as_raw_c_in","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",65,null],[11,"as_raw_c_in","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",118,null],[11,"get_pointer","wayland_client","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"get_keyboard","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"get_touch","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"release","","",7,null],[11,"clone","wayland_client::protocol::wl_pointer","",67,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",67,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",67,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",68,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",69,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"from_raw","","",69,{"inputs":[{"name":"u32"}],"output":{"generics":["axis"],"name":"option"}}],[11,"to_raw","","",69,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",70,{"inputs":[{"name":"self"},{"name":"axissource"}],"output":{"name":"bool"}}],[11,"from_raw","","",70,{"inputs":[{"name":"u32"}],"output":{"generics":["axissource"],"name":"option"}}],[11,"to_raw","","",70,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",71,null],[11,"as_raw_c_in","","",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",72,null],[11,"as_raw_c_in","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",119,null],[11,"set_cursor","wayland_client","",7,null],[11,"release","","",7,null],[11,"clone","wayland_client::protocol::wl_keyboard","",74,{"inputs":[{"name":"self"}],"output":{"name":"keymapformat"}}],[11,"fmt","","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",74,{"inputs":[{"name":"self"},{"name":"keymapformat"}],"output":{"name":"bool"}}],[11,"from_raw","","",74,{"inputs":[{"name":"u32"}],"output":{"generics":["keymapformat"],"name":"option"}}],[11,"to_raw","","",74,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"fmt","","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",75,{"inputs":[{"name":"self"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"from_raw","","",75,{"inputs":[{"name":"u32"}],"output":{"generics":["keystate"],"name":"option"}}],[11,"to_raw","","",75,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",76,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",76,null],[11,"as_raw_c_in","","",76,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",77,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",77,null],[11,"as_raw_c_in","","",77,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",120,null],[11,"release","wayland_client","",7,null],[11,"is_destructor","wayland_client::protocol::wl_touch","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",79,null],[11,"as_raw_c_in","","",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",80,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",80,null],[11,"as_raw_c_in","","",80,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",121,null],[11,"release","wayland_client","",7,null],[11,"clone","wayland_client::protocol::wl_output","",82,{"inputs":[{"name":"self"}],"output":{"name":"subpixel"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"subpixel"}],"output":{"name":"bool"}}],[11,"from_raw","","",82,{"inputs":[{"name":"u32"}],"output":{"generics":["subpixel"],"name":"option"}}],[11,"to_raw","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_raw","","",83,{"inputs":[{"name":"u32"}],"output":{"generics":["transform"],"name":"option"}}],[11,"to_raw","","",83,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",122,null],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Current","","indicates this is the current mode",122,null],[18,"Preferred","","indicates this is the preferred mode",122,null],[11,"empty","","Returns an empty set of flags.",122,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",122,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",122,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",122,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",122,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",122,{"inputs":[{"name":"self"},{"name":"mode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",122,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",122,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"extend","","",122,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",122,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",122,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"to_raw","","",122,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",84,null],[11,"as_raw_c_in","","",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",85,null],[11,"as_raw_c_in","","",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",123,null],[11,"release","wayland_client","",7,null],[11,"is_destructor","wayland_client::protocol::wl_region","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",87,null],[11,"as_raw_c_in","","",87,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",124,null],[11,"as_raw_c_in","","",124,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",125,null],[11,"destroy","wayland_client","",7,null],[11,"add","","",7,null],[11,"subtract","","",7,null],[11,"clone","wayland_client::protocol::wl_subcompositor","",89,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",89,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",90,null],[11,"as_raw_c_in","","",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",126,null],[11,"as_raw_c_in","","",126,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",127,null],[11,"destroy","wayland_client","",7,null],[11,"get_subsurface","","",7,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[11,"clone","wayland_client::protocol::wl_subsurface","",92,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",92,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",92,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",92,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",93,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",93,null],[11,"as_raw_c_in","","",93,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",128,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",128,null],[11,"as_raw_c_in","","",128,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",129,null],[11,"destroy","wayland_client","",7,null],[11,"set_position","","",7,null],[11,"place_above","","",7,null],[11,"place_below","","",7,null],[11,"set_sync","","",7,null],[11,"set_desync","","",7,null],[14,"global_filter","","Convenience macro to create a `GlobalManager` callback",null,null],[11,"initialize","wayland_client::sys::client","",130,null],[11,"initialize","","",131,null],[11,"deref","","",131,{"inputs":[{"name":"self"}],"output":{"name":"waylandclient"}}],[11,"deref","","",130,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"open","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["waylandclient","dlerror"],"name":"result"}}]],"paths":[[4,"ConnectError"],[4,"GlobalError"],[4,"GlobalEvent"],[3,"Display"],[3,"EventQueue"],[3,"ReadEventsGuard"],[3,"GlobalManager"],[3,"Proxy"],[3,"NewProxy"],[3,"CursorTheme"],[3,"Cursor"],[3,"CursorImageBuffer"],[3,"WlEglSurface"],[3,"WaylandClient"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Format"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"FullscreenMethod"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"KeymapFormat"],[4,"KeyState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Subpixel"],[4,"Transform"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[3,"WlDisplay"],[3,"WlRegistry"],[4,"Request"],[3,"WlCallback"],[4,"Event"],[3,"WlCompositor"],[4,"Event"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"DndAction"],[4,"Event"],[3,"WlDataDeviceManager"],[4,"Event"],[3,"WlShell"],[3,"Resize"],[3,"Transient"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"Capability"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"Mode"],[3,"WlOutput"],[4,"Event"],[3,"WlRegion"],[4,"Event"],[3,"WlSubcompositor"],[4,"Event"],[3,"WlSubsurface"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"]]};
searchIndex["wayland_commons"] = {"doc":"Common definitions for wayland","items":[[3,"AnonymousObject","wayland_commons","Anonymous interface",null,null],[4,"NoMessage","","An empty enum representing a MessageGroup with no messages",null,null],[5,"downcast_impl","","Attempt to downcast a boxed `Implementation` trait object.",null,{"inputs":[{"generics":["implementation"],"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[8,"MessageGroup","","A group of messages",null,null],[10,"is_destructor","","Whether this message is a destructor",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"from_raw_c","","Construct a message of this group from its C representation",0,null],[10,"as_raw_c_in","","Build a C representation of this message",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[8,"Interface","","The description of a wayland interface",null,null],[16,"Request","","Set of requests associated to this interface",1,null],[16,"Event","","Set of events associated to this interface",1,null],[18,"NAME","","Name of this interface",1,null],[10,"c_interface","","Pointer to the C representation of this interface",1,null],[8,"Implementation","","Trait representing implementations for wayland objects",null,null],[10,"receive","","Receive a message",2,{"inputs":[{"name":"self"},{"name":"msg"},{"name":"meta"}],"output":null}],[11,"is","","Returns true if the trait object wraps an object of type `__T`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"downcast","","Returns a boxed object from a boxed trait object if the underlying object is of type `__T`. Returns the original boxed trait if it isn't.",2,{"inputs":[{"name":"box"}],"output":{"generics":["box","box"],"name":"result"}}],[11,"downcast_ref","","Returns a reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns a mutable reference to the object within the trait object if it is of type `__T`, or `None` if it isn't.",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"c_interface","","",3,null],[11,"is_destructor","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",4,null],[11,"as_raw_c_in","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}]],"paths":[[8,"MessageGroup"],[8,"Interface"],[8,"Implementation"],[3,"AnonymousObject"],[4,"NoMessage"]]};
searchIndex["wayland_protocols"] = {"doc":"This crate provides bindings to the official wayland protocol extensions provided in https://cgit.freedesktop.org/wayland/wayland-protocols","items":[[0,"unstable","wayland_protocols","Unstable protocols from wayland-protocols",null,null],[0,"fullscreen_shell","wayland_protocols::unstable","Fullscreen shell protocol",null,null],[0,"v1","wayland_protocols::unstable::fullscreen_shell","",null,null],[0,"client","wayland_protocols::unstable::fullscreen_shell::v1","Client-side API of this protocol",null,null],[0,"zwp_fullscreen_shell_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","displays a single surface per output",null,null],[3,"ZwpFullscreenShellV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",null,null],[4,"Capability","","capabilities advertised by the compositor",null,null],[13,"ArbitraryModes","","compositor is capable of almost any output mode",0,null],[13,"CursorPlane","","compositor has a separate cursor plane",0,null],[4,"PresentMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",1,null],[13,"Center","","center the surface on the output",1,null],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",1,null],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",1,null],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",1,null],[4,"Error","","wl_fullscreen_shell error values",null,null],[13,"InvalidMethod","","present_method is not known",2,null],[4,"Request","","",null,null],[13,"Release","","release the wl_fullscreen_shell interface",3,null],[13,"PresentSurface","","present surface for display",3,null],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",3,null],[12,"method","","",3,null],[12,"output","","",3,null],[13,"PresentSurfaceForMode","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","present surface for display at a particular mode",3,null],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Request","",3,null],[12,"output","","",3,null],[12,"framerate","","",3,null],[12,"feedback","","",3,null],[4,"Event","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",null,null],[13,"Capability","","advertises a capability of the compositor",4,null],[12,"capability","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1::Event","",4,null],[8,"RequestsTrait","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",null,null],[10,"release","","release the wl_fullscreen_shell interface",5,null],[10,"present_surface","","present surface for display",5,null],[10,"present_surface_for_mode","","present surface for display at a particular mode",5,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"},{"name":"i32"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_fullscreen_shell_mode_feedback_v1","wayland_protocols::unstable::fullscreen_shell::v1::client","",null,null],[3,"ZwpFullscreenShellModeFeedbackV1","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"ModeSuccessful","","mode switch succeeded",6,null],[13,"ModeFailed","","mode switch failed",6,null],[13,"PresentCancelled","","mode switch cancelled",6,null],[8,"RequestsTrait","","",null,null],[0,"server","wayland_protocols::unstable::fullscreen_shell::v1","Server-side API of this protocol",null,null],[0,"zwp_fullscreen_shell_v1","wayland_protocols::unstable::fullscreen_shell::v1::server","displays a single surface per output",null,null],[3,"ZwpFullscreenShellV1","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1","",null,null],[4,"Capability","","capabilities advertised by the compositor",null,null],[13,"ArbitraryModes","","compositor is capable of almost any output mode",7,null],[13,"CursorPlane","","compositor has a separate cursor plane",7,null],[4,"PresentMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",8,null],[13,"Center","","center the surface on the output",8,null],[13,"Zoom","","scale the surface, preserving aspect ratio, to the largest size that will fit on the output",8,null],[13,"ZoomCrop","","scale the surface, preserving aspect ratio, to fully fill the output cropping if needed",8,null],[13,"Stretch","","scale the surface to the size of the output ignoring aspect ratio",8,null],[4,"Error","","wl_fullscreen_shell error values",null,null],[13,"InvalidMethod","","present_method is not known",9,null],[4,"Request","","",null,null],[13,"Release","","release the wl_fullscreen_shell interface",10,null],[13,"PresentSurface","","present surface for display",10,null],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1::Request","",10,null],[12,"method","","",10,null],[12,"output","","",10,null],[13,"PresentSurfaceForMode","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1","present surface for display at a particular mode",10,null],[12,"surface","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1::Request","",10,null],[12,"output","","",10,null],[12,"framerate","","",10,null],[12,"feedback","","",10,null],[4,"Event","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1","",null,null],[13,"Capability","","advertises a capability of the compositor",11,null],[12,"capability","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1::Event","",11,null],[0,"zwp_fullscreen_shell_mode_feedback_v1","wayland_protocols::unstable::fullscreen_shell::v1::server","",null,null],[3,"ZwpFullscreenShellModeFeedbackV1","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_mode_feedback_v1","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"ModeSuccessful","","mode switch succeeded",12,null],[13,"ModeFailed","","mode switch failed",12,null],[13,"PresentCancelled","","mode switch cancelled",12,null],[0,"c_interfaces","wayland_protocols::unstable::fullscreen_shell::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::fullscreen_shell::v1::c_interfaces","",null,null],[7,"wl_output_interface","","",null,null],[7,"zwp_fullscreen_shell_v1_requests","","",null,null],[7,"zwp_fullscreen_shell_v1_events","","",null,null],[7,"zwp_fullscreen_shell_v1_interface","","",null,null],[7,"zwp_fullscreen_shell_mode_feedback_v1_events","","",null,null],[7,"zwp_fullscreen_shell_mode_feedback_v1_interface","","",null,null],[11,"clone","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_v1","",0,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",0,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"presentmethod"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"presentmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",1,{"inputs":[{"name":"u32"}],"output":{"generics":["presentmethod"],"name":"option"}}],[11,"to_raw","","",1,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",2,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",2,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",3,null],[11,"as_raw_c_in","","",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",4,null],[11,"as_raw_c_in","","",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",13,null],[11,"is_destructor","wayland_protocols::unstable::fullscreen_shell::v1::client::zwp_fullscreen_shell_mode_feedback_v1","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",14,null],[11,"as_raw_c_in","","",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",6,null],[11,"as_raw_c_in","","",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",15,null],[11,"clone","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_v1","",7,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",7,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",7,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"presentmethod"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"presentmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",8,{"inputs":[{"name":"u32"}],"output":{"generics":["presentmethod"],"name":"option"}}],[11,"to_raw","","",8,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",9,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",9,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",10,null],[11,"as_raw_c_in","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",11,null],[11,"as_raw_c_in","","",11,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",16,null],[11,"is_destructor","wayland_protocols::unstable::fullscreen_shell::v1::server::zwp_fullscreen_shell_mode_feedback_v1","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",17,null],[11,"as_raw_c_in","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",12,null],[11,"as_raw_c_in","","",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",18,null],[0,"idle_inhibit","wayland_protocols::unstable","Screensaver inhibition protocol",null,null],[0,"v1","wayland_protocols::unstable::idle_inhibit","",null,null],[0,"client","wayland_protocols::unstable::idle_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_idle_inhibit_manager_v1","wayland_protocols::unstable::idle_inhibit::v1::client","control behavior when display idles",null,null],[3,"ZwpIdleInhibitManagerV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the idle inhibitor object",19,null],[13,"CreateInhibitor","","create a new inhibitor object",19,null],[12,"id","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1::Request","",19,null],[12,"surface","","",19,null],[4,"Event","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the idle inhibitor object",20,null],[10,"create_inhibitor","","create a new inhibitor object",20,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_idle_inhibitor_v1","wayland_protocols::unstable::idle_inhibit::v1::client","context object for inhibiting idle behavior",null,null],[3,"ZwpIdleInhibitorV1","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the idle inhibitor object",21,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the idle inhibitor object",22,null],[0,"server","wayland_protocols::unstable::idle_inhibit::v1","Server-side API of this protocol",null,null],[0,"zwp_idle_inhibit_manager_v1","wayland_protocols::unstable::idle_inhibit::v1::server","control behavior when display idles",null,null],[3,"ZwpIdleInhibitManagerV1","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibit_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the idle inhibitor object",23,null],[13,"CreateInhibitor","","create a new inhibitor object",23,null],[12,"id","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibit_manager_v1::Request","",23,null],[12,"surface","","",23,null],[4,"Event","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibit_manager_v1","",null,null],[0,"zwp_idle_inhibitor_v1","wayland_protocols::unstable::idle_inhibit::v1::server","context object for inhibiting idle behavior",null,null],[3,"ZwpIdleInhibitorV1","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibitor_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the idle inhibitor object",24,null],[4,"Event","","",null,null],[0,"c_interfaces","wayland_protocols::unstable::idle_inhibit::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::idle_inhibit::v1::c_interfaces","",null,null],[7,"zwp_idle_inhibit_manager_v1_requests","","",null,null],[7,"zwp_idle_inhibit_manager_v1_interface","","",null,null],[7,"zwp_idle_inhibitor_v1_requests","","",null,null],[7,"zwp_idle_inhibitor_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibit_manager_v1","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",19,null],[11,"as_raw_c_in","","",19,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",25,null],[11,"as_raw_c_in","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",26,null],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::client::zwp_idle_inhibitor_v1","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",21,null],[11,"as_raw_c_in","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",27,null],[11,"as_raw_c_in","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",28,null],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibit_manager_v1","",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",23,null],[11,"as_raw_c_in","","",23,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",29,null],[11,"as_raw_c_in","","",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",30,null],[11,"is_destructor","wayland_protocols::unstable::idle_inhibit::v1::server::zwp_idle_inhibitor_v1","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",24,null],[11,"as_raw_c_in","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",31,null],[11,"as_raw_c_in","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",32,null],[0,"input_method","wayland_protocols::unstable","Input method protocol",null,null],[0,"v1","wayland_protocols::unstable::input_method","",null,null],[0,"client","wayland_protocols::unstable::input_method::v1","Client-side API of this protocol",null,null],[0,"zwp_input_method_context_v1","wayland_protocols::unstable::input_method::v1::client","input method context",null,null],[3,"ZwpInputMethodContextV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","This is a destructor, once sent this object cannot be used any longer.",33,null],[13,"CommitString","","commit string",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"text","","",33,null],[13,"PreeditString","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit string",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"text","","",33,null],[12,"commit","","",33,null],[13,"PreeditStyling","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit styling",33,null],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"length","","",33,null],[12,"style","","",33,null],[13,"PreeditCursor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","pre-edit cursor",33,null],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[13,"DeleteSurroundingText","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","delete text",33,null],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"length","","",33,null],[13,"CursorPosition","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","set cursor to a new position",33,null],[12,"index","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"anchor","","",33,null],[13,"ModifiersMap","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",33,null],[12,"map","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[13,"Keysym","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","keysym",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"time","","",33,null],[12,"sym","","",33,null],[12,"state","","",33,null],[12,"modifiers","","",33,null],[13,"GrabKeyboard","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","grab hardware keyboard",33,null],[12,"keyboard","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[13,"Key","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward key event",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"time","","",33,null],[12,"key","","",33,null],[12,"state","","",33,null],[13,"Modifiers","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","forward modifiers event",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"mods_depressed","","",33,null],[12,"mods_latched","","",33,null],[12,"mods_locked","","",33,null],[12,"group","","",33,null],[13,"Language","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"language","","",33,null],[13,"TextDirection","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",33,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Request","",33,null],[12,"direction","","",33,null],[4,"Event","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",null,null],[13,"SurroundingText","","surrounding text event",34,null],[12,"text","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",34,null],[12,"cursor","","",34,null],[12,"anchor","","",34,null],[13,"Reset","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",34,null],[13,"ContentType","","",34,null],[12,"hint","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",34,null],[12,"purpose","","",34,null],[13,"InvokeAction","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",34,null],[12,"button","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",34,null],[12,"index","","",34,null],[13,"CommitState","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",34,null],[12,"serial","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",34,null],[13,"PreferredLanguage","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",34,null],[12,"language","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1::Event","",34,null],[8,"RequestsTrait","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",null,null],[10,"destroy","","This is a destructor, you cannot send requests to this object any longer once this method is called.",35,null],[10,"commit_string","","commit string",35,null],[10,"preedit_string","","pre-edit string",35,null],[10,"preedit_styling","","pre-edit styling",35,null],[10,"preedit_cursor","","pre-edit cursor",35,null],[10,"delete_surrounding_text","","delete text",35,null],[10,"cursor_position","","set cursor to a new position",35,null],[10,"modifiers_map","","",35,null],[10,"keysym","","keysym",35,null],[10,"grab_keyboard","","grab hardware keyboard",35,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"key","","forward key event",35,null],[10,"modifiers","","forward modifiers event",35,null],[10,"language","","",35,null],[10,"text_direction","","",35,null],[0,"zwp_input_method_v1","wayland_protocols::unstable::input_method::v1::client","input method",null,null],[3,"ZwpInputMethodV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"Activate","","activate event",36,null],[12,"id","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",36,null],[13,"Deactivate","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","deactivate event",36,null],[12,"context","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1::Event","",36,null],[8,"RequestsTrait","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",null,null],[0,"zwp_input_panel_v1","wayland_protocols::unstable::input_method::v1::client","interface for implementing keyboards",null,null],[3,"ZwpInputPanelV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",null,null],[4,"Request","","",null,null],[13,"GetInputPanelSurface","","",37,null],[12,"id","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1::Request","",37,null],[12,"surface","","",37,null],[4,"Event","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"get_input_panel_surface","","",38,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_input_panel_surface_v1","wayland_protocols::unstable::input_method::v1::client","",null,null],[3,"ZwpInputPanelSurfaceV1","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",null,null],[4,"Position","","",null,null],[13,"CenterBottom","","",39,null],[4,"Request","","",null,null],[13,"SetToplevel","","set the surface type as a keyboard",40,null],[12,"output","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1::Request","",40,null],[12,"position","","",40,null],[13,"SetOverlayPanel","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","set the surface type as an overlay panel",40,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"set_toplevel","","set the surface type as a keyboard",41,null],[10,"set_overlay_panel","","set the surface type as an overlay panel",41,null],[0,"server","wayland_protocols::unstable::input_method::v1","Server-side API of this protocol",null,null],[0,"zwp_input_method_context_v1","wayland_protocols::unstable::input_method::v1::server","input method context",null,null],[3,"ZwpInputMethodContextV1","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","This is a destructor, once received this object cannot be used any longer.",42,null],[13,"CommitString","","commit string",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"text","","",42,null],[13,"PreeditString","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","pre-edit string",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"text","","",42,null],[12,"commit","","",42,null],[13,"PreeditStyling","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","pre-edit styling",42,null],[12,"index","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"length","","",42,null],[12,"style","","",42,null],[13,"PreeditCursor","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","pre-edit cursor",42,null],[12,"index","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[13,"DeleteSurroundingText","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","delete text",42,null],[12,"index","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"length","","",42,null],[13,"CursorPosition","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","set cursor to a new position",42,null],[12,"index","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"anchor","","",42,null],[13,"ModifiersMap","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",42,null],[12,"map","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[13,"Keysym","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","keysym",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"time","","",42,null],[12,"sym","","",42,null],[12,"state","","",42,null],[12,"modifiers","","",42,null],[13,"GrabKeyboard","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","grab hardware keyboard",42,null],[12,"keyboard","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[13,"Key","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","forward key event",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"time","","",42,null],[12,"key","","",42,null],[12,"state","","",42,null],[13,"Modifiers","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","forward modifiers event",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"mods_depressed","","",42,null],[12,"mods_latched","","",42,null],[12,"mods_locked","","",42,null],[12,"group","","",42,null],[13,"Language","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"language","","",42,null],[13,"TextDirection","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",42,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Request","",42,null],[12,"direction","","",42,null],[4,"Event","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",null,null],[13,"SurroundingText","","surrounding text event",43,null],[12,"text","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Event","",43,null],[12,"cursor","","",43,null],[12,"anchor","","",43,null],[13,"Reset","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",43,null],[13,"ContentType","","",43,null],[12,"hint","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Event","",43,null],[12,"purpose","","",43,null],[13,"InvokeAction","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",43,null],[12,"button","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Event","",43,null],[12,"index","","",43,null],[13,"CommitState","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",43,null],[12,"serial","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Event","",43,null],[13,"PreferredLanguage","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",43,null],[12,"language","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1::Event","",43,null],[0,"zwp_input_method_v1","wayland_protocols::unstable::input_method::v1::server","input method",null,null],[3,"ZwpInputMethodV1","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_v1","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"Activate","","activate event",44,null],[12,"id","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_v1::Event","",44,null],[13,"Deactivate","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_v1","deactivate event",44,null],[12,"context","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_v1::Event","",44,null],[0,"zwp_input_panel_v1","wayland_protocols::unstable::input_method::v1::server","interface for implementing keyboards",null,null],[3,"ZwpInputPanelV1","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_v1","",null,null],[4,"Request","","",null,null],[13,"GetInputPanelSurface","","",45,null],[12,"id","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_v1::Request","",45,null],[12,"surface","","",45,null],[4,"Event","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_v1","",null,null],[0,"zwp_input_panel_surface_v1","wayland_protocols::unstable::input_method::v1::server","",null,null],[3,"ZwpInputPanelSurfaceV1","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_surface_v1","",null,null],[4,"Position","","",null,null],[13,"CenterBottom","","",46,null],[4,"Request","","",null,null],[13,"SetToplevel","","set the surface type as a keyboard",47,null],[12,"output","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_surface_v1::Request","",47,null],[12,"position","","",47,null],[13,"SetOverlayPanel","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_surface_v1","set the surface type as an overlay panel",47,null],[4,"Event","","",null,null],[0,"c_interfaces","wayland_protocols::unstable::input_method::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::input_method::v1::c_interfaces","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_keyboard_interface","","",null,null],[7,"zwp_input_method_context_v1_requests","","",null,null],[7,"zwp_input_method_context_v1_events","","",null,null],[7,"zwp_input_method_context_v1_interface","","",null,null],[7,"zwp_input_method_v1_events","","",null,null],[7,"zwp_input_method_v1_interface","","",null,null],[7,"zwp_input_panel_v1_requests","","",null,null],[7,"zwp_input_panel_v1_interface","","",null,null],[7,"zwp_input_panel_surface_v1_requests","","",null,null],[7,"zwp_input_panel_surface_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_context_v1","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",33,null],[11,"as_raw_c_in","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",34,null],[11,"as_raw_c_in","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",48,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_method_v1","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",49,null],[11,"as_raw_c_in","","",49,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",36,null],[11,"as_raw_c_in","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",50,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_v1","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",37,null],[11,"as_raw_c_in","","",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",51,null],[11,"as_raw_c_in","","",51,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",52,null],[11,"clone","wayland_protocols::unstable::input_method::v1::client::zwp_input_panel_surface_v1","",39,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"from_raw","","",39,{"inputs":[{"name":"u32"}],"output":{"generics":["position"],"name":"option"}}],[11,"to_raw","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",40,null],[11,"as_raw_c_in","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",53,null],[11,"as_raw_c_in","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",54,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_context_v1","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",42,null],[11,"as_raw_c_in","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",43,null],[11,"as_raw_c_in","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",55,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::server::zwp_input_method_v1","",56,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",56,null],[11,"as_raw_c_in","","",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",44,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",44,null],[11,"as_raw_c_in","","",44,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",57,null],[11,"is_destructor","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_v1","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",45,null],[11,"as_raw_c_in","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",58,null],[11,"as_raw_c_in","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",59,null],[11,"clone","wayland_protocols::unstable::input_method::v1::server::zwp_input_panel_surface_v1","",46,{"inputs":[{"name":"self"}],"output":{"name":"position"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"position"}],"output":{"name":"bool"}}],[11,"from_raw","","",46,{"inputs":[{"name":"u32"}],"output":{"generics":["position"],"name":"option"}}],[11,"to_raw","","",46,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",47,null],[11,"as_raw_c_in","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",60,null],[11,"as_raw_c_in","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",61,null],[0,"keyboard_shortcuts_inhibit","wayland_protocols::unstable","Protocol for inhibiting the compositor keyboard shortcuts",null,null],[0,"v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit","",null,null],[0,"client","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","Client-side API of this protocol",null,null],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard grab_manager",null,null],[3,"ZwpKeyboardShortcutsInhibitManagerV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",62,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",63,null],[13,"InhibitShortcuts","","create a new keyboard shortcuts inhibitor object",63,null],[12,"id","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1::Request","",63,null],[12,"surface","","",63,null],[12,"seat","","",63,null],[4,"Event","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",64,null],[10,"inhibit_shortcuts","","create a new keyboard shortcuts inhibitor object",64,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_keyboard_shortcuts_inhibitor_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client","context object for keyboard shortcuts inhibitor",null,null],[3,"ZwpKeyboardShortcutsInhibitorV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",65,null],[4,"Event","","",null,null],[13,"Active","","shortcuts are inhibited",66,null],[13,"Inactive","","shortcuts are restored",66,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the keyboard shortcuts inhibitor object",67,null],[0,"server","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","Server-side API of this protocol",null,null],[0,"zwp_keyboard_shortcuts_inhibit_manager_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server","context object for keyboard grab_manager",null,null],[3,"ZwpKeyboardShortcutsInhibitManagerV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyInhibited","","the shortcuts are already inhibited for this surface",68,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",69,null],[13,"InhibitShortcuts","","create a new keyboard shortcuts inhibitor object",69,null],[12,"id","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibit_manager_v1::Request","",69,null],[12,"surface","","",69,null],[12,"seat","","",69,null],[4,"Event","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibit_manager_v1","",null,null],[0,"zwp_keyboard_shortcuts_inhibitor_v1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server","context object for keyboard shortcuts inhibitor",null,null],[3,"ZwpKeyboardShortcutsInhibitorV1","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibitor_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard shortcuts inhibitor object",70,null],[4,"Event","","",null,null],[13,"Active","","shortcuts are inhibited",71,null],[13,"Inactive","","shortcuts are restored",71,null],[0,"c_interfaces","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_requests","","",null,null],[7,"zwp_keyboard_shortcuts_inhibit_manager_v1_interface","","",null,null],[7,"zwp_keyboard_shortcuts_inhibitor_v1_requests","","",null,null],[7,"zwp_keyboard_shortcuts_inhibitor_v1_events","","",null,null],[7,"zwp_keyboard_shortcuts_inhibitor_v1_interface","","",null,null],[11,"clone","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibit_manager_v1","",62,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",62,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",63,null],[11,"as_raw_c_in","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",72,null],[11,"as_raw_c_in","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",73,null],[11,"is_destructor","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::client::zwp_keyboard_shortcuts_inhibitor_v1","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",65,null],[11,"as_raw_c_in","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",66,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",66,null],[11,"as_raw_c_in","","",66,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",74,null],[11,"clone","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibit_manager_v1","",68,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",68,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",69,null],[11,"as_raw_c_in","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",75,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",75,null],[11,"as_raw_c_in","","",75,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",76,null],[11,"is_destructor","wayland_protocols::unstable::keyboard_shortcuts_inhibit::v1::server::zwp_keyboard_shortcuts_inhibitor_v1","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",70,null],[11,"as_raw_c_in","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",71,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",71,null],[11,"as_raw_c_in","","",71,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",77,null],[0,"linux_dmabuf","wayland_protocols::unstable","Linux DMA-BUF protocol",null,null],[0,"v1","wayland_protocols::unstable::linux_dmabuf","",null,null],[0,"client","wayland_protocols::unstable::linux_dmabuf::v1","Client-side API of this protocol",null,null],[0,"zwp_linux_dmabuf_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","factory for creating dmabuf-based wl_buffers",null,null],[3,"ZwpLinuxDmabufV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unbind the factory",78,null],[13,"CreateParams","","create a temporary object for buffer parameters",78,null],[12,"params_id","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Request","",78,null],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",null,null],[13,"Format","","supported buffer format",79,null],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",79,null],[13,"Modifier","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","supported buffer format modifier",79,null],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1::Event","",79,null],[12,"modifier_hi","","",79,null],[12,"modifier_lo","","",79,null],[8,"RequestsTrait","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",null,null],[10,"destroy","","unbind the factory",80,null],[10,"create_params","","create a temporary object for buffer parameters",80,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_linux_buffer_params_v1","wayland_protocols::unstable::linux_dmabuf::v1::client","parameters for creating a dmabuf-based wl_buffer",null,null],[3,"ZwpLinuxBufferParamsV1","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",81,null],[13,"PlaneIdx","","plane index out of bounds",81,null],[13,"PlaneSet","","the plane index was already set",81,null],[13,"Incomplete","","missing or too many planes to create a buffer",81,null],[13,"InvalidFormat","","format not supported",81,null],[13,"InvalidDimensions","","invalid width or height",81,null],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",81,null],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",81,null],[4,"Flags","","",null,null],[13,"YInvert","","contents are y-inverted",82,null],[13,"Interlaced","","content is interlaced",82,null],[13,"BottomFirst","","bottom field first",82,null],[4,"Request","","",null,null],[13,"Destroy","","delete this object, used or not",83,null],[13,"Add","","add a dmabuf to the temporary set",83,null],[12,"fd","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",83,null],[12,"plane_idx","","",83,null],[12,"offset","","",83,null],[12,"stride","","",83,null],[12,"modifier_hi","","",83,null],[12,"modifier_lo","","",83,null],[13,"Create","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","create a wl_buffer from the given dmabufs",83,null],[12,"width","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",83,null],[12,"height","","",83,null],[12,"format","","",83,null],[12,"flags","","",83,null],[13,"CreateImmed","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","immediately create a wl_buffer from the given dmabufs",83,null],[12,"buffer_id","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Request","",83,null],[12,"width","","",83,null],[12,"height","","",83,null],[12,"format","","",83,null],[12,"flags","","",83,null],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",null,null],[13,"Created","","buffer creation succeeded",84,null],[12,"buffer","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1::Event","",84,null],[13,"Failed","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","buffer creation failed",84,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","delete this object, used or not",85,null],[10,"add","","add a dmabuf to the temporary set",85,null],[10,"create","","create a wl_buffer from the given dmabufs",85,null],[10,"create_immed","","immediately create a wl_buffer from the given dmabufs",85,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"server","wayland_protocols::unstable::linux_dmabuf::v1","Server-side API of this protocol",null,null],[0,"zwp_linux_dmabuf_v1","wayland_protocols::unstable::linux_dmabuf::v1::server","factory for creating dmabuf-based wl_buffers",null,null],[3,"ZwpLinuxDmabufV1","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unbind the factory",86,null],[13,"CreateParams","","create a temporary object for buffer parameters",86,null],[12,"params_id","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1::Request","",86,null],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1","",null,null],[13,"Format","","supported buffer format",87,null],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1::Event","",87,null],[13,"Modifier","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1","supported buffer format modifier",87,null],[12,"format","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1::Event","",87,null],[12,"modifier_hi","","",87,null],[12,"modifier_lo","","",87,null],[0,"zwp_linux_buffer_params_v1","wayland_protocols::unstable::linux_dmabuf::v1::server","parameters for creating a dmabuf-based wl_buffer",null,null],[3,"ZwpLinuxBufferParamsV1","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","",null,null],[4,"Error","","",null,null],[13,"AlreadyUsed","","the dmabuf_batch object has already been used to create a wl_buffer",88,null],[13,"PlaneIdx","","plane index out of bounds",88,null],[13,"PlaneSet","","the plane index was already set",88,null],[13,"Incomplete","","missing or too many planes to create a buffer",88,null],[13,"InvalidFormat","","format not supported",88,null],[13,"InvalidDimensions","","invalid width or height",88,null],[13,"OutOfBounds","","offset + stride * height goes out of dmabuf bounds",88,null],[13,"InvalidWlBuffer","","invalid wl_buffer resulted from importing dmabufs via the create_immed request on given buffer_params",88,null],[4,"Flags","","",null,null],[13,"YInvert","","contents are y-inverted",89,null],[13,"Interlaced","","content is interlaced",89,null],[13,"BottomFirst","","bottom field first",89,null],[4,"Request","","",null,null],[13,"Destroy","","delete this object, used or not",90,null],[13,"Add","","add a dmabuf to the temporary set",90,null],[12,"fd","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1::Request","",90,null],[12,"plane_idx","","",90,null],[12,"offset","","",90,null],[12,"stride","","",90,null],[12,"modifier_hi","","",90,null],[12,"modifier_lo","","",90,null],[13,"Create","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","create a wl_buffer from the given dmabufs",90,null],[12,"width","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1::Request","",90,null],[12,"height","","",90,null],[12,"format","","",90,null],[12,"flags","","",90,null],[13,"CreateImmed","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","immediately create a wl_buffer from the given dmabufs",90,null],[12,"buffer_id","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1::Request","",90,null],[12,"width","","",90,null],[12,"height","","",90,null],[12,"format","","",90,null],[12,"flags","","",90,null],[4,"Event","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","",null,null],[13,"Created","","buffer creation succeeded",91,null],[12,"buffer","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1::Event","",91,null],[13,"Failed","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","buffer creation failed",91,null],[0,"c_interfaces","wayland_protocols::unstable::linux_dmabuf::v1","C interfaces for this protocol",null,null],[7,"wl_buffer_interface","wayland_protocols::unstable::linux_dmabuf::v1::c_interfaces","",null,null],[7,"zwp_linux_dmabuf_v1_requests","","",null,null],[7,"zwp_linux_dmabuf_v1_events","","",null,null],[7,"zwp_linux_dmabuf_v1_interface","","",null,null],[7,"zwp_linux_buffer_params_v1_requests","","",null,null],[7,"zwp_linux_buffer_params_v1_events","","",null,null],[7,"zwp_linux_buffer_params_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_dmabuf_v1","",78,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",78,null],[11,"as_raw_c_in","","",78,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",79,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",79,null],[11,"as_raw_c_in","","",79,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",92,null],[11,"clone","wayland_protocols::unstable::linux_dmabuf::v1::client::zwp_linux_buffer_params_v1","",81,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",81,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",81,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",82,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"from_raw","","",82,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"to_raw","","",82,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",83,null],[11,"as_raw_c_in","","",83,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",84,null],[11,"as_raw_c_in","","",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",93,null],[11,"is_destructor","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_dmabuf_v1","",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",86,null],[11,"as_raw_c_in","","",86,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",87,null],[11,"as_raw_c_in","","",87,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",94,null],[11,"clone","wayland_protocols::unstable::linux_dmabuf::v1::server::zwp_linux_buffer_params_v1","",88,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",88,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",88,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",88,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"fmt","","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",89,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"from_raw","","",89,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"to_raw","","",89,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",90,null],[11,"as_raw_c_in","","",90,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",91,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",91,null],[11,"as_raw_c_in","","",91,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",95,null],[0,"pointer_constraints","wayland_protocols::unstable","protocol for constraining pointer motions",null,null],[0,"v1","wayland_protocols::unstable::pointer_constraints","",null,null],[0,"client","wayland_protocols::unstable::pointer_constraints::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_constraints_v1","wayland_protocols::unstable::pointer_constraints::v1::client","constrain the movement of a pointer",null,null],[3,"ZwpPointerConstraintsV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",null,null],[4,"Error","","wp_pointer_constraints error values",null,null],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",96,null],[4,"Lifetime","","constraint lifetime",null,null],[13,"Oneshot","","the pointer constraint is defunct once deactivated",97,null],[13,"Persistent","","the pointer constraint may reactivate",97,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pointer constraints manager object",98,null],[13,"LockPointer","","lock pointer to a position",98,null],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",98,null],[12,"surface","","",98,null],[12,"pointer","","",98,null],[12,"region","","",98,null],[12,"lifetime","","",98,null],[13,"ConfinePointer","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","confine pointer to a region",98,null],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1::Request","",98,null],[12,"surface","","",98,null],[12,"pointer","","",98,null],[12,"region","","",98,null],[12,"lifetime","","",98,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the pointer constraints manager object",99,null],[10,"lock_pointer","","lock pointer to a position",99,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"},{"generics":["proxy"],"name":"option"},{"name":"u32"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"confine_pointer","","confine pointer to a region",99,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"},{"generics":["proxy"],"name":"option"},{"name":"u32"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_locked_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","receive relative pointer motion events",null,null],[3,"ZwpLockedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the locked pointer object",100,null],[13,"SetCursorPositionHint","","set the pointer cursor position hint",100,null],[12,"surface_x","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",100,null],[12,"surface_y","","",100,null],[13,"SetRegion","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","set a new lock region",100,null],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1::Request","",100,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",null,null],[13,"Locked","","lock activation event",101,null],[13,"Unlocked","","lock deactivation event",101,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the locked pointer object",102,null],[10,"set_cursor_position_hint","","set the pointer cursor position hint",102,null],[10,"set_region","","set a new lock region",102,null],[0,"zwp_confined_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::client","confined pointer object",null,null],[3,"ZwpConfinedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the confined pointer object",103,null],[13,"SetRegion","","set a new confine region",103,null],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1::Request","",103,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",null,null],[13,"Confined","","pointer confined",104,null],[13,"Unconfined","","pointer unconfined",104,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the confined pointer object",105,null],[10,"set_region","","set a new confine region",105,null],[0,"server","wayland_protocols::unstable::pointer_constraints::v1","Server-side API of this protocol",null,null],[0,"zwp_pointer_constraints_v1","wayland_protocols::unstable::pointer_constraints::v1::server","constrain the movement of a pointer",null,null],[3,"ZwpPointerConstraintsV1","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1","",null,null],[4,"Error","","wp_pointer_constraints error values",null,null],[13,"AlreadyConstrained","","pointer constraint already requested on that surface",106,null],[4,"Lifetime","","constraint lifetime",null,null],[13,"Oneshot","","the pointer constraint is defunct once deactivated",107,null],[13,"Persistent","","the pointer constraint may reactivate",107,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pointer constraints manager object",108,null],[13,"LockPointer","","lock pointer to a position",108,null],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1::Request","",108,null],[12,"surface","","",108,null],[12,"pointer","","",108,null],[12,"region","","",108,null],[12,"lifetime","","",108,null],[13,"ConfinePointer","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1","confine pointer to a region",108,null],[12,"id","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1::Request","",108,null],[12,"surface","","",108,null],[12,"pointer","","",108,null],[12,"region","","",108,null],[12,"lifetime","","",108,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1","",null,null],[0,"zwp_locked_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::server","receive relative pointer motion events",null,null],[3,"ZwpLockedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the locked pointer object",109,null],[13,"SetCursorPositionHint","","set the pointer cursor position hint",109,null],[12,"surface_x","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1::Request","",109,null],[12,"surface_y","","",109,null],[13,"SetRegion","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1","set a new lock region",109,null],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1::Request","",109,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1","",null,null],[13,"Locked","","lock activation event",110,null],[13,"Unlocked","","lock deactivation event",110,null],[0,"zwp_confined_pointer_v1","wayland_protocols::unstable::pointer_constraints::v1::server","confined pointer object",null,null],[3,"ZwpConfinedPointerV1","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_confined_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the confined pointer object",111,null],[13,"SetRegion","","set a new confine region",111,null],[12,"region","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_confined_pointer_v1::Request","",111,null],[4,"Event","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_confined_pointer_v1","",null,null],[13,"Confined","","pointer confined",112,null],[13,"Unconfined","","pointer unconfined",112,null],[0,"c_interfaces","wayland_protocols::unstable::pointer_constraints::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::pointer_constraints::v1::c_interfaces","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"wl_region_interface","","",null,null],[7,"zwp_pointer_constraints_v1_requests","","",null,null],[7,"zwp_pointer_constraints_v1_interface","","",null,null],[7,"zwp_locked_pointer_v1_requests","","",null,null],[7,"zwp_locked_pointer_v1_events","","",null,null],[7,"zwp_locked_pointer_v1_interface","","",null,null],[7,"zwp_confined_pointer_v1_requests","","",null,null],[7,"zwp_confined_pointer_v1_events","","",null,null],[7,"zwp_confined_pointer_v1_interface","","",null,null],[11,"clone","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_pointer_constraints_v1","",96,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",96,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",96,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",96,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",97,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"from_raw","","",97,{"inputs":[{"name":"u32"}],"output":{"generics":["lifetime"],"name":"option"}}],[11,"to_raw","","",97,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",98,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",98,null],[11,"as_raw_c_in","","",98,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",113,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",113,null],[11,"as_raw_c_in","","",113,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",114,null],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_locked_pointer_v1","",100,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",100,null],[11,"as_raw_c_in","","",100,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",101,null],[11,"as_raw_c_in","","",101,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",115,null],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::client::zwp_confined_pointer_v1","",103,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",103,null],[11,"as_raw_c_in","","",103,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",104,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",104,null],[11,"as_raw_c_in","","",104,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",116,null],[11,"clone","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_pointer_constraints_v1","",106,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",106,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",106,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",106,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"fmt","","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",107,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"from_raw","","",107,{"inputs":[{"name":"u32"}],"output":{"generics":["lifetime"],"name":"option"}}],[11,"to_raw","","",107,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",108,null],[11,"as_raw_c_in","","",108,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",117,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",117,null],[11,"as_raw_c_in","","",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",118,null],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_locked_pointer_v1","",109,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",109,null],[11,"as_raw_c_in","","",109,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",110,null],[11,"as_raw_c_in","","",110,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",119,null],[11,"is_destructor","wayland_protocols::unstable::pointer_constraints::v1::server::zwp_confined_pointer_v1","",111,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",111,null],[11,"as_raw_c_in","","",111,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",112,null],[11,"as_raw_c_in","","",112,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",120,null],[0,"pointer_gestures","wayland_protocols::unstable","Pointer gestures protocol",null,null],[0,"v1","wayland_protocols::unstable::pointer_gestures","",null,null],[0,"client","wayland_protocols::unstable::pointer_gestures::v1","Client-side API of this protocol",null,null],[0,"zwp_pointer_gestures_v1","wayland_protocols::unstable::pointer_gestures::v1::client","touchpad gestures",null,null],[3,"ZwpPointerGesturesV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",null,null],[4,"Request","","",null,null],[13,"GetSwipeGesture","","get swipe gesture",121,null],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",121,null],[12,"pointer","","",121,null],[13,"GetPinchGesture","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","get pinch gesture",121,null],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1::Request","",121,null],[12,"pointer","","",121,null],[4,"Event","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"get_swipe_gesture","","get swipe gesture",122,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_pinch_gesture","","get pinch gesture",122,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_pointer_gesture_swipe_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a swipe gesture object",null,null],[3,"ZwpPointerGestureSwipeV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pointer swipe gesture object",123,null],[4,"Event","","",null,null],[13,"Begin","","multi-finger swipe begin",124,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",124,null],[12,"time","","",124,null],[12,"surface","","",124,null],[12,"fingers","","",124,null],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe motion",124,null],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",124,null],[12,"dx","","",124,null],[12,"dy","","",124,null],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","multi-finger swipe end",124,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1::Event","",124,null],[12,"time","","",124,null],[12,"cancelled","","",124,null],[8,"RequestsTrait","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",null,null],[10,"destroy","","destroy the pointer swipe gesture object",125,null],[0,"zwp_pointer_gesture_pinch_v1","wayland_protocols::unstable::pointer_gestures::v1::client","a pinch gesture object",null,null],[3,"ZwpPointerGesturePinchV1","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pinch gesture object",126,null],[4,"Event","","",null,null],[13,"Begin","","multi-finger pinch begin",127,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",127,null],[12,"time","","",127,null],[12,"surface","","",127,null],[12,"fingers","","",127,null],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch motion",127,null],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",127,null],[12,"dx","","",127,null],[12,"dy","","",127,null],[12,"scale","","",127,null],[12,"rotation","","",127,null],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","multi-finger pinch end",127,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1::Event","",127,null],[12,"time","","",127,null],[12,"cancelled","","",127,null],[8,"RequestsTrait","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",null,null],[10,"destroy","","destroy the pinch gesture object",128,null],[0,"server","wayland_protocols::unstable::pointer_gestures::v1","Server-side API of this protocol",null,null],[0,"zwp_pointer_gestures_v1","wayland_protocols::unstable::pointer_gestures::v1::server","touchpad gestures",null,null],[3,"ZwpPointerGesturesV1","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1","",null,null],[4,"Request","","",null,null],[13,"GetSwipeGesture","","get swipe gesture",129,null],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1::Request","",129,null],[12,"pointer","","",129,null],[13,"GetPinchGesture","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1","get pinch gesture",129,null],[12,"id","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1::Request","",129,null],[12,"pointer","","",129,null],[4,"Event","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1","",null,null],[0,"zwp_pointer_gesture_swipe_v1","wayland_protocols::unstable::pointer_gestures::v1::server","a swipe gesture object",null,null],[3,"ZwpPointerGestureSwipeV1","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pointer swipe gesture object",130,null],[4,"Event","","",null,null],[13,"Begin","","multi-finger swipe begin",131,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1::Event","",131,null],[12,"time","","",131,null],[12,"surface","","",131,null],[12,"fingers","","",131,null],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1","multi-finger swipe motion",131,null],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1::Event","",131,null],[12,"dx","","",131,null],[12,"dy","","",131,null],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1","multi-finger swipe end",131,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1::Event","",131,null],[12,"time","","",131,null],[12,"cancelled","","",131,null],[0,"zwp_pointer_gesture_pinch_v1","wayland_protocols::unstable::pointer_gestures::v1::server","a pinch gesture object",null,null],[3,"ZwpPointerGesturePinchV1","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pinch gesture object",132,null],[4,"Event","","",null,null],[13,"Begin","","multi-finger pinch begin",133,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1::Event","",133,null],[12,"time","","",133,null],[12,"surface","","",133,null],[12,"fingers","","",133,null],[13,"Update","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1","multi-finger pinch motion",133,null],[12,"time","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1::Event","",133,null],[12,"dx","","",133,null],[12,"dy","","",133,null],[12,"scale","","",133,null],[12,"rotation","","",133,null],[13,"End","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1","multi-finger pinch end",133,null],[12,"serial","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1::Event","",133,null],[12,"time","","",133,null],[12,"cancelled","","",133,null],[0,"c_interfaces","wayland_protocols::unstable::pointer_gestures::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::pointer_gestures::v1::c_interfaces","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"zwp_pointer_gestures_v1_requests","","",null,null],[7,"zwp_pointer_gestures_v1_interface","","",null,null],[7,"zwp_pointer_gesture_swipe_v1_requests","","",null,null],[7,"zwp_pointer_gesture_swipe_v1_events","","",null,null],[7,"zwp_pointer_gesture_swipe_v1_interface","","",null,null],[7,"zwp_pointer_gesture_pinch_v1_requests","","",null,null],[7,"zwp_pointer_gesture_pinch_v1_events","","",null,null],[7,"zwp_pointer_gesture_pinch_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gestures_v1","",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",121,null],[11,"as_raw_c_in","","",121,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",134,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",134,null],[11,"as_raw_c_in","","",134,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",135,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_swipe_v1","",123,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",123,null],[11,"as_raw_c_in","","",123,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",124,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",124,null],[11,"as_raw_c_in","","",124,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",136,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::client::zwp_pointer_gesture_pinch_v1","",126,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",126,null],[11,"as_raw_c_in","","",126,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",127,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",127,null],[11,"as_raw_c_in","","",127,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",137,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gestures_v1","",129,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",129,null],[11,"as_raw_c_in","","",129,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",138,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",138,null],[11,"as_raw_c_in","","",138,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",139,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_swipe_v1","",130,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",130,null],[11,"as_raw_c_in","","",130,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",131,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",131,null],[11,"as_raw_c_in","","",131,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",140,null],[11,"is_destructor","wayland_protocols::unstable::pointer_gestures::v1::server::zwp_pointer_gesture_pinch_v1","",132,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",132,null],[11,"as_raw_c_in","","",132,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",133,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",133,null],[11,"as_raw_c_in","","",133,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",141,null],[0,"relative_pointer","wayland_protocols::unstable","protocol for relative pointer motion events",null,null],[0,"v1","wayland_protocols::unstable::relative_pointer","",null,null],[0,"client","wayland_protocols::unstable::relative_pointer::v1","Client-side API of this protocol",null,null],[0,"zwp_relative_pointer_manager_v1","wayland_protocols::unstable::relative_pointer::v1::client","get relative pointer objects",null,null],[3,"ZwpRelativePointerManagerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the relative pointer manager object",142,null],[13,"GetRelativePointer","","get a relative pointer object",142,null],[12,"id","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1::Request","",142,null],[12,"pointer","","",142,null],[4,"Event","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the relative pointer manager object",143,null],[10,"get_relative_pointer","","get a relative pointer object",143,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_relative_pointer_v1","wayland_protocols::unstable::relative_pointer::v1::client","relative pointer object",null,null],[3,"ZwpRelativePointerV1","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the relative pointer object",144,null],[4,"Event","","",null,null],[13,"RelativeMotion","","relative pointer motion",145,null],[12,"utime_hi","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1::Event","",145,null],[12,"utime_lo","","",145,null],[12,"dx","","",145,null],[12,"dy","","",145,null],[12,"dx_unaccel","","",145,null],[12,"dy_unaccel","","",145,null],[8,"RequestsTrait","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",null,null],[10,"destroy","","release the relative pointer object",146,null],[0,"server","wayland_protocols::unstable::relative_pointer::v1","Server-side API of this protocol",null,null],[0,"zwp_relative_pointer_manager_v1","wayland_protocols::unstable::relative_pointer::v1::server","get relative pointer objects",null,null],[3,"ZwpRelativePointerManagerV1","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the relative pointer manager object",147,null],[13,"GetRelativePointer","","get a relative pointer object",147,null],[12,"id","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_manager_v1::Request","",147,null],[12,"pointer","","",147,null],[4,"Event","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_manager_v1","",null,null],[0,"zwp_relative_pointer_v1","wayland_protocols::unstable::relative_pointer::v1::server","relative pointer object",null,null],[3,"ZwpRelativePointerV1","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the relative pointer object",148,null],[4,"Event","","",null,null],[13,"RelativeMotion","","relative pointer motion",149,null],[12,"utime_hi","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_v1::Event","",149,null],[12,"utime_lo","","",149,null],[12,"dx","","",149,null],[12,"dy","","",149,null],[12,"dx_unaccel","","",149,null],[12,"dy_unaccel","","",149,null],[0,"c_interfaces","wayland_protocols::unstable::relative_pointer::v1","C interfaces for this protocol",null,null],[7,"wl_pointer_interface","wayland_protocols::unstable::relative_pointer::v1::c_interfaces","",null,null],[7,"zwp_relative_pointer_manager_v1_requests","","",null,null],[7,"zwp_relative_pointer_manager_v1_interface","","",null,null],[7,"zwp_relative_pointer_v1_requests","","",null,null],[7,"zwp_relative_pointer_v1_events","","",null,null],[7,"zwp_relative_pointer_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_manager_v1","",142,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",142,null],[11,"as_raw_c_in","","",142,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",150,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",150,null],[11,"as_raw_c_in","","",150,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",151,null],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::client::zwp_relative_pointer_v1","",144,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",144,null],[11,"as_raw_c_in","","",144,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",145,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",145,null],[11,"as_raw_c_in","","",145,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",152,null],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_manager_v1","",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",147,null],[11,"as_raw_c_in","","",147,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",153,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",153,null],[11,"as_raw_c_in","","",153,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",154,null],[11,"is_destructor","wayland_protocols::unstable::relative_pointer::v1::server::zwp_relative_pointer_v1","",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",148,null],[11,"as_raw_c_in","","",148,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",149,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",149,null],[11,"as_raw_c_in","","",149,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",155,null],[0,"tablet","wayland_protocols::unstable","Wayland protocol for graphics tablets",null,null],[0,"v1","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v1","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",null,null],[4,"Request","","",null,null],[13,"GetTabletSeat","","get the tablet seat",156,null],[12,"tablet_seat","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1::Request","",156,null],[12,"seat","","",156,null],[13,"Destroy","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","release the memory for the tablet manager object",156,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"get_tablet_seat","","get the tablet seat",157,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"destroy","","release the memory for the tablet manager object",157,null],[0,"zwp_tablet_seat_v1","wayland_protocols::unstable::tablet::v1::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the memory for the tablet seat object",158,null],[4,"Event","","",null,null],[13,"TabletAdded","","new device notification",159,null],[12,"id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",159,null],[13,"ToolAdded","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","a new tool has been used with a tablet",159,null],[12,"id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1::Event","",159,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",null,null],[10,"destroy","","release the memory for the tablet seat object",160,null],[0,"zwp_tablet_tool_v1","wayland_protocols::unstable::tablet::v1::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",null,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",161,null],[13,"Eraser","","Eraser",161,null],[13,"Brush","","Brush",161,null],[13,"Pencil","","Pencil",161,null],[13,"Airbrush","","Airbrush",161,null],[13,"Finger","","Finger",161,null],[13,"Mouse","","Mouse",161,null],[13,"Lens","","Lens",161,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",162,null],[13,"Pressure","","Pressure axis",162,null],[13,"Distance","","Distance axis",162,null],[13,"Rotation","","Z-rotation axis",162,null],[13,"Slider","","Slider axis",162,null],[13,"Wheel","","Wheel axis",162,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",163,null],[13,"Pressed","","button is pressed",163,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",164,null],[4,"Request","","",null,null],[13,"SetCursor","","set the tablet tool's surface",165,null],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Request","",165,null],[12,"surface","","",165,null],[12,"hotspot_x","","",165,null],[12,"hotspot_y","","",165,null],[13,"Destroy","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","destroy the tool object",165,null],[4,"Event","","",null,null],[13,"Type","","tool type",166,null],[12,"tool_type","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","unique hardware serial number of the tool",166,null],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"hardware_serial_lo","","",166,null],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","hardware id notification in Wacom's format",166,null],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"hardware_id_lo","","",166,null],[13,"Capability","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool capability notification",166,null],[12,"capability","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Done","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tool description events sequence complete",166,null],[13,"Removed","","tool removed",166,null],[13,"ProximityIn","","proximity in event",166,null],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"tablet","","",166,null],[12,"surface","","",166,null],[13,"ProximityOut","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","proximity out event",166,null],[13,"Down","","tablet tool is making contact",166,null],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Up","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tablet tool is no longer making contact",166,null],[13,"Motion","","motion event",166,null],[12,"x","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"y","","",166,null],[13,"Pressure","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","pressure change event",166,null],[12,"pressure","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Distance","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","distance change event",166,null],[12,"distance","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Tilt","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","tilt change event",166,null],[12,"tilt_x","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"tilt_y","","",166,null],[13,"Rotation","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","z-rotation change event",166,null],[12,"degrees","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Slider","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Slider position change event",166,null],[12,"position","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[13,"Wheel","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","Wheel delta event",166,null],[12,"degrees","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"clicks","","",166,null],[13,"Button","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","button event",166,null],[12,"serial","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[12,"button","","",166,null],[12,"state","","",166,null],[13,"Frame","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","frame event",166,null],[12,"time","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1::Event","",166,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",null,null],[10,"set_cursor","","set the tablet tool's surface",167,null],[10,"destroy","","destroy the tool object",167,null],[0,"zwp_tablet_v1","wayland_protocols::unstable::tablet::v1::client","graphics tablet device",null,null],[3,"ZwpTabletV1","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the tablet object",168,null],[4,"Event","","",null,null],[13,"Name","","tablet device name",169,null],[12,"name","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",169,null],[13,"Id","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet device USB vendor/product id",169,null],[12,"vid","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",169,null],[12,"pid","","",169,null],[13,"Path","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","path to the device",169,null],[12,"path","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1::Event","",169,null],[13,"Done","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","tablet description events sequence complete",169,null],[13,"Removed","","tablet removed event",169,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the tablet object",170,null],[0,"server","wayland_protocols::unstable::tablet::v1","Server-side API of this protocol",null,null],[0,"zwp_tablet_manager_v1","wayland_protocols::unstable::tablet::v1::server","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV1","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_manager_v1","",null,null],[4,"Request","","",null,null],[13,"GetTabletSeat","","get the tablet seat",171,null],[12,"tablet_seat","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_manager_v1::Request","",171,null],[12,"seat","","",171,null],[13,"Destroy","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_manager_v1","release the memory for the tablet manager object",171,null],[4,"Event","","",null,null],[0,"zwp_tablet_seat_v1","wayland_protocols::unstable::tablet::v1::server","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV1","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_seat_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the memory for the tablet seat object",172,null],[4,"Event","","",null,null],[13,"TabletAdded","","new device notification",173,null],[12,"id","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_seat_v1::Event","",173,null],[13,"ToolAdded","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_seat_v1","a new tool has been used with a tablet",173,null],[12,"id","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_seat_v1::Event","",173,null],[0,"zwp_tablet_tool_v1","wayland_protocols::unstable::tablet::v1::server","a physical tablet tool",null,null],[3,"ZwpTabletToolV1","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","",null,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",174,null],[13,"Eraser","","Eraser",174,null],[13,"Brush","","Brush",174,null],[13,"Pencil","","Pencil",174,null],[13,"Airbrush","","Airbrush",174,null],[13,"Finger","","Finger",174,null],[13,"Mouse","","Mouse",174,null],[13,"Lens","","Lens",174,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",175,null],[13,"Pressure","","Pressure axis",175,null],[13,"Distance","","Distance axis",175,null],[13,"Rotation","","Z-rotation axis",175,null],[13,"Slider","","Slider axis",175,null],[13,"Wheel","","Wheel axis",175,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",176,null],[13,"Pressed","","button is pressed",176,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",177,null],[4,"Request","","",null,null],[13,"SetCursor","","set the tablet tool's surface",178,null],[12,"serial","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Request","",178,null],[12,"surface","","",178,null],[12,"hotspot_x","","",178,null],[12,"hotspot_y","","",178,null],[13,"Destroy","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","destroy the tool object",178,null],[4,"Event","","",null,null],[13,"Type","","tool type",179,null],[12,"tool_type","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","unique hardware serial number of the tool",179,null],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"hardware_serial_lo","","",179,null],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","hardware id notification in Wacom's format",179,null],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"hardware_id_lo","","",179,null],[13,"Capability","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","tool capability notification",179,null],[12,"capability","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Done","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","tool description events sequence complete",179,null],[13,"Removed","","tool removed",179,null],[13,"ProximityIn","","proximity in event",179,null],[12,"serial","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"tablet","","",179,null],[12,"surface","","",179,null],[13,"ProximityOut","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","proximity out event",179,null],[13,"Down","","tablet tool is making contact",179,null],[12,"serial","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Up","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","tablet tool is no longer making contact",179,null],[13,"Motion","","motion event",179,null],[12,"x","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"y","","",179,null],[13,"Pressure","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","pressure change event",179,null],[12,"pressure","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Distance","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","distance change event",179,null],[12,"distance","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Tilt","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","tilt change event",179,null],[12,"tilt_x","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"tilt_y","","",179,null],[13,"Rotation","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","z-rotation change event",179,null],[12,"degrees","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Slider","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","Slider position change event",179,null],[12,"position","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[13,"Wheel","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","Wheel delta event",179,null],[12,"degrees","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"clicks","","",179,null],[13,"Button","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","button event",179,null],[12,"serial","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[12,"button","","",179,null],[12,"state","","",179,null],[13,"Frame","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","frame event",179,null],[12,"time","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1::Event","",179,null],[0,"zwp_tablet_v1","wayland_protocols::unstable::tablet::v1::server","graphics tablet device",null,null],[3,"ZwpTabletV1","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the tablet object",180,null],[4,"Event","","",null,null],[13,"Name","","tablet device name",181,null],[12,"name","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1::Event","",181,null],[13,"Id","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1","tablet device USB vendor/product id",181,null],[12,"vid","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1::Event","",181,null],[12,"pid","","",181,null],[13,"Path","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1","path to the device",181,null],[12,"path","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1::Event","",181,null],[13,"Done","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1","tablet description events sequence complete",181,null],[13,"Removed","","tablet removed event",181,null],[0,"c_interfaces","wayland_protocols::unstable::tablet::v1","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::unstable::tablet::v1::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"zwp_tablet_manager_v1_requests","","",null,null],[7,"zwp_tablet_manager_v1_interface","","",null,null],[7,"zwp_tablet_seat_v1_requests","","",null,null],[7,"zwp_tablet_seat_v1_events","","",null,null],[7,"zwp_tablet_seat_v1_interface","","",null,null],[7,"zwp_tablet_tool_v1_requests","","",null,null],[7,"zwp_tablet_tool_v1_events","","",null,null],[7,"zwp_tablet_tool_v1_interface","","",null,null],[7,"zwp_tablet_v1_requests","","",null,null],[7,"zwp_tablet_v1_events","","",null,null],[7,"zwp_tablet_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_manager_v1","",156,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",156,null],[11,"as_raw_c_in","","",156,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",182,null],[11,"as_raw_c_in","","",182,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",183,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_seat_v1","",158,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",158,null],[11,"as_raw_c_in","","",158,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",159,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",159,null],[11,"as_raw_c_in","","",159,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",184,null],[11,"clone","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_tool_v1","",161,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",161,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",161,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",161,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",161,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",162,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",162,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",162,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",162,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",162,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",163,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",163,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",163,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",163,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",163,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",164,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",164,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",164,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",164,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",164,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",165,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",165,null],[11,"as_raw_c_in","","",165,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",166,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",166,null],[11,"as_raw_c_in","","",166,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",185,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::client::zwp_tablet_v1","",168,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",168,null],[11,"as_raw_c_in","","",168,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",169,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",169,null],[11,"as_raw_c_in","","",169,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",186,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_manager_v1","",171,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",171,null],[11,"as_raw_c_in","","",171,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",187,null],[11,"as_raw_c_in","","",187,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",188,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_seat_v1","",172,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",172,null],[11,"as_raw_c_in","","",172,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",173,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",173,null],[11,"as_raw_c_in","","",173,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",189,null],[11,"clone","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_tool_v1","",174,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",174,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",174,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",174,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",174,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",175,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",175,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",175,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",175,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",175,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",176,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",176,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",176,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",176,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",176,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",177,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",177,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",177,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",177,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",177,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",178,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",178,null],[11,"as_raw_c_in","","",178,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",179,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",179,null],[11,"as_raw_c_in","","",179,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",190,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v1::server::zwp_tablet_v1","",180,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",180,null],[11,"as_raw_c_in","","",180,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",181,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",181,null],[11,"as_raw_c_in","","",181,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",191,null],[0,"v2","wayland_protocols::unstable::tablet","",null,null],[0,"client","wayland_protocols::unstable::tablet::v2","Client-side API of this protocol",null,null],[0,"zwp_tablet_manager_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",null,null],[4,"Request","","",null,null],[13,"GetTabletSeat","","get the tablet seat",192,null],[12,"tablet_seat","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2::Request","",192,null],[12,"seat","","",192,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","release the memory for the tablet manager object",192,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"get_tablet_seat","","get the tablet seat",193,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"destroy","","release the memory for the tablet manager object",193,null],[0,"zwp_tablet_seat_v2","wayland_protocols::unstable::tablet::v2::client","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the memory for the tablet seat object",194,null],[4,"Event","","",null,null],[13,"TabletAdded","","new device notification",195,null],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",195,null],[13,"ToolAdded","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","a new tool has been used with a tablet",195,null],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",195,null],[13,"PadAdded","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","new pad notification",195,null],[12,"id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2::Event","",195,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",null,null],[10,"destroy","","release the memory for the tablet seat object",196,null],[0,"zwp_tablet_tool_v2","wayland_protocols::unstable::tablet::v2::client","a physical tablet tool",null,null],[3,"ZwpTabletToolV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",null,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",197,null],[13,"Eraser","","Eraser",197,null],[13,"Brush","","Brush",197,null],[13,"Pencil","","Pencil",197,null],[13,"Airbrush","","Airbrush",197,null],[13,"Finger","","Finger",197,null],[13,"Mouse","","Mouse",197,null],[13,"Lens","","Lens",197,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",198,null],[13,"Pressure","","Pressure axis",198,null],[13,"Distance","","Distance axis",198,null],[13,"Rotation","","Z-rotation axis",198,null],[13,"Slider","","Slider axis",198,null],[13,"Wheel","","Wheel axis",198,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",199,null],[13,"Pressed","","button is pressed",199,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",200,null],[4,"Request","","",null,null],[13,"SetCursor","","set the tablet tool's surface",201,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Request","",201,null],[12,"surface","","",201,null],[12,"hotspot_x","","",201,null],[12,"hotspot_y","","",201,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","destroy the tool object",201,null],[4,"Event","","",null,null],[13,"Type","","tool type",202,null],[12,"tool_type","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","unique hardware serial number of the tool",202,null],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"hardware_serial_lo","","",202,null],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","hardware id notification in Wacom's format",202,null],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"hardware_id_lo","","",202,null],[13,"Capability","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool capability notification",202,null],[12,"capability","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tool description events sequence complete",202,null],[13,"Removed","","tool removed",202,null],[13,"ProximityIn","","proximity in event",202,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"tablet","","",202,null],[12,"surface","","",202,null],[13,"ProximityOut","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","proximity out event",202,null],[13,"Down","","tablet tool is making contact",202,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Up","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tablet tool is no longer making contact",202,null],[13,"Motion","","motion event",202,null],[12,"x","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"y","","",202,null],[13,"Pressure","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","pressure change event",202,null],[12,"pressure","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Distance","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","distance change event",202,null],[12,"distance","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Tilt","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","tilt change event",202,null],[12,"tilt_x","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"tilt_y","","",202,null],[13,"Rotation","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","z-rotation change event",202,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Slider","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Slider position change event",202,null],[12,"position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[13,"Wheel","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","Wheel delta event",202,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"clicks","","",202,null],[13,"Button","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","button event",202,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[12,"button","","",202,null],[12,"state","","",202,null],[13,"Frame","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","frame event",202,null],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2::Event","",202,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",null,null],[10,"set_cursor","","set the tablet tool's surface",203,null],[10,"destroy","","destroy the tool object",203,null],[0,"zwp_tablet_v2","wayland_protocols::unstable::tablet::v2::client","graphics tablet device",null,null],[3,"ZwpTabletV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the tablet object",204,null],[4,"Event","","",null,null],[13,"Name","","tablet device name",205,null],[12,"name","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",205,null],[13,"Id","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet device USB vendor/product id",205,null],[12,"vid","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",205,null],[12,"pid","","",205,null],[13,"Path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","path to the device",205,null],[12,"path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2::Event","",205,null],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","tablet description events sequence complete",205,null],[13,"Removed","","tablet removed event",205,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the tablet object",206,null],[0,"zwp_tablet_pad_ring_v2","wayland_protocols::unstable::tablet::v2::client","pad ring",null,null],[3,"ZwpTabletPadRingV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",null,null],[4,"Source","","ring axis source",null,null],[13,"Finger","","finger",207,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",208,null],[12,"description","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Request","",208,null],[12,"serial","","",208,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","destroy the ring object",208,null],[4,"Event","","",null,null],[13,"Source","","ring event source",209,null],[12,"source","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",209,null],[13,"Angle","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","angle changed",209,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",209,null],[13,"Stop","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","interaction stopped",209,null],[13,"Frame","","end of a ring event sequence",209,null],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2::Event","",209,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",null,null],[10,"set_feedback","","set compositor feedback",210,null],[10,"destroy","","destroy the ring object",210,null],[0,"zwp_tablet_pad_strip_v2","wayland_protocols::unstable::tablet::v2::client","pad strip",null,null],[3,"ZwpTabletPadStripV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",null,null],[4,"Source","","strip axis source",null,null],[13,"Finger","","finger",211,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",212,null],[12,"description","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Request","",212,null],[12,"serial","","",212,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","destroy the strip object",212,null],[4,"Event","","",null,null],[13,"Source","","strip event source",213,null],[12,"source","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",213,null],[13,"Position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","position changed",213,null],[12,"position","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",213,null],[13,"Stop","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","interaction stopped",213,null],[13,"Frame","","end of a strip event sequence",213,null],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2::Event","",213,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",null,null],[10,"set_feedback","","set compositor feedback",214,null],[10,"destroy","","destroy the strip object",214,null],[0,"zwp_tablet_pad_group_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadGroupV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pad object",215,null],[4,"Event","","",null,null],[13,"Buttons","","buttons announced",216,null],[12,"buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",216,null],[13,"Ring","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","ring announced",216,null],[12,"ring","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",216,null],[13,"Strip","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","strip announced",216,null],[12,"strip","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",216,null],[13,"Modes","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","mode-switch ability announced",216,null],[12,"modes","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",216,null],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","tablet group description events sequence complete",216,null],[13,"ModeSwitch","","mode switch event",216,null],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2::Event","",216,null],[12,"serial","","",216,null],[12,"mode","","",216,null],[8,"RequestsTrait","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",null,null],[10,"destroy","","destroy the pad object",217,null],[0,"zwp_tablet_pad_v2","wayland_protocols::unstable::tablet::v2::client","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadV2","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",null,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",218,null],[13,"Pressed","","the button is pressed",218,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",219,null],[12,"button","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Request","",219,null],[12,"description","","",219,null],[12,"serial","","",219,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","destroy the pad object",219,null],[4,"Event","","",null,null],[13,"Group","","group announced",220,null],[12,"pad_group","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[13,"Path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","path to the device",220,null],[12,"path","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[13,"Buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","buttons announced",220,null],[12,"buttons","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[13,"Done","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad description event sequence complete",220,null],[13,"Button","","physical button state",220,null],[12,"time","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[12,"button","","",220,null],[12,"state","","",220,null],[13,"Enter","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",220,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[12,"tablet","","",220,null],[12,"surface","","",220,null],[13,"Leave","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","enter event",220,null],[12,"serial","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2::Event","",220,null],[12,"surface","","",220,null],[13,"Removed","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","pad removed event",220,null],[8,"RequestsTrait","","",null,null],[10,"set_feedback","","set compositor feedback",221,null],[10,"destroy","","destroy the pad object",221,null],[0,"server","wayland_protocols::unstable::tablet::v2","Server-side API of this protocol",null,null],[0,"zwp_tablet_manager_v2","wayland_protocols::unstable::tablet::v2::server","controller object for graphic tablet devices",null,null],[3,"ZwpTabletManagerV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_manager_v2","",null,null],[4,"Request","","",null,null],[13,"GetTabletSeat","","get the tablet seat",222,null],[12,"tablet_seat","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_manager_v2::Request","",222,null],[12,"seat","","",222,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_manager_v2","release the memory for the tablet manager object",222,null],[4,"Event","","",null,null],[0,"zwp_tablet_seat_v2","wayland_protocols::unstable::tablet::v2::server","controller object for graphic tablet devices of a seat",null,null],[3,"ZwpTabletSeatV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","release the memory for the tablet seat object",223,null],[4,"Event","","",null,null],[13,"TabletAdded","","new device notification",224,null],[12,"id","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2::Event","",224,null],[13,"ToolAdded","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2","a new tool has been used with a tablet",224,null],[12,"id","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2::Event","",224,null],[13,"PadAdded","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2","new pad notification",224,null],[12,"id","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2::Event","",224,null],[0,"zwp_tablet_tool_v2","wayland_protocols::unstable::tablet::v2::server","a physical tablet tool",null,null],[3,"ZwpTabletToolV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","",null,null],[4,"Type","","a physical tool type",null,null],[13,"Pen","","Pen",225,null],[13,"Eraser","","Eraser",225,null],[13,"Brush","","Brush",225,null],[13,"Pencil","","Pencil",225,null],[13,"Airbrush","","Airbrush",225,null],[13,"Finger","","Finger",225,null],[13,"Mouse","","Mouse",225,null],[13,"Lens","","Lens",225,null],[4,"Capability","","capability flags for a tool",null,null],[13,"Tilt","","Tilt axes",226,null],[13,"Pressure","","Pressure axis",226,null],[13,"Distance","","Distance axis",226,null],[13,"Rotation","","Z-rotation axis",226,null],[13,"Slider","","Slider axis",226,null],[13,"Wheel","","Wheel axis",226,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","button is not pressed",227,null],[13,"Pressed","","button is pressed",227,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",228,null],[4,"Request","","",null,null],[13,"SetCursor","","set the tablet tool's surface",229,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Request","",229,null],[12,"surface","","",229,null],[12,"hotspot_x","","",229,null],[12,"hotspot_y","","",229,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","destroy the tool object",229,null],[4,"Event","","",null,null],[13,"Type","","tool type",230,null],[12,"tool_type","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"HardwareSerial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","unique hardware serial number of the tool",230,null],[12,"hardware_serial_hi","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"hardware_serial_lo","","",230,null],[13,"HardwareIdWacom","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","hardware id notification in Wacom's format",230,null],[12,"hardware_id_hi","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"hardware_id_lo","","",230,null],[13,"Capability","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","tool capability notification",230,null],[12,"capability","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Done","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","tool description events sequence complete",230,null],[13,"Removed","","tool removed",230,null],[13,"ProximityIn","","proximity in event",230,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"tablet","","",230,null],[12,"surface","","",230,null],[13,"ProximityOut","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","proximity out event",230,null],[13,"Down","","tablet tool is making contact",230,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Up","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","tablet tool is no longer making contact",230,null],[13,"Motion","","motion event",230,null],[12,"x","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"y","","",230,null],[13,"Pressure","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","pressure change event",230,null],[12,"pressure","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Distance","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","distance change event",230,null],[12,"distance","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Tilt","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","tilt change event",230,null],[12,"tilt_x","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"tilt_y","","",230,null],[13,"Rotation","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","z-rotation change event",230,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Slider","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","Slider position change event",230,null],[12,"position","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[13,"Wheel","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","Wheel delta event",230,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"clicks","","",230,null],[13,"Button","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","button event",230,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[12,"button","","",230,null],[12,"state","","",230,null],[13,"Frame","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","frame event",230,null],[12,"time","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2::Event","",230,null],[0,"zwp_tablet_v2","wayland_protocols::unstable::tablet::v2::server","graphics tablet device",null,null],[3,"ZwpTabletV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the tablet object",231,null],[4,"Event","","",null,null],[13,"Name","","tablet device name",232,null],[12,"name","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2::Event","",232,null],[13,"Id","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2","tablet device USB vendor/product id",232,null],[12,"vid","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2::Event","",232,null],[12,"pid","","",232,null],[13,"Path","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2","path to the device",232,null],[12,"path","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2::Event","",232,null],[13,"Done","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2","tablet description events sequence complete",232,null],[13,"Removed","","tablet removed event",232,null],[0,"zwp_tablet_pad_ring_v2","wayland_protocols::unstable::tablet::v2::server","pad ring",null,null],[3,"ZwpTabletPadRingV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2","",null,null],[4,"Source","","ring axis source",null,null],[13,"Finger","","finger",233,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",234,null],[12,"description","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2::Request","",234,null],[12,"serial","","",234,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2","destroy the ring object",234,null],[4,"Event","","",null,null],[13,"Source","","ring event source",235,null],[12,"source","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2::Event","",235,null],[13,"Angle","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2","angle changed",235,null],[12,"degrees","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2::Event","",235,null],[13,"Stop","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2","interaction stopped",235,null],[13,"Frame","","end of a ring event sequence",235,null],[12,"time","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2::Event","",235,null],[0,"zwp_tablet_pad_strip_v2","wayland_protocols::unstable::tablet::v2::server","pad strip",null,null],[3,"ZwpTabletPadStripV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2","",null,null],[4,"Source","","strip axis source",null,null],[13,"Finger","","finger",236,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",237,null],[12,"description","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2::Request","",237,null],[12,"serial","","",237,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2","destroy the strip object",237,null],[4,"Event","","",null,null],[13,"Source","","strip event source",238,null],[12,"source","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2::Event","",238,null],[13,"Position","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2","position changed",238,null],[12,"position","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2::Event","",238,null],[13,"Stop","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2","interaction stopped",238,null],[13,"Frame","","end of a strip event sequence",238,null],[12,"time","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2::Event","",238,null],[0,"zwp_tablet_pad_group_v2","wayland_protocols::unstable::tablet::v2::server","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadGroupV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the pad object",239,null],[4,"Event","","",null,null],[13,"Buttons","","buttons announced",240,null],[12,"buttons","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2::Event","",240,null],[13,"Ring","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","ring announced",240,null],[12,"ring","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2::Event","",240,null],[13,"Strip","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","strip announced",240,null],[12,"strip","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2::Event","",240,null],[13,"Modes","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","mode-switch ability announced",240,null],[12,"modes","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2::Event","",240,null],[13,"Done","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","tablet group description events sequence complete",240,null],[13,"ModeSwitch","","mode switch event",240,null],[12,"time","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2::Event","",240,null],[12,"serial","","",240,null],[12,"mode","","",240,null],[0,"zwp_tablet_pad_v2","wayland_protocols::unstable::tablet::v2::server","a set of buttons, rings and strips",null,null],[3,"ZwpTabletPadV2","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","",null,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",241,null],[13,"Pressed","","the button is pressed",241,null],[4,"Request","","",null,null],[13,"SetFeedback","","set compositor feedback",242,null],[12,"button","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Request","",242,null],[12,"description","","",242,null],[12,"serial","","",242,null],[13,"Destroy","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","destroy the pad object",242,null],[4,"Event","","",null,null],[13,"Group","","group announced",243,null],[12,"pad_group","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[13,"Path","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","path to the device",243,null],[12,"path","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[13,"Buttons","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","buttons announced",243,null],[12,"buttons","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[13,"Done","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","pad description event sequence complete",243,null],[13,"Button","","physical button state",243,null],[12,"time","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[12,"button","","",243,null],[12,"state","","",243,null],[13,"Enter","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","enter event",243,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[12,"tablet","","",243,null],[12,"surface","","",243,null],[13,"Leave","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","enter event",243,null],[12,"serial","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2::Event","",243,null],[12,"surface","","",243,null],[13,"Removed","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","pad removed event",243,null],[0,"c_interfaces","wayland_protocols::unstable::tablet::v2","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::unstable::tablet::v2::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"zwp_tablet_manager_v2_requests","","",null,null],[7,"zwp_tablet_manager_v2_interface","","",null,null],[7,"zwp_tablet_seat_v2_requests","","",null,null],[7,"zwp_tablet_seat_v2_events","","",null,null],[7,"zwp_tablet_seat_v2_interface","","",null,null],[7,"zwp_tablet_tool_v2_requests","","",null,null],[7,"zwp_tablet_tool_v2_events","","",null,null],[7,"zwp_tablet_tool_v2_interface","","",null,null],[7,"zwp_tablet_v2_requests","","",null,null],[7,"zwp_tablet_v2_events","","",null,null],[7,"zwp_tablet_v2_interface","","",null,null],[7,"zwp_tablet_pad_ring_v2_requests","","",null,null],[7,"zwp_tablet_pad_ring_v2_events","","",null,null],[7,"zwp_tablet_pad_ring_v2_interface","","",null,null],[7,"zwp_tablet_pad_strip_v2_requests","","",null,null],[7,"zwp_tablet_pad_strip_v2_events","","",null,null],[7,"zwp_tablet_pad_strip_v2_interface","","",null,null],[7,"zwp_tablet_pad_group_v2_requests","","",null,null],[7,"zwp_tablet_pad_group_v2_events","","",null,null],[7,"zwp_tablet_pad_group_v2_interface","","",null,null],[7,"zwp_tablet_pad_v2_requests","","",null,null],[7,"zwp_tablet_pad_v2_events","","",null,null],[7,"zwp_tablet_pad_v2_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_manager_v2","",192,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",192,null],[11,"as_raw_c_in","","",192,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",244,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",244,null],[11,"as_raw_c_in","","",244,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",245,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_seat_v2","",194,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",194,null],[11,"as_raw_c_in","","",194,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",195,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",195,null],[11,"as_raw_c_in","","",195,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",246,null],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_tool_v2","",197,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",197,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",197,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",197,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",197,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",198,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",198,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",198,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",198,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",198,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",199,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",199,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",199,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",199,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",199,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",200,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",200,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",200,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",200,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",200,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",201,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",201,null],[11,"as_raw_c_in","","",201,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",202,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",202,null],[11,"as_raw_c_in","","",202,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",247,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_v2","",204,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",204,null],[11,"as_raw_c_in","","",204,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",205,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",205,null],[11,"as_raw_c_in","","",205,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",248,null],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_ring_v2","",207,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",207,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",207,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",207,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",207,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",208,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",208,null],[11,"as_raw_c_in","","",208,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",209,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",209,null],[11,"as_raw_c_in","","",209,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",249,null],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_strip_v2","",211,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",211,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",211,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",211,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",211,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",212,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",212,null],[11,"as_raw_c_in","","",212,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",213,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",213,null],[11,"as_raw_c_in","","",213,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",250,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_group_v2","",215,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",215,null],[11,"as_raw_c_in","","",215,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",216,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",216,null],[11,"as_raw_c_in","","",216,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",251,null],[11,"clone","wayland_protocols::unstable::tablet::v2::client::zwp_tablet_pad_v2","",218,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",218,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",218,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",218,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",218,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",219,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",219,null],[11,"as_raw_c_in","","",219,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",220,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",220,null],[11,"as_raw_c_in","","",220,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",252,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_manager_v2","",222,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",222,null],[11,"as_raw_c_in","","",222,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",253,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",253,null],[11,"as_raw_c_in","","",253,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",254,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_seat_v2","",223,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",223,null],[11,"as_raw_c_in","","",223,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",224,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",224,null],[11,"as_raw_c_in","","",224,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",255,null],[11,"clone","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_tool_v2","",225,{"inputs":[{"name":"self"}],"output":{"name":"type"}}],[11,"fmt","","",225,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",225,{"inputs":[{"name":"self"},{"name":"type"}],"output":{"name":"bool"}}],[11,"from_raw","","",225,{"inputs":[{"name":"u32"}],"output":{"generics":["type"],"name":"option"}}],[11,"to_raw","","",225,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",226,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"fmt","","",226,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",226,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"from_raw","","",226,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",226,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",227,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",227,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",227,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",227,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",227,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",228,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",228,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",228,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",228,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",228,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",229,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",229,null],[11,"as_raw_c_in","","",229,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",230,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",230,null],[11,"as_raw_c_in","","",230,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",256,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_v2","",231,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",231,null],[11,"as_raw_c_in","","",231,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",232,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",232,null],[11,"as_raw_c_in","","",232,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",257,null],[11,"clone","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_ring_v2","",233,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",233,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",233,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",233,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",233,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",234,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",234,null],[11,"as_raw_c_in","","",234,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",235,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",235,null],[11,"as_raw_c_in","","",235,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",258,null],[11,"clone","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_strip_v2","",236,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"fmt","","",236,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",236,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"from_raw","","",236,{"inputs":[{"name":"u32"}],"output":{"generics":["source"],"name":"option"}}],[11,"to_raw","","",236,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",237,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",237,null],[11,"as_raw_c_in","","",237,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",238,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",238,null],[11,"as_raw_c_in","","",238,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",259,null],[11,"is_destructor","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_group_v2","",239,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",239,null],[11,"as_raw_c_in","","",239,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",240,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",240,null],[11,"as_raw_c_in","","",240,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",260,null],[11,"clone","wayland_protocols::unstable::tablet::v2::server::zwp_tablet_pad_v2","",241,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",241,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",241,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",241,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",241,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",242,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",242,null],[11,"as_raw_c_in","","",242,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",243,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",243,null],[11,"as_raw_c_in","","",243,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",261,null],[0,"text_input","wayland_protocols::unstable","Text input protocol",null,null],[0,"v1","wayland_protocols::unstable::text_input","",null,null],[0,"client","wayland_protocols::unstable::text_input::v1","Client-side API of this protocol",null,null],[0,"zwp_text_input_v1","wayland_protocols::unstable::text_input::v1::client","text input",null,null],[3,"ZwpTextInputV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",null,null],[4,"ContentHint","","content hint",null,null],[13,"None","","no special behaviour",262,null],[13,"Default","","auto completion, correction and capitalization",262,null],[13,"Password","","hidden and sensitive text",262,null],[13,"AutoCompletion","","suggest word completions",262,null],[13,"AutoCorrection","","suggest word corrections",262,null],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",262,null],[13,"Lowercase","","prefer lowercase letters",262,null],[13,"Uppercase","","prefer uppercase letters",262,null],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",262,null],[13,"HiddenText","","characters should be hidden",262,null],[13,"SensitiveData","","typed text should not be stored",262,null],[13,"Latin","","just latin characters should be entered",262,null],[13,"Multiline","","the text input is multiline",262,null],[4,"ContentPurpose","","content purpose",null,null],[13,"Normal","","default input, allowing all characters",263,null],[13,"Alpha","","allow only alphabetic characters",263,null],[13,"Digits","","allow only digits",263,null],[13,"Number","","input a number (including decimal separator and sign)",263,null],[13,"Phone","","input a phone number",263,null],[13,"Url","","input an URL",263,null],[13,"Email","","input an email address",263,null],[13,"Name","","input a name of a person",263,null],[13,"Password","","input a password (combine with password or sensitive_data hint)",263,null],[13,"Date","","input a date",263,null],[13,"Time","","input a time",263,null],[13,"Datetime","","input a date and time",263,null],[13,"Terminal","","input for a terminal",263,null],[4,"PreeditStyle","","",null,null],[13,"Default","","default style for composing text",264,null],[13,"None","","style should be the same as in non-composing text",264,null],[13,"Active","","",264,null],[13,"Inactive","","",264,null],[13,"Highlight","","",264,null],[13,"Underline","","",264,null],[13,"Selection","","",264,null],[13,"Incorrect","","",264,null],[4,"TextDirection","","",null,null],[13,"Auto","","automatic text direction based on text and language",265,null],[13,"Ltr","","left-to-right",265,null],[13,"Rtl","","right-to-left",265,null],[4,"Request","","",null,null],[13,"Activate","","request activation",266,null],[12,"seat","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[12,"surface","","",266,null],[13,"Deactivate","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","request deactivation",266,null],[12,"seat","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[13,"ShowInputPanel","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","show input panels",266,null],[13,"HideInputPanel","","hide input panels",266,null],[13,"Reset","","reset",266,null],[13,"SetSurroundingText","","sets the surrounding text",266,null],[12,"text","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[12,"cursor","","",266,null],[12,"anchor","","",266,null],[13,"SetContentType","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","set content purpose and hint",266,null],[12,"hint","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[12,"purpose","","",266,null],[13,"SetCursorRectangle","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",266,null],[12,"x","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[12,"y","","",266,null],[12,"width","","",266,null],[12,"height","","",266,null],[13,"SetPreferredLanguage","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","sets preferred language",266,null],[12,"language","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[13,"CommitState","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",266,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[13,"InvokeAction","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",266,null],[12,"button","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Request","",266,null],[12,"index","","",266,null],[4,"Event","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",null,null],[13,"Enter","","enter event",267,null],[12,"surface","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[13,"Leave","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","leave event",267,null],[13,"ModifiersMap","","modifiers map",267,null],[12,"map","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[13,"InputPanelState","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","state of the input panel",267,null],[12,"state","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[13,"PreeditString","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit",267,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"text","","",267,null],[12,"commit","","",267,null],[13,"PreeditStyling","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit styling",267,null],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"length","","",267,null],[12,"style","","",267,null],[13,"PreeditCursor","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","pre-edit cursor",267,null],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[13,"CommitString","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","commit",267,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"text","","",267,null],[13,"CursorPosition","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","set cursor to new position",267,null],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"anchor","","",267,null],[13,"DeleteSurroundingText","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","delete surrounding text",267,null],[12,"index","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"length","","",267,null],[13,"Keysym","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","keysym",267,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"time","","",267,null],[12,"sym","","",267,null],[12,"state","","",267,null],[12,"modifiers","","",267,null],[13,"Language","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","language",267,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"language","","",267,null],[13,"TextDirection","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","text direction",267,null],[12,"serial","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1::Event","",267,null],[12,"direction","","",267,null],[8,"RequestsTrait","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",null,null],[10,"activate","","request activation",268,null],[10,"deactivate","","request deactivation",268,null],[10,"show_input_panel","","show input panels",268,null],[10,"hide_input_panel","","hide input panels",268,null],[10,"reset","","reset",268,null],[10,"set_surrounding_text","","sets the surrounding text",268,null],[10,"set_content_type","","set content purpose and hint",268,null],[10,"set_cursor_rectangle","","",268,null],[10,"set_preferred_language","","sets preferred language",268,null],[10,"commit_state","","",268,null],[10,"invoke_action","","",268,null],[0,"zwp_text_input_manager_v1","wayland_protocols::unstable::text_input::v1::client","text input manager",null,null],[3,"ZwpTextInputManagerV1","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",null,null],[4,"Request","","",null,null],[13,"CreateTextInput","","create text input",269,null],[12,"id","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1::Request","",269,null],[4,"Event","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"create_text_input","","create text input",270,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"server","wayland_protocols::unstable::text_input::v1","Server-side API of this protocol",null,null],[0,"zwp_text_input_v1","wayland_protocols::unstable::text_input::v1::server","text input",null,null],[3,"ZwpTextInputV1","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",null,null],[4,"ContentHint","","content hint",null,null],[13,"None","","no special behaviour",271,null],[13,"Default","","auto completion, correction and capitalization",271,null],[13,"Password","","hidden and sensitive text",271,null],[13,"AutoCompletion","","suggest word completions",271,null],[13,"AutoCorrection","","suggest word corrections",271,null],[13,"AutoCapitalization","","switch to uppercase letters at the start of a sentence",271,null],[13,"Lowercase","","prefer lowercase letters",271,null],[13,"Uppercase","","prefer uppercase letters",271,null],[13,"Titlecase","","prefer casing for titles and headings (can be language dependent)",271,null],[13,"HiddenText","","characters should be hidden",271,null],[13,"SensitiveData","","typed text should not be stored",271,null],[13,"Latin","","just latin characters should be entered",271,null],[13,"Multiline","","the text input is multiline",271,null],[4,"ContentPurpose","","content purpose",null,null],[13,"Normal","","default input, allowing all characters",272,null],[13,"Alpha","","allow only alphabetic characters",272,null],[13,"Digits","","allow only digits",272,null],[13,"Number","","input a number (including decimal separator and sign)",272,null],[13,"Phone","","input a phone number",272,null],[13,"Url","","input an URL",272,null],[13,"Email","","input an email address",272,null],[13,"Name","","input a name of a person",272,null],[13,"Password","","input a password (combine with password or sensitive_data hint)",272,null],[13,"Date","","input a date",272,null],[13,"Time","","input a time",272,null],[13,"Datetime","","input a date and time",272,null],[13,"Terminal","","input for a terminal",272,null],[4,"PreeditStyle","","",null,null],[13,"Default","","default style for composing text",273,null],[13,"None","","style should be the same as in non-composing text",273,null],[13,"Active","","",273,null],[13,"Inactive","","",273,null],[13,"Highlight","","",273,null],[13,"Underline","","",273,null],[13,"Selection","","",273,null],[13,"Incorrect","","",273,null],[4,"TextDirection","","",null,null],[13,"Auto","","automatic text direction based on text and language",274,null],[13,"Ltr","","left-to-right",274,null],[13,"Rtl","","right-to-left",274,null],[4,"Request","","",null,null],[13,"Activate","","request activation",275,null],[12,"seat","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[12,"surface","","",275,null],[13,"Deactivate","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","request deactivation",275,null],[12,"seat","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[13,"ShowInputPanel","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","show input panels",275,null],[13,"HideInputPanel","","hide input panels",275,null],[13,"Reset","","reset",275,null],[13,"SetSurroundingText","","sets the surrounding text",275,null],[12,"text","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[12,"cursor","","",275,null],[12,"anchor","","",275,null],[13,"SetContentType","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","set content purpose and hint",275,null],[12,"hint","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[12,"purpose","","",275,null],[13,"SetCursorRectangle","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",275,null],[12,"x","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[12,"y","","",275,null],[12,"width","","",275,null],[12,"height","","",275,null],[13,"SetPreferredLanguage","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","sets preferred language",275,null],[12,"language","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[13,"CommitState","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",275,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[13,"InvokeAction","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",275,null],[12,"button","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Request","",275,null],[12,"index","","",275,null],[4,"Event","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",null,null],[13,"Enter","","enter event",276,null],[12,"surface","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[13,"Leave","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","leave event",276,null],[13,"ModifiersMap","","modifiers map",276,null],[12,"map","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[13,"InputPanelState","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","state of the input panel",276,null],[12,"state","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[13,"PreeditString","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","pre-edit",276,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"text","","",276,null],[12,"commit","","",276,null],[13,"PreeditStyling","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","pre-edit styling",276,null],[12,"index","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"length","","",276,null],[12,"style","","",276,null],[13,"PreeditCursor","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","pre-edit cursor",276,null],[12,"index","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[13,"CommitString","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","commit",276,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"text","","",276,null],[13,"CursorPosition","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","set cursor to new position",276,null],[12,"index","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"anchor","","",276,null],[13,"DeleteSurroundingText","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","delete surrounding text",276,null],[12,"index","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"length","","",276,null],[13,"Keysym","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","keysym",276,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"time","","",276,null],[12,"sym","","",276,null],[12,"state","","",276,null],[12,"modifiers","","",276,null],[13,"Language","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","language",276,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"language","","",276,null],[13,"TextDirection","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","text direction",276,null],[12,"serial","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1::Event","",276,null],[12,"direction","","",276,null],[0,"zwp_text_input_manager_v1","wayland_protocols::unstable::text_input::v1::server","text input manager",null,null],[3,"ZwpTextInputManagerV1","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_manager_v1","",null,null],[4,"Request","","",null,null],[13,"CreateTextInput","","create text input",277,null],[12,"id","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_manager_v1::Request","",277,null],[4,"Event","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_manager_v1","",null,null],[0,"c_interfaces","wayland_protocols::unstable::text_input::v1","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::unstable::text_input::v1::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"zwp_text_input_v1_requests","","",null,null],[7,"zwp_text_input_v1_events","","",null,null],[7,"zwp_text_input_v1_interface","","",null,null],[7,"zwp_text_input_manager_v1_requests","","",null,null],[7,"zwp_text_input_manager_v1_interface","","",null,null],[11,"clone","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_v1","",262,{"inputs":[{"name":"self"}],"output":{"name":"contenthint"}}],[11,"fmt","","",262,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",262,{"inputs":[{"name":"self"},{"name":"contenthint"}],"output":{"name":"bool"}}],[11,"from_raw","","",262,{"inputs":[{"name":"u32"}],"output":{"generics":["contenthint"],"name":"option"}}],[11,"to_raw","","",262,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",263,{"inputs":[{"name":"self"}],"output":{"name":"contentpurpose"}}],[11,"fmt","","",263,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",263,{"inputs":[{"name":"self"},{"name":"contentpurpose"}],"output":{"name":"bool"}}],[11,"from_raw","","",263,{"inputs":[{"name":"u32"}],"output":{"generics":["contentpurpose"],"name":"option"}}],[11,"to_raw","","",263,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",264,{"inputs":[{"name":"self"}],"output":{"name":"preeditstyle"}}],[11,"fmt","","",264,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",264,{"inputs":[{"name":"self"},{"name":"preeditstyle"}],"output":{"name":"bool"}}],[11,"from_raw","","",264,{"inputs":[{"name":"u32"}],"output":{"generics":["preeditstyle"],"name":"option"}}],[11,"to_raw","","",264,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",265,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[11,"fmt","","",265,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",265,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":{"name":"bool"}}],[11,"from_raw","","",265,{"inputs":[{"name":"u32"}],"output":{"generics":["textdirection"],"name":"option"}}],[11,"to_raw","","",265,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",266,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",266,null],[11,"as_raw_c_in","","",266,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",267,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",267,null],[11,"as_raw_c_in","","",267,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",278,null],[11,"is_destructor","wayland_protocols::unstable::text_input::v1::client::zwp_text_input_manager_v1","",269,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",269,null],[11,"as_raw_c_in","","",269,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",279,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",279,null],[11,"as_raw_c_in","","",279,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",280,null],[11,"clone","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_v1","",271,{"inputs":[{"name":"self"}],"output":{"name":"contenthint"}}],[11,"fmt","","",271,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",271,{"inputs":[{"name":"self"},{"name":"contenthint"}],"output":{"name":"bool"}}],[11,"from_raw","","",271,{"inputs":[{"name":"u32"}],"output":{"generics":["contenthint"],"name":"option"}}],[11,"to_raw","","",271,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",272,{"inputs":[{"name":"self"}],"output":{"name":"contentpurpose"}}],[11,"fmt","","",272,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",272,{"inputs":[{"name":"self"},{"name":"contentpurpose"}],"output":{"name":"bool"}}],[11,"from_raw","","",272,{"inputs":[{"name":"u32"}],"output":{"generics":["contentpurpose"],"name":"option"}}],[11,"to_raw","","",272,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",273,{"inputs":[{"name":"self"}],"output":{"name":"preeditstyle"}}],[11,"fmt","","",273,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",273,{"inputs":[{"name":"self"},{"name":"preeditstyle"}],"output":{"name":"bool"}}],[11,"from_raw","","",273,{"inputs":[{"name":"u32"}],"output":{"generics":["preeditstyle"],"name":"option"}}],[11,"to_raw","","",273,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",274,{"inputs":[{"name":"self"}],"output":{"name":"textdirection"}}],[11,"fmt","","",274,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",274,{"inputs":[{"name":"self"},{"name":"textdirection"}],"output":{"name":"bool"}}],[11,"from_raw","","",274,{"inputs":[{"name":"u32"}],"output":{"generics":["textdirection"],"name":"option"}}],[11,"to_raw","","",274,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",275,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",275,null],[11,"as_raw_c_in","","",275,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",276,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",276,null],[11,"as_raw_c_in","","",276,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",281,null],[11,"is_destructor","wayland_protocols::unstable::text_input::v1::server::zwp_text_input_manager_v1","",277,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",277,null],[11,"as_raw_c_in","","",277,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",282,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",282,null],[11,"as_raw_c_in","","",282,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",283,null],[0,"xdg_foreign","wayland_protocols::unstable","Protocol for exporting xdg surface handles",null,null],[0,"v1","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v1","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_exporter object",284,null],[13,"Export","","export a surface",284,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1::Request","",284,null],[12,"surface","","",284,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_exporter object",285,null],[10,"export","","export a surface",285,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zxdg_importer_v1","wayland_protocols::unstable::xdg_foreign::v1::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_importer object",286,null],[13,"Import","","import a surface",286,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1::Request","",286,null],[12,"handle","","",286,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_importer object",287,null],[10,"import","","import a surface",287,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zxdg_exported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an exported surface handle",null,null],[3,"ZxdgExportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unexport the exported surface",288,null],[4,"Event","","",null,null],[13,"Handle","","the exported surface handle",289,null],[12,"handle","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1::Event","",289,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",null,null],[10,"destroy","","unexport the exported surface",290,null],[0,"zxdg_imported_v1","wayland_protocols::unstable::xdg_foreign::v1::client","an imported surface handle",null,null],[3,"ZxdgImportedV1","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_imported object",291,null],[13,"SetParentOf","","set as the parent of some surface",291,null],[12,"surface","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1::Request","",291,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",null,null],[13,"Destroyed","","the imported surface handle has been destroyed",292,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_imported object",293,null],[10,"set_parent_of","","set as the parent of some surface",293,null],[0,"server","wayland_protocols::unstable::xdg_foreign::v1","Server-side API of this protocol",null,null],[0,"zxdg_exporter_v1","wayland_protocols::unstable::xdg_foreign::v1::server","interface for exporting surfaces",null,null],[3,"ZxdgExporterV1","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exporter_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_exporter object",294,null],[13,"Export","","export a surface",294,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exporter_v1::Request","",294,null],[12,"surface","","",294,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exporter_v1","",null,null],[0,"zxdg_importer_v1","wayland_protocols::unstable::xdg_foreign::v1::server","interface for importing surfaces",null,null],[3,"ZxdgImporterV1","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_importer_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_importer object",295,null],[13,"Import","","import a surface",295,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_importer_v1::Request","",295,null],[12,"handle","","",295,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_importer_v1","",null,null],[0,"zxdg_exported_v1","wayland_protocols::unstable::xdg_foreign::v1::server","an exported surface handle",null,null],[3,"ZxdgExportedV1","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exported_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unexport the exported surface",296,null],[4,"Event","","",null,null],[13,"Handle","","the exported surface handle",297,null],[12,"handle","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exported_v1::Event","",297,null],[0,"zxdg_imported_v1","wayland_protocols::unstable::xdg_foreign::v1::server","an imported surface handle",null,null],[3,"ZxdgImportedV1","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_imported_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_imported object",298,null],[13,"SetParentOf","","set as the parent of some surface",298,null],[12,"surface","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_imported_v1::Request","",298,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_imported_v1","",null,null],[13,"Destroyed","","the imported surface handle has been destroyed",299,null],[0,"c_interfaces","wayland_protocols::unstable::xdg_foreign::v1","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_foreign::v1::c_interfaces","",null,null],[7,"zxdg_exporter_v1_requests","","",null,null],[7,"zxdg_exporter_v1_interface","","",null,null],[7,"zxdg_importer_v1_requests","","",null,null],[7,"zxdg_importer_v1_interface","","",null,null],[7,"zxdg_exported_v1_requests","","",null,null],[7,"zxdg_exported_v1_events","","",null,null],[7,"zxdg_exported_v1_interface","","",null,null],[7,"zxdg_imported_v1_requests","","",null,null],[7,"zxdg_imported_v1_events","","",null,null],[7,"zxdg_imported_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exporter_v1","",284,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",284,null],[11,"as_raw_c_in","","",284,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",300,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",300,null],[11,"as_raw_c_in","","",300,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",301,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_importer_v1","",286,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",286,null],[11,"as_raw_c_in","","",286,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",302,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",302,null],[11,"as_raw_c_in","","",302,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",303,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_exported_v1","",288,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",288,null],[11,"as_raw_c_in","","",288,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",289,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",289,null],[11,"as_raw_c_in","","",289,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",304,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::client::zxdg_imported_v1","",291,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",291,null],[11,"as_raw_c_in","","",291,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",292,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",292,null],[11,"as_raw_c_in","","",292,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",305,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exporter_v1","",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",294,null],[11,"as_raw_c_in","","",294,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",306,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",306,null],[11,"as_raw_c_in","","",306,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",307,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_importer_v1","",295,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",295,null],[11,"as_raw_c_in","","",295,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",308,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",308,null],[11,"as_raw_c_in","","",308,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",309,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_exported_v1","",296,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",296,null],[11,"as_raw_c_in","","",296,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",297,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",297,null],[11,"as_raw_c_in","","",297,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",310,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v1::server::zxdg_imported_v1","",298,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",298,null],[11,"as_raw_c_in","","",298,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",299,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",299,null],[11,"as_raw_c_in","","",299,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",311,null],[0,"v2","wayland_protocols::unstable::xdg_foreign","",null,null],[0,"client","wayland_protocols::unstable::xdg_foreign::v2","Client-side API of this protocol",null,null],[0,"zxdg_exporter_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for exporting surfaces",null,null],[3,"ZxdgExporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_exporter object",312,null],[13,"ExportToplevel","","export a toplevel surface",312,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2::Request","",312,null],[12,"surface","","",312,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_exporter object",313,null],[10,"export_toplevel","","export a toplevel surface",313,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zxdg_importer_v2","wayland_protocols::unstable::xdg_foreign::v2::client","interface for importing surfaces",null,null],[3,"ZxdgImporterV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_importer object",314,null],[13,"ImportToplevel","","import a toplevel surface",314,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2::Request","",314,null],[12,"handle","","",314,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_importer object",315,null],[10,"import_toplevel","","import a toplevel surface",315,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zxdg_exported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an exported surface handle",null,null],[3,"ZxdgExportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unexport the exported surface",316,null],[4,"Event","","",null,null],[13,"Handle","","the exported surface handle",317,null],[12,"handle","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2::Event","",317,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",null,null],[10,"destroy","","unexport the exported surface",318,null],[0,"zxdg_imported_v2","wayland_protocols::unstable::xdg_foreign::v2::client","an imported surface handle",null,null],[3,"ZxdgImportedV2","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_imported object",319,null],[13,"SetParentOf","","set as the parent of some surface",319,null],[12,"surface","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2::Request","",319,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",null,null],[13,"Destroyed","","the imported surface handle has been destroyed",320,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_imported object",321,null],[10,"set_parent_of","","set as the parent of some surface",321,null],[0,"server","wayland_protocols::unstable::xdg_foreign::v2","Server-side API of this protocol",null,null],[0,"zxdg_exporter_v2","wayland_protocols::unstable::xdg_foreign::v2::server","interface for exporting surfaces",null,null],[3,"ZxdgExporterV2","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exporter_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_exporter object",322,null],[13,"ExportToplevel","","export a toplevel surface",322,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exporter_v2::Request","",322,null],[12,"surface","","",322,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exporter_v2","",null,null],[0,"zxdg_importer_v2","wayland_protocols::unstable::xdg_foreign::v2::server","interface for importing surfaces",null,null],[3,"ZxdgImporterV2","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_importer_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_importer object",323,null],[13,"ImportToplevel","","import a toplevel surface",323,null],[12,"id","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_importer_v2::Request","",323,null],[12,"handle","","",323,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_importer_v2","",null,null],[0,"zxdg_exported_v2","wayland_protocols::unstable::xdg_foreign::v2::server","an exported surface handle",null,null],[3,"ZxdgExportedV2","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exported_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","unexport the exported surface",324,null],[4,"Event","","",null,null],[13,"Handle","","the exported surface handle",325,null],[12,"handle","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exported_v2::Event","",325,null],[0,"zxdg_imported_v2","wayland_protocols::unstable::xdg_foreign::v2::server","an imported surface handle",null,null],[3,"ZxdgImportedV2","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_imported_v2","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_imported object",326,null],[13,"SetParentOf","","set as the parent of some surface",326,null],[12,"surface","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_imported_v2::Request","",326,null],[4,"Event","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_imported_v2","",null,null],[13,"Destroyed","","the imported surface handle has been destroyed",327,null],[0,"c_interfaces","wayland_protocols::unstable::xdg_foreign::v2","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_foreign::v2::c_interfaces","",null,null],[7,"zxdg_exporter_v2_requests","","",null,null],[7,"zxdg_exporter_v2_interface","","",null,null],[7,"zxdg_importer_v2_requests","","",null,null],[7,"zxdg_importer_v2_interface","","",null,null],[7,"zxdg_exported_v2_requests","","",null,null],[7,"zxdg_exported_v2_events","","",null,null],[7,"zxdg_exported_v2_interface","","",null,null],[7,"zxdg_imported_v2_requests","","",null,null],[7,"zxdg_imported_v2_events","","",null,null],[7,"zxdg_imported_v2_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exporter_v2","",312,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",312,null],[11,"as_raw_c_in","","",312,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",328,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",328,null],[11,"as_raw_c_in","","",328,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",329,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_importer_v2","",314,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",314,null],[11,"as_raw_c_in","","",314,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",330,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",330,null],[11,"as_raw_c_in","","",330,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",331,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_exported_v2","",316,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",316,null],[11,"as_raw_c_in","","",316,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",317,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",317,null],[11,"as_raw_c_in","","",317,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",332,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::client::zxdg_imported_v2","",319,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",319,null],[11,"as_raw_c_in","","",319,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",320,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",320,null],[11,"as_raw_c_in","","",320,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",333,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exporter_v2","",322,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",322,null],[11,"as_raw_c_in","","",322,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",334,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",334,null],[11,"as_raw_c_in","","",334,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",335,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_importer_v2","",323,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",323,null],[11,"as_raw_c_in","","",323,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",336,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",336,null],[11,"as_raw_c_in","","",336,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",337,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_exported_v2","",324,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",324,null],[11,"as_raw_c_in","","",324,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",325,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",325,null],[11,"as_raw_c_in","","",325,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",338,null],[11,"is_destructor","wayland_protocols::unstable::xdg_foreign::v2::server::zxdg_imported_v2","",326,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",326,null],[11,"as_raw_c_in","","",326,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",327,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",327,null],[11,"as_raw_c_in","","",327,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",339,null],[0,"xdg_output","wayland_protocols::unstable","Protocol to describe output regions",null,null],[0,"v1","wayland_protocols::unstable::xdg_output","",null,null],[0,"client","wayland_protocols::unstable::xdg_output::v1","Client-side API of this protocol",null,null],[0,"zxdg_output_manager_v1","wayland_protocols::unstable::xdg_output::v1::client","manage xdg_output objects",null,null],[3,"ZxdgOutputManagerV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_output_manager object",340,null],[13,"GetXdgOutput","","create an xdg output from a wl_output",340,null],[12,"id","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1::Request","",340,null],[12,"output","","",340,null],[4,"Event","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_output_manager object",341,null],[10,"get_xdg_output","","create an xdg output from a wl_output",341,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zxdg_output_v1","wayland_protocols::unstable::xdg_output::v1::client","compositor logical output region",null,null],[3,"ZxdgOutputV1","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_output object",342,null],[4,"Event","","",null,null],[13,"LogicalPosition","","position of the output within the global compositor space",343,null],[12,"x","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",343,null],[12,"y","","",343,null],[13,"LogicalSize","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","size of the output in the global compositor space",343,null],[12,"width","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",343,null],[12,"height","","",343,null],[13,"Done","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","all information about the output have been sent",343,null],[13,"Name","","name of this output",343,null],[12,"name","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",343,null],[13,"Description","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","human-readable description of this output",343,null],[12,"description","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1::Event","",343,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",null,null],[10,"destroy","","destroy the xdg_output object",344,null],[0,"server","wayland_protocols::unstable::xdg_output::v1","Server-side API of this protocol",null,null],[0,"zxdg_output_manager_v1","wayland_protocols::unstable::xdg_output::v1::server","manage xdg_output objects",null,null],[3,"ZxdgOutputManagerV1","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_output_manager object",345,null],[13,"GetXdgOutput","","create an xdg output from a wl_output",345,null],[12,"id","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_manager_v1::Request","",345,null],[12,"output","","",345,null],[4,"Event","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_manager_v1","",null,null],[0,"zxdg_output_v1","wayland_protocols::unstable::xdg_output::v1::server","compositor logical output region",null,null],[3,"ZxdgOutputV1","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_output object",346,null],[4,"Event","","",null,null],[13,"LogicalPosition","","position of the output within the global compositor space",347,null],[12,"x","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1::Event","",347,null],[12,"y","","",347,null],[13,"LogicalSize","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1","size of the output in the global compositor space",347,null],[12,"width","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1::Event","",347,null],[12,"height","","",347,null],[13,"Done","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1","all information about the output have been sent",347,null],[13,"Name","","name of this output",347,null],[12,"name","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1::Event","",347,null],[13,"Description","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1","human-readable description of this output",347,null],[12,"description","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1::Event","",347,null],[0,"c_interfaces","wayland_protocols::unstable::xdg_output::v1","C interfaces for this protocol",null,null],[7,"wl_output_interface","wayland_protocols::unstable::xdg_output::v1::c_interfaces","",null,null],[7,"zxdg_output_manager_v1_requests","","",null,null],[7,"zxdg_output_manager_v1_interface","","",null,null],[7,"zxdg_output_v1_requests","","",null,null],[7,"zxdg_output_v1_events","","",null,null],[7,"zxdg_output_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_manager_v1","",340,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",340,null],[11,"as_raw_c_in","","",340,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",348,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",348,null],[11,"as_raw_c_in","","",348,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",349,null],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::client::zxdg_output_v1","",342,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",342,null],[11,"as_raw_c_in","","",342,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",343,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",343,null],[11,"as_raw_c_in","","",343,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",350,null],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_manager_v1","",345,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",345,null],[11,"as_raw_c_in","","",345,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",351,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",351,null],[11,"as_raw_c_in","","",351,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",352,null],[11,"is_destructor","wayland_protocols::unstable::xdg_output::v1::server::zxdg_output_v1","",346,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",346,null],[11,"as_raw_c_in","","",346,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",347,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",347,null],[11,"as_raw_c_in","","",347,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",353,null],[0,"xdg_shell","wayland_protocols::unstable","XDG Shell protocol",null,null],[0,"v5","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v5","Client-side API of this protocol",null,null],[0,"xdg_shell","wayland_protocols::unstable::xdg_shell::v5::client","create desktop-style surfaces",null,null],[3,"XdgShell","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",null,null],[4,"Version","","latest protocol version",null,null],[13,"Current","","Always the latest version",354,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",355,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",355,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",355,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",355,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_shell",356,null],[13,"UseUnstableVersion","","enable use of this unstable version",356,null],[12,"version","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",356,null],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","create a shell surface from a surface",356,null],[12,"id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",356,null],[12,"surface","","",356,null],[13,"GetXdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","create a popup for a surface",356,null],[12,"id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",356,null],[12,"surface","","",356,null],[12,"parent","","",356,null],[12,"seat","","",356,null],[12,"serial","","",356,null],[12,"x","","",356,null],[12,"y","","",356,null],[13,"Pong","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","respond to a ping event",356,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Request","",356,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",null,null],[13,"Ping","","check if the client is alive",357,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell::Event","",357,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",null,null],[10,"destroy","","destroy xdg_shell",358,null],[10,"use_unstable_version","","enable use of this unstable version",358,null],[10,"get_xdg_surface","","create a shell surface from a surface",358,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_xdg_popup","","create a popup for a surface",358,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"},{"name":"proxy"},{"name":"u32"},{"name":"i32"},{"name":"i32"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"pong","","respond to a ping event",358,null],[0,"xdg_surface","wayland_protocols::unstable::xdg_shell::v5::client","A desktop window",null,null],[3,"XdgSurface","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",359,null],[13,"Top","","",359,null],[13,"Bottom","","",359,null],[13,"Left","","",359,null],[13,"TopLeft","","",359,null],[13,"BottomLeft","","",359,null],[13,"Right","","",359,null],[13,"TopRight","","",359,null],[13,"BottomRight","","",359,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",360,null],[13,"Fullscreen","","the surface is fullscreen",360,null],[13,"Resizing","","the surface is being resized",360,null],[13,"Activated","","the surface is now activated",360,null],[4,"Request","","",null,null],[13,"Destroy","","Destroy the xdg_surface",361,null],[13,"SetParent","","set the parent of this surface",361,null],[12,"parent","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set surface title",361,null],[12,"title","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set application ID",361,null],[12,"app_id","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","show the window menu",361,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[12,"serial","","",361,null],[12,"x","","",361,null],[12,"y","","",361,null],[13,"Move","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive move",361,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[12,"serial","","",361,null],[13,"Resize","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","start an interactive resize",361,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[12,"serial","","",361,null],[12,"edges","","",361,null],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","ack a configure event",361,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","set the new window geometry",361,null],[12,"x","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[12,"y","","",361,null],[12,"width","","",361,null],[12,"height","","",361,null],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","maximize the window",361,null],[13,"UnsetMaximized","","unmaximize the window",361,null],[13,"SetFullscreen","","set the window as fullscreen on a monitor",361,null],[12,"output","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Request","",361,null],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",361,null],[13,"SetMinimized","","set the window as minimized",361,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",362,null],[12,"width","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface::Event","",362,null],[12,"height","","",362,null],[12,"states","","",362,null],[12,"serial","","",362,null],[13,"Close","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","surface wants to be closed",362,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","Destroy the xdg_surface",363,null],[10,"set_parent","","set the parent of this surface",363,null],[10,"set_title","","set surface title",363,null],[10,"set_app_id","","set application ID",363,null],[10,"show_window_menu","","show the window menu",363,null],[10,"_move","","start an interactive move",363,null],[10,"resize","","start an interactive resize",363,null],[10,"ack_configure","","ack a configure event",363,null],[10,"set_window_geometry","","set the new window geometry",363,null],[10,"set_maximized","","maximize the window",363,null],[10,"unset_maximized","","unmaximize the window",363,null],[10,"set_fullscreen","","set the window as fullscreen on a monitor",363,null],[10,"unset_fullscreen","","",363,null],[10,"set_minimized","","set the window as minimized",363,null],[0,"xdg_popup","wayland_protocols::unstable::xdg_shell::v5::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",null,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",364,null],[4,"Event","","",null,null],[13,"PopupDone","","popup interaction is done",365,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","remove xdg_popup interface",366,null],[0,"server","wayland_protocols::unstable::xdg_shell::v5","Server-side API of this protocol",null,null],[0,"xdg_shell","wayland_protocols::unstable::xdg_shell::v5::server","create desktop-style surfaces",null,null],[3,"XdgShell","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","",null,null],[4,"Version","","latest protocol version",null,null],[13,"Current","","Always the latest version",367,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",368,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",368,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",368,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",368,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_shell",369,null],[13,"UseUnstableVersion","","enable use of this unstable version",369,null],[12,"version","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell::Request","",369,null],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","create a shell surface from a surface",369,null],[12,"id","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell::Request","",369,null],[12,"surface","","",369,null],[13,"GetXdgPopup","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","create a popup for a surface",369,null],[12,"id","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell::Request","",369,null],[12,"surface","","",369,null],[12,"parent","","",369,null],[12,"seat","","",369,null],[12,"serial","","",369,null],[12,"x","","",369,null],[12,"y","","",369,null],[13,"Pong","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","respond to a ping event",369,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell::Request","",369,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","",null,null],[13,"Ping","","check if the client is alive",370,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell::Event","",370,null],[0,"xdg_surface","wayland_protocols::unstable::xdg_shell::v5::server","A desktop window",null,null],[3,"XdgSurface","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",371,null],[13,"Top","","",371,null],[13,"Bottom","","",371,null],[13,"Left","","",371,null],[13,"TopLeft","","",371,null],[13,"BottomLeft","","",371,null],[13,"Right","","",371,null],[13,"TopRight","","",371,null],[13,"BottomRight","","",371,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",372,null],[13,"Fullscreen","","the surface is fullscreen",372,null],[13,"Resizing","","the surface is being resized",372,null],[13,"Activated","","the surface is now activated",372,null],[4,"Request","","",null,null],[13,"Destroy","","Destroy the xdg_surface",373,null],[13,"SetParent","","set the parent of this surface",373,null],[12,"parent","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","set surface title",373,null],[12,"title","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","set application ID",373,null],[12,"app_id","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","show the window menu",373,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[12,"serial","","",373,null],[12,"x","","",373,null],[12,"y","","",373,null],[13,"Move","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","start an interactive move",373,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[12,"serial","","",373,null],[13,"Resize","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","start an interactive resize",373,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[12,"serial","","",373,null],[12,"edges","","",373,null],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","ack a configure event",373,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","set the new window geometry",373,null],[12,"x","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[12,"y","","",373,null],[12,"width","","",373,null],[12,"height","","",373,null],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","maximize the window",373,null],[13,"UnsetMaximized","","unmaximize the window",373,null],[13,"SetFullscreen","","set the window as fullscreen on a monitor",373,null],[12,"output","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Request","",373,null],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","",373,null],[13,"SetMinimized","","set the window as minimized",373,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",374,null],[12,"width","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface::Event","",374,null],[12,"height","","",374,null],[12,"states","","",374,null],[12,"serial","","",374,null],[13,"Close","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","surface wants to be closed",374,null],[0,"xdg_popup","wayland_protocols::unstable::xdg_shell::v5::server","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::unstable::xdg_shell::v5::server::xdg_popup","",null,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",375,null],[4,"Event","","",null,null],[13,"PopupDone","","popup interaction is done",376,null],[0,"c_interfaces","wayland_protocols::unstable::xdg_shell::v5","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_shell::v5::c_interfaces","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"xdg_shell_requests","","",null,null],[7,"xdg_shell_events","","",null,null],[7,"xdg_shell_interface","","",null,null],[7,"xdg_surface_requests","","",null,null],[7,"xdg_surface_events","","",null,null],[7,"xdg_surface_interface","","",null,null],[7,"xdg_popup_requests","","",null,null],[7,"xdg_popup_events","","",null,null],[7,"xdg_popup_interface","","",null,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::client::xdg_shell","",354,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",354,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",354,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"from_raw","","",354,{"inputs":[{"name":"u32"}],"output":{"generics":["version"],"name":"option"}}],[11,"to_raw","","",354,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",355,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",355,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",355,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",355,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",355,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",356,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",356,null],[11,"as_raw_c_in","","",356,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",357,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",357,null],[11,"as_raw_c_in","","",357,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",377,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::client::xdg_surface","",359,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",359,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",359,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",359,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",359,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",360,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",360,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",360,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",360,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",360,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",361,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",361,null],[11,"as_raw_c_in","","",361,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",362,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",362,null],[11,"as_raw_c_in","","",362,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",378,null],[11,"is_destructor","wayland_protocols::unstable::xdg_shell::v5::client::xdg_popup","",364,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",364,null],[11,"as_raw_c_in","","",364,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",365,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",365,null],[11,"as_raw_c_in","","",365,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",379,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::server::xdg_shell","",367,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"fmt","","",367,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",367,{"inputs":[{"name":"self"},{"name":"version"}],"output":{"name":"bool"}}],[11,"from_raw","","",367,{"inputs":[{"name":"u32"}],"output":{"generics":["version"],"name":"option"}}],[11,"to_raw","","",367,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",368,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",368,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",368,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",368,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",368,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",369,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",369,null],[11,"as_raw_c_in","","",369,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",370,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",370,null],[11,"as_raw_c_in","","",370,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",380,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v5::server::xdg_surface","",371,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",371,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",371,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",371,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",371,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",372,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",372,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",372,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",372,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",372,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",373,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",373,null],[11,"as_raw_c_in","","",373,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",374,null],[11,"as_raw_c_in","","",374,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",381,null],[11,"is_destructor","wayland_protocols::unstable::xdg_shell::v5::server::xdg_popup","",375,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",375,null],[11,"as_raw_c_in","","",375,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",376,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",376,null],[11,"as_raw_c_in","","",376,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",382,null],[0,"v6","wayland_protocols::unstable::xdg_shell","",null,null],[0,"client","wayland_protocols::unstable::xdg_shell::v6","Client-side API of this protocol",null,null],[0,"zxdg_shell_v6","wayland_protocols::unstable::xdg_shell::v6::client","create desktop-style surfaces",null,null],[3,"ZxdgShellV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",383,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",383,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",383,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",383,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",383,null],[13,"InvalidPositioner","","the client provided an invalid positioner",383,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_shell",384,null],[13,"CreatePositioner","","create a positioner object",384,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",384,null],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","create a shell surface from a surface",384,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",384,null],[12,"surface","","",384,null],[13,"Pong","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","respond to a ping event",384,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Request","",384,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",null,null],[13,"Ping","","check if the client is alive",385,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6::Event","",385,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",null,null],[10,"destroy","","destroy xdg_shell",386,null],[10,"create_positioner","","create a positioner object",386,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_xdg_surface","","create a shell surface from a surface",386,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"pong","","respond to a ping event",386,null],[0,"zxdg_positioner_v6","wayland_protocols::unstable::xdg_shell::v6::client","child surface positioner",null,null],[3,"Anchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",null,null],[3,"Gravity","","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[3,"ZxdgPositionerV6","","",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",387,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_positioner object",388,null],[13,"SetSize","","set the size of the to-be positioned rectangle",388,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[12,"height","","",388,null],[13,"SetAnchorRect","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the anchor rectangle within the parent surface",388,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[12,"y","","",388,null],[12,"width","","",388,null],[12,"height","","",388,null],[13,"SetAnchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set anchor rectangle anchor edges",388,null],[12,"anchor","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[13,"SetGravity","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set child surface gravity",388,null],[12,"gravity","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[13,"SetConstraintAdjustment","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set the adjustment to be done when constrained",388,null],[12,"constraint_adjustment","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[13,"SetOffset","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","set surface position offset",388,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6::Request","",388,null],[12,"y","","",388,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_positioner object",389,null],[10,"set_size","","set the size of the to-be positioned rectangle",389,null],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",389,null],[10,"set_anchor","","set anchor rectangle anchor edges",389,null],[10,"set_gravity","","set child surface gravity",389,null],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",389,null],[10,"set_offset","","set surface position offset",389,null],[0,"zxdg_surface_v6","wayland_protocols::unstable::xdg_shell::v6::client","desktop user interface surface base interface",null,null],[3,"ZxdgSurfaceV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",null,null],[4,"Error","","",null,null],[13,"NotConstructed","","",390,null],[13,"AlreadyConstructed","","",390,null],[13,"UnconfiguredBuffer","","",390,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_surface",391,null],[13,"GetToplevel","","assign the xdg_toplevel surface role",391,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",391,null],[13,"GetPopup","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","assign the xdg_popup surface role",391,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",391,null],[12,"parent","","",391,null],[12,"positioner","","",391,null],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","set the new window geometry",391,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",391,null],[12,"y","","",391,null],[12,"width","","",391,null],[12,"height","","",391,null],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","ack a configure event",391,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Request","",391,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",null,null],[13,"Configure","","suggest a surface change",392,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6::Event","",392,null],[8,"RequestsTrait","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",null,null],[10,"destroy","","destroy the xdg_surface",393,null],[10,"get_toplevel","","assign the xdg_toplevel surface role",393,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_popup","","assign the xdg_popup surface role",393,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"set_window_geometry","","set the new window geometry",393,null],[10,"ack_configure","","ack a configure event",393,null],[0,"zxdg_toplevel_v6","wayland_protocols::unstable::xdg_shell::v6::client","toplevel surface",null,null],[3,"ZxdgToplevelV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",394,null],[13,"Top","","",394,null],[13,"Bottom","","",394,null],[13,"Left","","",394,null],[13,"TopLeft","","",394,null],[13,"BottomLeft","","",394,null],[13,"Right","","",394,null],[13,"TopRight","","",394,null],[13,"BottomRight","","",394,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",395,null],[13,"Fullscreen","","the surface is fullscreen",395,null],[13,"Resizing","","the surface is being resized",395,null],[13,"Activated","","the surface is now activated",395,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_toplevel",396,null],[13,"SetParent","","set the parent of this surface",396,null],[12,"parent","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set surface title",396,null],[12,"title","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set application ID",396,null],[12,"app_id","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","show the window menu",396,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[12,"serial","","",396,null],[12,"x","","",396,null],[12,"y","","",396,null],[13,"Move","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive move",396,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[12,"serial","","",396,null],[13,"Resize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","start an interactive resize",396,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[12,"serial","","",396,null],[12,"edges","","",396,null],[13,"SetMaxSize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the maximum size",396,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[12,"height","","",396,null],[13,"SetMinSize","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","set the minimum size",396,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[12,"height","","",396,null],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","maximize the window",396,null],[13,"UnsetMaximized","","unmaximize the window",396,null],[13,"SetFullscreen","","set the window as fullscreen on a monitor",396,null],[12,"output","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Request","",396,null],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",396,null],[13,"SetMinimized","","set the window as minimized",396,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",397,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6::Event","",397,null],[12,"height","","",397,null],[12,"states","","",397,null],[13,"Close","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","surface wants to be closed",397,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_toplevel",398,null],[10,"set_parent","","set the parent of this surface",398,null],[10,"set_title","","set surface title",398,null],[10,"set_app_id","","set application ID",398,null],[10,"show_window_menu","","show the window menu",398,null],[10,"_move","","start an interactive move",398,null],[10,"resize","","start an interactive resize",398,null],[10,"set_max_size","","set the maximum size",398,null],[10,"set_min_size","","set the minimum size",398,null],[10,"set_maximized","","maximize the window",398,null],[10,"unset_maximized","","unmaximize the window",398,null],[10,"set_fullscreen","","set the window as fullscreen on a monitor",398,null],[10,"unset_fullscreen","","",398,null],[10,"set_minimized","","set the window as minimized",398,null],[0,"zxdg_popup_v6","wayland_protocols::unstable::xdg_shell::v6::client","short-lived, popup surfaces for menus",null,null],[3,"ZxdgPopupV6","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",null,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",399,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",400,null],[13,"Grab","","make the popup take an explicit grab",400,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Request","",400,null],[12,"serial","","",400,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",null,null],[13,"Configure","","configure the popup surface",401,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6::Event","",401,null],[12,"y","","",401,null],[12,"width","","",401,null],[12,"height","","",401,null],[13,"PopupDone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","popup interaction is done",401,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","remove xdg_popup interface",402,null],[10,"grab","","make the popup take an explicit grab",402,null],[0,"server","wayland_protocols::unstable::xdg_shell::v6","Server-side API of this protocol",null,null],[0,"zxdg_shell_v6","wayland_protocols::unstable::xdg_shell::v6::server","create desktop-style surfaces",null,null],[3,"ZxdgShellV6","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",403,null],[13,"DefunctSurfaces","","xdg_shell was destroyed before children",403,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",403,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",403,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",403,null],[13,"InvalidPositioner","","the client provided an invalid positioner",403,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_shell",404,null],[13,"CreatePositioner","","create a positioner object",404,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6::Request","",404,null],[13,"GetXdgSurface","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6","create a shell surface from a surface",404,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6::Request","",404,null],[12,"surface","","",404,null],[13,"Pong","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6","respond to a ping event",404,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6::Request","",404,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6","",null,null],[13,"Ping","","check if the client is alive",405,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6::Event","",405,null],[0,"zxdg_positioner_v6","wayland_protocols::unstable::xdg_shell::v6::server","child surface positioner",null,null],[3,"Anchor","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","",null,null],[3,"Gravity","","",null,null],[3,"ConstraintAdjustment","","constraint adjustments",null,null],[3,"ZxdgPositionerV6","","",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",406,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_positioner object",407,null],[13,"SetSize","","set the size of the to-be positioned rectangle",407,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[12,"height","","",407,null],[13,"SetAnchorRect","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","set the anchor rectangle within the parent surface",407,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[12,"y","","",407,null],[12,"width","","",407,null],[12,"height","","",407,null],[13,"SetAnchor","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","set anchor rectangle anchor edges",407,null],[12,"anchor","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[13,"SetGravity","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","set child surface gravity",407,null],[12,"gravity","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[13,"SetConstraintAdjustment","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","set the adjustment to be done when constrained",407,null],[12,"constraint_adjustment","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[13,"SetOffset","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","set surface position offset",407,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6::Request","",407,null],[12,"y","","",407,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","",null,null],[0,"zxdg_surface_v6","wayland_protocols::unstable::xdg_shell::v6::server","desktop user interface surface base interface",null,null],[3,"ZxdgSurfaceV6","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","",null,null],[4,"Error","","",null,null],[13,"NotConstructed","","",408,null],[13,"AlreadyConstructed","","",408,null],[13,"UnconfiguredBuffer","","",408,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_surface",409,null],[13,"GetToplevel","","assign the xdg_toplevel surface role",409,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6::Request","",409,null],[13,"GetPopup","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","assign the xdg_popup surface role",409,null],[12,"id","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6::Request","",409,null],[12,"parent","","",409,null],[12,"positioner","","",409,null],[13,"SetWindowGeometry","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","set the new window geometry",409,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6::Request","",409,null],[12,"y","","",409,null],[12,"width","","",409,null],[12,"height","","",409,null],[13,"AckConfigure","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","ack a configure event",409,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6::Request","",409,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","",null,null],[13,"Configure","","suggest a surface change",410,null],[12,"serial","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6::Event","",410,null],[0,"zxdg_toplevel_v6","wayland_protocols::unstable::xdg_shell::v6::server","toplevel surface",null,null],[3,"ZxdgToplevelV6","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",411,null],[13,"Top","","",411,null],[13,"Bottom","","",411,null],[13,"Left","","",411,null],[13,"TopLeft","","",411,null],[13,"BottomLeft","","",411,null],[13,"Right","","",411,null],[13,"TopRight","","",411,null],[13,"BottomRight","","",411,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",412,null],[13,"Fullscreen","","the surface is fullscreen",412,null],[13,"Resizing","","the surface is being resized",412,null],[13,"Activated","","the surface is now activated",412,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_toplevel",413,null],[13,"SetParent","","set the parent of this surface",413,null],[12,"parent","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[13,"SetTitle","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","set surface title",413,null],[12,"title","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[13,"SetAppId","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","set application ID",413,null],[12,"app_id","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[13,"ShowWindowMenu","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","show the window menu",413,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[12,"serial","","",413,null],[12,"x","","",413,null],[12,"y","","",413,null],[13,"Move","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","start an interactive move",413,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[12,"serial","","",413,null],[13,"Resize","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","start an interactive resize",413,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[12,"serial","","",413,null],[12,"edges","","",413,null],[13,"SetMaxSize","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","set the maximum size",413,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[12,"height","","",413,null],[13,"SetMinSize","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","set the minimum size",413,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[12,"height","","",413,null],[13,"SetMaximized","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","maximize the window",413,null],[13,"UnsetMaximized","","unmaximize the window",413,null],[13,"SetFullscreen","","set the window as fullscreen on a monitor",413,null],[12,"output","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Request","",413,null],[13,"UnsetFullscreen","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","",413,null],[13,"SetMinimized","","set the window as minimized",413,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",414,null],[12,"width","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6::Event","",414,null],[12,"height","","",414,null],[12,"states","","",414,null],[13,"Close","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","surface wants to be closed",414,null],[0,"zxdg_popup_v6","wayland_protocols::unstable::xdg_shell::v6::server","short-lived, popup surfaces for menus",null,null],[3,"ZxdgPopupV6","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6","",null,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",415,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",416,null],[13,"Grab","","make the popup take an explicit grab",416,null],[12,"seat","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6::Request","",416,null],[12,"serial","","",416,null],[4,"Event","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6","",null,null],[13,"Configure","","configure the popup surface",417,null],[12,"x","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6::Event","",417,null],[12,"y","","",417,null],[12,"width","","",417,null],[12,"height","","",417,null],[13,"PopupDone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6","popup interaction is done",417,null],[0,"c_interfaces","wayland_protocols::unstable::xdg_shell::v6","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::unstable::xdg_shell::v6::c_interfaces","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"zxdg_shell_v6_requests","","",null,null],[7,"zxdg_shell_v6_events","","",null,null],[7,"zxdg_shell_v6_interface","","",null,null],[7,"zxdg_positioner_v6_requests","","",null,null],[7,"zxdg_positioner_v6_interface","","",null,null],[7,"zxdg_surface_v6_requests","","",null,null],[7,"zxdg_surface_v6_events","","",null,null],[7,"zxdg_surface_v6_interface","","",null,null],[7,"zxdg_toplevel_v6_requests","","",null,null],[7,"zxdg_toplevel_v6_events","","",null,null],[7,"zxdg_toplevel_v6_interface","","",null,null],[7,"zxdg_popup_v6_requests","","",null,null],[7,"zxdg_popup_v6_events","","",null,null],[7,"zxdg_popup_v6_interface","","",null,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_shell_v6","",383,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",383,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",383,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",383,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",383,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",384,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",384,null],[11,"as_raw_c_in","","",384,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",385,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",385,null],[11,"as_raw_c_in","","",385,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",418,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_positioner_v6","",387,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",387,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",387,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",387,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",387,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ne","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",419,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"partial_cmp","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"le","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"gt","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ge","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"cmp","","",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"ordering"}}],[11,"hash","","",419,null],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",419,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","the center of the anchor rectangle",419,null],[18,"Top","","the top edge of the anchor rectangle",419,null],[18,"Bottom","","the bottom edge of the anchor rectangle",419,null],[18,"Left","","the left edge of the anchor rectangle",419,null],[18,"Right","","the right edge of the anchor rectangle",419,null],[11,"empty","","Returns an empty set of flags.",419,{"inputs":[],"output":{"name":"anchor"}}],[11,"all","","Returns the set containing all flags.",419,{"inputs":[],"output":{"name":"anchor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",419,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",419,{"inputs":[{"name":"u32"}],"output":{"name":"anchor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",419,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",419,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",419,{"inputs":[{"name":"self"},{"name":"anchor"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitor_assign","","Adds the set of flags.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitxor_assign","","Toggles the set of flags.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"sub_assign","","Disables all flags enabled in the set.",419,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",419,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"extend","","",419,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",419,{"inputs":[{"name":"t"}],"output":{"name":"anchor"}}],[11,"from_raw","","",419,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",419,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ne","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"clone","","",420,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"partial_cmp","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"le","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"gt","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ge","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"cmp","","",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"ordering"}}],[11,"hash","","",420,null],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",420,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","center over the anchor edge",420,null],[18,"Top","","position above the anchor edge",420,null],[18,"Bottom","","position below the anchor edge",420,null],[18,"Left","","position to the left of the anchor edge",420,null],[18,"Right","","position to the right of the anchor edge",420,null],[11,"empty","","Returns an empty set of flags.",420,{"inputs":[],"output":{"name":"gravity"}}],[11,"all","","Returns the set containing all flags.",420,{"inputs":[],"output":{"name":"gravity"}}],[11,"bits","","Returns the raw value of the flags currently stored.",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",420,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",420,{"inputs":[{"name":"u32"}],"output":{"name":"gravity"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",420,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",420,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",420,{"inputs":[{"name":"self"},{"name":"gravity"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitor_assign","","Adds the set of flags.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitxor_assign","","Toggles the set of flags.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"sub_assign","","Disables all flags enabled in the set.",420,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",420,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"extend","","",420,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",420,{"inputs":[{"name":"t"}],"output":{"name":"gravity"}}],[11,"from_raw","","",420,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",420,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",421,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",421,null],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",421,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",421,null],[18,"SlideX","","move along the x axis until unconstrained",421,null],[18,"SlideY","","move along the y axis until unconstrained",421,null],[18,"FlipX","","invert the anchor and gravity on the x axis",421,null],[18,"FlipY","","invert the anchor and gravity on the y axis",421,null],[18,"ResizeX","","horizontally resize the surface",421,null],[18,"ResizeY","","vertically resize the surface",421,null],[11,"empty","","Returns an empty set of flags.",421,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",421,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",421,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",421,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",421,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",421,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",421,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",421,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",421,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",421,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",421,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",388,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",388,null],[11,"as_raw_c_in","","",388,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",422,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",422,null],[11,"as_raw_c_in","","",422,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",423,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_surface_v6","",390,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",390,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",390,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",390,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",390,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",391,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",391,null],[11,"as_raw_c_in","","",391,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",392,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",392,null],[11,"as_raw_c_in","","",392,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",424,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_toplevel_v6","",394,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",394,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",394,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",394,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",394,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",395,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",395,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",395,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",395,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",395,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",396,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",396,null],[11,"as_raw_c_in","","",396,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",397,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",397,null],[11,"as_raw_c_in","","",397,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",425,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::client::zxdg_popup_v6","",399,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",399,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",399,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",399,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",399,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",400,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",400,null],[11,"as_raw_c_in","","",400,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",401,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",401,null],[11,"as_raw_c_in","","",401,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",426,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_shell_v6","",403,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",403,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",403,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",403,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",403,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",404,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",404,null],[11,"as_raw_c_in","","",404,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",405,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",405,null],[11,"as_raw_c_in","","",405,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",427,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_positioner_v6","",406,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",406,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",406,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",406,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",406,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ne","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"clone","","",428,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"partial_cmp","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"le","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"gt","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"ge","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"cmp","","",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"ordering"}}],[11,"hash","","",428,null],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",428,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","the center of the anchor rectangle",428,null],[18,"Top","","the top edge of the anchor rectangle",428,null],[18,"Bottom","","the bottom edge of the anchor rectangle",428,null],[18,"Left","","the left edge of the anchor rectangle",428,null],[18,"Right","","the right edge of the anchor rectangle",428,null],[11,"empty","","Returns an empty set of flags.",428,{"inputs":[],"output":{"name":"anchor"}}],[11,"all","","Returns the set containing all flags.",428,{"inputs":[],"output":{"name":"anchor"}}],[11,"bits","","Returns the raw value of the flags currently stored.",428,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",428,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",428,{"inputs":[{"name":"u32"}],"output":{"name":"anchor"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",428,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",428,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",428,{"inputs":[{"name":"self"},{"name":"anchor"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitor_assign","","Adds the set of flags.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitxor_assign","","Toggles the set of flags.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"anchor"}}],[11,"sub_assign","","Disables all flags enabled in the set.",428,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",428,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"extend","","",428,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",428,{"inputs":[{"name":"t"}],"output":{"name":"anchor"}}],[11,"from_raw","","",428,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",428,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ne","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"clone","","",429,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"partial_cmp","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"le","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"gt","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"ge","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"cmp","","",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"ordering"}}],[11,"hash","","",429,null],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",429,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","center over the anchor edge",429,null],[18,"Top","","position above the anchor edge",429,null],[18,"Bottom","","position below the anchor edge",429,null],[18,"Left","","position to the left of the anchor edge",429,null],[18,"Right","","position to the right of the anchor edge",429,null],[11,"empty","","Returns an empty set of flags.",429,{"inputs":[],"output":{"name":"gravity"}}],[11,"all","","Returns the set containing all flags.",429,{"inputs":[],"output":{"name":"gravity"}}],[11,"bits","","Returns the raw value of the flags currently stored.",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",429,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",429,{"inputs":[{"name":"u32"}],"output":{"name":"gravity"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",429,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",429,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",429,{"inputs":[{"name":"self"},{"name":"gravity"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitor_assign","","Adds the set of flags.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitxor_assign","","Toggles the set of flags.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"gravity"}}],[11,"sub_assign","","Disables all flags enabled in the set.",429,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",429,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"extend","","",429,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",429,{"inputs":[{"name":"t"}],"output":{"name":"gravity"}}],[11,"from_raw","","",429,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",429,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",430,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",430,null],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",430,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",430,null],[18,"SlideX","","move along the x axis until unconstrained",430,null],[18,"SlideY","","move along the y axis until unconstrained",430,null],[18,"FlipX","","invert the anchor and gravity on the x axis",430,null],[18,"FlipY","","invert the anchor and gravity on the y axis",430,null],[18,"ResizeX","","horizontally resize the surface",430,null],[18,"ResizeY","","vertically resize the surface",430,null],[11,"empty","","Returns an empty set of flags.",430,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",430,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",430,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",430,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",430,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",430,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",430,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",430,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",430,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",430,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",430,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",430,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",407,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",407,null],[11,"as_raw_c_in","","",407,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",431,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",431,null],[11,"as_raw_c_in","","",431,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",432,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_surface_v6","",408,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",408,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",408,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",408,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",408,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",409,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",409,null],[11,"as_raw_c_in","","",409,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",410,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",410,null],[11,"as_raw_c_in","","",410,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",433,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_toplevel_v6","",411,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",411,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",411,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",411,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",411,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",412,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",412,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",412,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",412,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",412,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",413,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",413,null],[11,"as_raw_c_in","","",413,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",414,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",414,null],[11,"as_raw_c_in","","",414,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",434,null],[11,"clone","wayland_protocols::unstable::xdg_shell::v6::server::zxdg_popup_v6","",415,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",415,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",415,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",415,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",415,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",416,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",416,null],[11,"as_raw_c_in","","",416,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",417,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",417,null],[11,"as_raw_c_in","","",417,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",435,null],[0,"xwayland_keyboard_grab","wayland_protocols::unstable","Protocol for grabbing the keyboard from Xwayland",null,null],[0,"v1","wayland_protocols::unstable::xwayland_keyboard_grab","",null,null],[0,"client","wayland_protocols::unstable::xwayland_keyboard_grab::v1","Client-side API of this protocol",null,null],[0,"zwp_xwayland_keyboard_grab_manager_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","context object for keyboard grab manager",null,null],[3,"ZwpXwaylandKeyboardGrabManagerV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard grab manager",436,null],[13,"GrabKeyboard","","grab the keyboard to a surface",436,null],[12,"id","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1::Request","",436,null],[12,"surface","","",436,null],[12,"seat","","",436,null],[4,"Event","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the keyboard grab manager",437,null],[10,"grab_keyboard","","grab the keyboard to a surface",437,{"inputs":[{"name":"self"},{"name":"proxy"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"zwp_xwayland_keyboard_grab_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client","interface for grabbing the keyboard",null,null],[3,"ZwpXwaylandKeyboardGrabV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the grabbed keyboard object",438,null],[4,"Event","","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the grabbed keyboard object",439,null],[0,"server","wayland_protocols::unstable::xwayland_keyboard_grab::v1","Server-side API of this protocol",null,null],[0,"zwp_xwayland_keyboard_grab_manager_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server","context object for keyboard grab manager",null,null],[3,"ZwpXwaylandKeyboardGrabManagerV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the keyboard grab manager",440,null],[13,"GrabKeyboard","","grab the keyboard to a surface",440,null],[12,"id","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_manager_v1::Request","",440,null],[12,"surface","","",440,null],[12,"seat","","",440,null],[4,"Event","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_manager_v1","",null,null],[0,"zwp_xwayland_keyboard_grab_v1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server","interface for grabbing the keyboard",null,null],[3,"ZwpXwaylandKeyboardGrabV1","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_v1","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the grabbed keyboard object",441,null],[4,"Event","","",null,null],[0,"c_interfaces","wayland_protocols::unstable::xwayland_keyboard_grab::v1","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::unstable::xwayland_keyboard_grab::v1::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"zwp_xwayland_keyboard_grab_manager_v1_requests","","",null,null],[7,"zwp_xwayland_keyboard_grab_manager_v1_interface","","",null,null],[7,"zwp_xwayland_keyboard_grab_v1_requests","","",null,null],[7,"zwp_xwayland_keyboard_grab_v1_interface","","",null,null],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_manager_v1","",436,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",436,null],[11,"as_raw_c_in","","",436,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",442,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",442,null],[11,"as_raw_c_in","","",442,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",443,null],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::client::zwp_xwayland_keyboard_grab_v1","",438,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",438,null],[11,"as_raw_c_in","","",438,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",444,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",444,null],[11,"as_raw_c_in","","",444,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",445,null],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_manager_v1","",440,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",440,null],[11,"as_raw_c_in","","",440,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",446,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",446,null],[11,"as_raw_c_in","","",446,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",447,null],[11,"is_destructor","wayland_protocols::unstable::xwayland_keyboard_grab::v1::server::zwp_xwayland_keyboard_grab_v1","",441,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",441,null],[11,"as_raw_c_in","","",441,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",448,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",448,null],[11,"as_raw_c_in","","",448,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",449,null],[0,"presentation_time","wayland_protocols","Presentation time protocol",null,null],[0,"client","wayland_protocols::presentation_time","Client-side API of this protocol",null,null],[0,"wp_presentation","wayland_protocols::presentation_time::client","timed presentation related wl_surface requests",null,null],[3,"WpPresentation","wayland_protocols::presentation_time::client::wp_presentation","",null,null],[4,"Error","","fatal presentation errors",null,null],[13,"InvalidTimestamp","","invalid value in tv_nsec",450,null],[13,"InvalidFlag","","invalid flag",450,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the presentation interface",451,null],[13,"Feedback","","request presentation feedback information",451,null],[12,"surface","wayland_protocols::presentation_time::client::wp_presentation::Request","",451,null],[12,"callback","","",451,null],[4,"Event","wayland_protocols::presentation_time::client::wp_presentation","",null,null],[13,"ClockId","","clock ID for timestamps",452,null],[12,"clk_id","wayland_protocols::presentation_time::client::wp_presentation::Event","",452,null],[8,"RequestsTrait","wayland_protocols::presentation_time::client::wp_presentation","",null,null],[10,"destroy","","unbind from the presentation interface",453,null],[10,"feedback","","request presentation feedback information",453,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wp_presentation_feedback","wayland_protocols::presentation_time::client","presentation time feedback event",null,null],[3,"WpPresentationFeedback","wayland_protocols::presentation_time::client::wp_presentation_feedback","",null,null],[4,"Kind","","bitmask of flags in presented event",null,null],[13,"Vsync","","presentation was vsync'd",454,null],[13,"HwClock","","hardware provided the presentation timestamp",454,null],[13,"HwCompletion","","hardware signalled the start of the presentation",454,null],[13,"ZeroCopy","","presentation was done zero-copy",454,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"SyncOutput","","presentation synchronized to this output",455,null],[12,"output","wayland_protocols::presentation_time::client::wp_presentation_feedback::Event","",455,null],[13,"Presented","wayland_protocols::presentation_time::client::wp_presentation_feedback","the content update was displayed",455,null],[12,"tv_sec_hi","wayland_protocols::presentation_time::client::wp_presentation_feedback::Event","",455,null],[12,"tv_sec_lo","","",455,null],[12,"tv_nsec","","",455,null],[12,"refresh","","",455,null],[12,"seq_hi","","",455,null],[12,"seq_lo","","",455,null],[12,"flags","","",455,null],[13,"Discarded","wayland_protocols::presentation_time::client::wp_presentation_feedback","the content update was not displayed",455,null],[8,"RequestsTrait","","",null,null],[0,"server","wayland_protocols::presentation_time","Server-side API of this protocol",null,null],[0,"wp_presentation","wayland_protocols::presentation_time::server","timed presentation related wl_surface requests",null,null],[3,"WpPresentation","wayland_protocols::presentation_time::server::wp_presentation","",null,null],[4,"Error","","fatal presentation errors",null,null],[13,"InvalidTimestamp","","invalid value in tv_nsec",456,null],[13,"InvalidFlag","","invalid flag",456,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the presentation interface",457,null],[13,"Feedback","","request presentation feedback information",457,null],[12,"surface","wayland_protocols::presentation_time::server::wp_presentation::Request","",457,null],[12,"callback","","",457,null],[4,"Event","wayland_protocols::presentation_time::server::wp_presentation","",null,null],[13,"ClockId","","clock ID for timestamps",458,null],[12,"clk_id","wayland_protocols::presentation_time::server::wp_presentation::Event","",458,null],[0,"wp_presentation_feedback","wayland_protocols::presentation_time::server","presentation time feedback event",null,null],[3,"WpPresentationFeedback","wayland_protocols::presentation_time::server::wp_presentation_feedback","",null,null],[4,"Kind","","bitmask of flags in presented event",null,null],[13,"Vsync","","presentation was vsync'd",459,null],[13,"HwClock","","hardware provided the presentation timestamp",459,null],[13,"HwCompletion","","hardware signalled the start of the presentation",459,null],[13,"ZeroCopy","","presentation was done zero-copy",459,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"SyncOutput","","presentation synchronized to this output",460,null],[12,"output","wayland_protocols::presentation_time::server::wp_presentation_feedback::Event","",460,null],[13,"Presented","wayland_protocols::presentation_time::server::wp_presentation_feedback","the content update was displayed",460,null],[12,"tv_sec_hi","wayland_protocols::presentation_time::server::wp_presentation_feedback::Event","",460,null],[12,"tv_sec_lo","","",460,null],[12,"tv_nsec","","",460,null],[12,"refresh","","",460,null],[12,"seq_hi","","",460,null],[12,"seq_lo","","",460,null],[12,"flags","","",460,null],[13,"Discarded","wayland_protocols::presentation_time::server::wp_presentation_feedback","the content update was not displayed",460,null],[0,"c_interfaces","wayland_protocols::presentation_time","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::presentation_time::c_interfaces","",null,null],[7,"wl_output_interface","","",null,null],[7,"wp_presentation_requests","","",null,null],[7,"wp_presentation_events","","",null,null],[7,"wp_presentation_interface","","",null,null],[7,"wp_presentation_feedback_events","","",null,null],[7,"wp_presentation_feedback_interface","","",null,null],[0,"xdg_shell","wayland_protocols","XDG Shell protocol",null,null],[0,"client","wayland_protocols::xdg_shell","Client-side API of this protocol",null,null],[0,"xdg_wm_base","wayland_protocols::xdg_shell::client","create desktop-style surfaces",null,null],[3,"XdgWmBase","wayland_protocols::xdg_shell::client::xdg_wm_base","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",461,null],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",461,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",461,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",461,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",461,null],[13,"InvalidPositioner","","the client provided an invalid positioner",461,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_wm_base",462,null],[13,"CreatePositioner","","create a positioner object",462,null],[12,"id","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",462,null],[13,"GetXdgSurface","wayland_protocols::xdg_shell::client::xdg_wm_base","create a shell surface from a surface",462,null],[12,"id","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",462,null],[12,"surface","","",462,null],[13,"Pong","wayland_protocols::xdg_shell::client::xdg_wm_base","respond to a ping event",462,null],[12,"serial","wayland_protocols::xdg_shell::client::xdg_wm_base::Request","",462,null],[4,"Event","wayland_protocols::xdg_shell::client::xdg_wm_base","",null,null],[13,"Ping","","check if the client is alive",463,null],[12,"serial","wayland_protocols::xdg_shell::client::xdg_wm_base::Event","",463,null],[8,"RequestsTrait","wayland_protocols::xdg_shell::client::xdg_wm_base","",null,null],[10,"destroy","","destroy xdg_wm_base",464,null],[10,"create_positioner","","create a positioner object",464,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_xdg_surface","","create a shell surface from a surface",464,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"pong","","respond to a ping event",464,null],[0,"xdg_positioner","wayland_protocols::xdg_shell::client","child surface positioner",null,null],[3,"ConstraintAdjustment","wayland_protocols::xdg_shell::client::xdg_positioner","constraint adjustments",null,null],[3,"XdgPositioner","","",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",465,null],[4,"Anchor","","",null,null],[13,"None","","",466,null],[13,"Top","","",466,null],[13,"Bottom","","",466,null],[13,"Left","","",466,null],[13,"Right","","",466,null],[13,"TopLeft","","",466,null],[13,"BottomLeft","","",466,null],[13,"TopRight","","",466,null],[13,"BottomRight","","",466,null],[4,"Gravity","","",null,null],[13,"None","","",467,null],[13,"Top","","",467,null],[13,"Bottom","","",467,null],[13,"Left","","",467,null],[13,"Right","","",467,null],[13,"TopLeft","","",467,null],[13,"BottomLeft","","",467,null],[13,"TopRight","","",467,null],[13,"BottomRight","","",467,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_positioner object",468,null],[13,"SetSize","","set the size of the to-be positioned rectangle",468,null],[12,"width","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[12,"height","","",468,null],[13,"SetAnchorRect","wayland_protocols::xdg_shell::client::xdg_positioner","set the anchor rectangle within the parent surface",468,null],[12,"x","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[12,"y","","",468,null],[12,"width","","",468,null],[12,"height","","",468,null],[13,"SetAnchor","wayland_protocols::xdg_shell::client::xdg_positioner","set anchor rectangle anchor",468,null],[12,"anchor","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[13,"SetGravity","wayland_protocols::xdg_shell::client::xdg_positioner","set child surface gravity",468,null],[12,"gravity","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[13,"SetConstraintAdjustment","wayland_protocols::xdg_shell::client::xdg_positioner","set the adjustment to be done when constrained",468,null],[12,"constraint_adjustment","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[13,"SetOffset","wayland_protocols::xdg_shell::client::xdg_positioner","set surface position offset",468,null],[12,"x","wayland_protocols::xdg_shell::client::xdg_positioner::Request","",468,null],[12,"y","","",468,null],[4,"Event","wayland_protocols::xdg_shell::client::xdg_positioner","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_positioner object",469,null],[10,"set_size","","set the size of the to-be positioned rectangle",469,null],[10,"set_anchor_rect","","set the anchor rectangle within the parent surface",469,null],[10,"set_anchor","","set anchor rectangle anchor",469,null],[10,"set_gravity","","set child surface gravity",469,null],[10,"set_constraint_adjustment","","set the adjustment to be done when constrained",469,null],[10,"set_offset","","set surface position offset",469,null],[0,"xdg_surface","wayland_protocols::xdg_shell::client","desktop user interface surface base interface",null,null],[3,"XdgSurface","wayland_protocols::xdg_shell::client::xdg_surface","",null,null],[4,"Error","","",null,null],[13,"NotConstructed","","",470,null],[13,"AlreadyConstructed","","",470,null],[13,"UnconfiguredBuffer","","",470,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_surface",471,null],[13,"GetToplevel","","assign the xdg_toplevel surface role",471,null],[12,"id","wayland_protocols::xdg_shell::client::xdg_surface::Request","",471,null],[13,"GetPopup","wayland_protocols::xdg_shell::client::xdg_surface","assign the xdg_popup surface role",471,null],[12,"id","wayland_protocols::xdg_shell::client::xdg_surface::Request","",471,null],[12,"parent","","",471,null],[12,"positioner","","",471,null],[13,"SetWindowGeometry","wayland_protocols::xdg_shell::client::xdg_surface","set the new window geometry",471,null],[12,"x","wayland_protocols::xdg_shell::client::xdg_surface::Request","",471,null],[12,"y","","",471,null],[12,"width","","",471,null],[12,"height","","",471,null],[13,"AckConfigure","wayland_protocols::xdg_shell::client::xdg_surface","ack a configure event",471,null],[12,"serial","wayland_protocols::xdg_shell::client::xdg_surface::Request","",471,null],[4,"Event","wayland_protocols::xdg_shell::client::xdg_surface","",null,null],[13,"Configure","","suggest a surface change",472,null],[12,"serial","wayland_protocols::xdg_shell::client::xdg_surface::Event","",472,null],[8,"RequestsTrait","wayland_protocols::xdg_shell::client::xdg_surface","",null,null],[10,"destroy","","destroy the xdg_surface",473,null],[10,"get_toplevel","","assign the xdg_toplevel surface role",473,{"inputs":[{"name":"self"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"get_popup","","assign the xdg_popup surface role",473,{"inputs":[{"name":"self"},{"generics":["proxy"],"name":"option"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[10,"set_window_geometry","","set the new window geometry",473,null],[10,"ack_configure","","ack a configure event",473,null],[0,"xdg_toplevel","wayland_protocols::xdg_shell::client","toplevel surface",null,null],[3,"XdgToplevel","wayland_protocols::xdg_shell::client::xdg_toplevel","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",474,null],[13,"Top","","",474,null],[13,"Bottom","","",474,null],[13,"Left","","",474,null],[13,"TopLeft","","",474,null],[13,"BottomLeft","","",474,null],[13,"Right","","",474,null],[13,"TopRight","","",474,null],[13,"BottomRight","","",474,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",475,null],[13,"Fullscreen","","the surface is fullscreen",475,null],[13,"Resizing","","the surface is being resized",475,null],[13,"Activated","","the surface is now activated",475,null],[13,"TiledLeft","","the surface is tiled",475,null],[13,"TiledRight","","the surface is tiled",475,null],[13,"TiledTop","","the surface is tiled",475,null],[13,"TiledBottom","","the surface is tiled",475,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_toplevel",476,null],[13,"SetParent","","set the parent of this surface",476,null],[12,"parent","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[13,"SetTitle","wayland_protocols::xdg_shell::client::xdg_toplevel","set surface title",476,null],[12,"title","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[13,"SetAppId","wayland_protocols::xdg_shell::client::xdg_toplevel","set application ID",476,null],[12,"app_id","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[13,"ShowWindowMenu","wayland_protocols::xdg_shell::client::xdg_toplevel","show the window menu",476,null],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[12,"serial","","",476,null],[12,"x","","",476,null],[12,"y","","",476,null],[13,"Move","wayland_protocols::xdg_shell::client::xdg_toplevel","start an interactive move",476,null],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[12,"serial","","",476,null],[13,"Resize","wayland_protocols::xdg_shell::client::xdg_toplevel","start an interactive resize",476,null],[12,"seat","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[12,"serial","","",476,null],[12,"edges","","",476,null],[13,"SetMaxSize","wayland_protocols::xdg_shell::client::xdg_toplevel","set the maximum size",476,null],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[12,"height","","",476,null],[13,"SetMinSize","wayland_protocols::xdg_shell::client::xdg_toplevel","set the minimum size",476,null],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[12,"height","","",476,null],[13,"SetMaximized","wayland_protocols::xdg_shell::client::xdg_toplevel","maximize the window",476,null],[13,"UnsetMaximized","","unmaximize the window",476,null],[13,"SetFullscreen","","set the window as fullscreen on an output",476,null],[12,"output","wayland_protocols::xdg_shell::client::xdg_toplevel::Request","",476,null],[13,"UnsetFullscreen","wayland_protocols::xdg_shell::client::xdg_toplevel","unset the window as fullscreen",476,null],[13,"SetMinimized","","set the window as minimized",476,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",477,null],[12,"width","wayland_protocols::xdg_shell::client::xdg_toplevel::Event","",477,null],[12,"height","","",477,null],[12,"states","","",477,null],[13,"Close","wayland_protocols::xdg_shell::client::xdg_toplevel","surface wants to be closed",477,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","destroy the xdg_toplevel",478,null],[10,"set_parent","","set the parent of this surface",478,null],[10,"set_title","","set surface title",478,null],[10,"set_app_id","","set application ID",478,null],[10,"show_window_menu","","show the window menu",478,null],[10,"_move","","start an interactive move",478,null],[10,"resize","","start an interactive resize",478,null],[10,"set_max_size","","set the maximum size",478,null],[10,"set_min_size","","set the minimum size",478,null],[10,"set_maximized","","maximize the window",478,null],[10,"unset_maximized","","unmaximize the window",478,null],[10,"set_fullscreen","","set the window as fullscreen on an output",478,null],[10,"unset_fullscreen","","unset the window as fullscreen",478,null],[10,"set_minimized","","set the window as minimized",478,null],[0,"xdg_popup","wayland_protocols::xdg_shell::client","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::xdg_shell::client::xdg_popup","",null,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",479,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",480,null],[13,"Grab","","make the popup take an explicit grab",480,null],[12,"seat","wayland_protocols::xdg_shell::client::xdg_popup::Request","",480,null],[12,"serial","","",480,null],[4,"Event","wayland_protocols::xdg_shell::client::xdg_popup","",null,null],[13,"Configure","","configure the popup surface",481,null],[12,"x","wayland_protocols::xdg_shell::client::xdg_popup::Event","",481,null],[12,"y","","",481,null],[12,"width","","",481,null],[12,"height","","",481,null],[13,"PopupDone","wayland_protocols::xdg_shell::client::xdg_popup","popup interaction is done",481,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","remove xdg_popup interface",482,null],[10,"grab","","make the popup take an explicit grab",482,null],[0,"server","wayland_protocols::xdg_shell","Server-side API of this protocol",null,null],[0,"xdg_wm_base","wayland_protocols::xdg_shell::server","create desktop-style surfaces",null,null],[3,"XdgWmBase","wayland_protocols::xdg_shell::server::xdg_wm_base","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",483,null],[13,"DefunctSurfaces","","xdg_wm_base was destroyed before children",483,null],[13,"NotTheTopmostPopup","","the client tried to map or destroy a non-topmost popup",483,null],[13,"InvalidPopupParent","","the client specified an invalid popup parent surface",483,null],[13,"InvalidSurfaceState","","the client provided an invalid surface state",483,null],[13,"InvalidPositioner","","the client provided an invalid positioner",483,null],[4,"Request","","",null,null],[13,"Destroy","","destroy xdg_wm_base",484,null],[13,"CreatePositioner","","create a positioner object",484,null],[12,"id","wayland_protocols::xdg_shell::server::xdg_wm_base::Request","",484,null],[13,"GetXdgSurface","wayland_protocols::xdg_shell::server::xdg_wm_base","create a shell surface from a surface",484,null],[12,"id","wayland_protocols::xdg_shell::server::xdg_wm_base::Request","",484,null],[12,"surface","","",484,null],[13,"Pong","wayland_protocols::xdg_shell::server::xdg_wm_base","respond to a ping event",484,null],[12,"serial","wayland_protocols::xdg_shell::server::xdg_wm_base::Request","",484,null],[4,"Event","wayland_protocols::xdg_shell::server::xdg_wm_base","",null,null],[13,"Ping","","check if the client is alive",485,null],[12,"serial","wayland_protocols::xdg_shell::server::xdg_wm_base::Event","",485,null],[0,"xdg_positioner","wayland_protocols::xdg_shell::server","child surface positioner",null,null],[3,"ConstraintAdjustment","wayland_protocols::xdg_shell::server::xdg_positioner","constraint adjustments",null,null],[3,"XdgPositioner","","",null,null],[4,"Error","","",null,null],[13,"InvalidInput","","invalid input provided",486,null],[4,"Anchor","","",null,null],[13,"None","","",487,null],[13,"Top","","",487,null],[13,"Bottom","","",487,null],[13,"Left","","",487,null],[13,"Right","","",487,null],[13,"TopLeft","","",487,null],[13,"BottomLeft","","",487,null],[13,"TopRight","","",487,null],[13,"BottomRight","","",487,null],[4,"Gravity","","",null,null],[13,"None","","",488,null],[13,"Top","","",488,null],[13,"Bottom","","",488,null],[13,"Left","","",488,null],[13,"Right","","",488,null],[13,"TopLeft","","",488,null],[13,"BottomLeft","","",488,null],[13,"TopRight","","",488,null],[13,"BottomRight","","",488,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_positioner object",489,null],[13,"SetSize","","set the size of the to-be positioned rectangle",489,null],[12,"width","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[12,"height","","",489,null],[13,"SetAnchorRect","wayland_protocols::xdg_shell::server::xdg_positioner","set the anchor rectangle within the parent surface",489,null],[12,"x","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[12,"y","","",489,null],[12,"width","","",489,null],[12,"height","","",489,null],[13,"SetAnchor","wayland_protocols::xdg_shell::server::xdg_positioner","set anchor rectangle anchor",489,null],[12,"anchor","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[13,"SetGravity","wayland_protocols::xdg_shell::server::xdg_positioner","set child surface gravity",489,null],[12,"gravity","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[13,"SetConstraintAdjustment","wayland_protocols::xdg_shell::server::xdg_positioner","set the adjustment to be done when constrained",489,null],[12,"constraint_adjustment","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[13,"SetOffset","wayland_protocols::xdg_shell::server::xdg_positioner","set surface position offset",489,null],[12,"x","wayland_protocols::xdg_shell::server::xdg_positioner::Request","",489,null],[12,"y","","",489,null],[4,"Event","wayland_protocols::xdg_shell::server::xdg_positioner","",null,null],[0,"xdg_surface","wayland_protocols::xdg_shell::server","desktop user interface surface base interface",null,null],[3,"XdgSurface","wayland_protocols::xdg_shell::server::xdg_surface","",null,null],[4,"Error","","",null,null],[13,"NotConstructed","","",490,null],[13,"AlreadyConstructed","","",490,null],[13,"UnconfiguredBuffer","","",490,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_surface",491,null],[13,"GetToplevel","","assign the xdg_toplevel surface role",491,null],[12,"id","wayland_protocols::xdg_shell::server::xdg_surface::Request","",491,null],[13,"GetPopup","wayland_protocols::xdg_shell::server::xdg_surface","assign the xdg_popup surface role",491,null],[12,"id","wayland_protocols::xdg_shell::server::xdg_surface::Request","",491,null],[12,"parent","","",491,null],[12,"positioner","","",491,null],[13,"SetWindowGeometry","wayland_protocols::xdg_shell::server::xdg_surface","set the new window geometry",491,null],[12,"x","wayland_protocols::xdg_shell::server::xdg_surface::Request","",491,null],[12,"y","","",491,null],[12,"width","","",491,null],[12,"height","","",491,null],[13,"AckConfigure","wayland_protocols::xdg_shell::server::xdg_surface","ack a configure event",491,null],[12,"serial","wayland_protocols::xdg_shell::server::xdg_surface::Request","",491,null],[4,"Event","wayland_protocols::xdg_shell::server::xdg_surface","",null,null],[13,"Configure","","suggest a surface change",492,null],[12,"serial","wayland_protocols::xdg_shell::server::xdg_surface::Event","",492,null],[0,"xdg_toplevel","wayland_protocols::xdg_shell::server","toplevel surface",null,null],[3,"XdgToplevel","wayland_protocols::xdg_shell::server::xdg_toplevel","",null,null],[4,"ResizeEdge","","edge values for resizing",null,null],[13,"None","","",493,null],[13,"Top","","",493,null],[13,"Bottom","","",493,null],[13,"Left","","",493,null],[13,"TopLeft","","",493,null],[13,"BottomLeft","","",493,null],[13,"Right","","",493,null],[13,"TopRight","","",493,null],[13,"BottomRight","","",493,null],[4,"State","","types of state on the surface",null,null],[13,"Maximized","","the surface is maximized",494,null],[13,"Fullscreen","","the surface is fullscreen",494,null],[13,"Resizing","","the surface is being resized",494,null],[13,"Activated","","the surface is now activated",494,null],[13,"TiledLeft","","the surface is tiled",494,null],[13,"TiledRight","","the surface is tiled",494,null],[13,"TiledTop","","the surface is tiled",494,null],[13,"TiledBottom","","the surface is tiled",494,null],[4,"Request","","",null,null],[13,"Destroy","","destroy the xdg_toplevel",495,null],[13,"SetParent","","set the parent of this surface",495,null],[12,"parent","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[13,"SetTitle","wayland_protocols::xdg_shell::server::xdg_toplevel","set surface title",495,null],[12,"title","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[13,"SetAppId","wayland_protocols::xdg_shell::server::xdg_toplevel","set application ID",495,null],[12,"app_id","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[13,"ShowWindowMenu","wayland_protocols::xdg_shell::server::xdg_toplevel","show the window menu",495,null],[12,"seat","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[12,"serial","","",495,null],[12,"x","","",495,null],[12,"y","","",495,null],[13,"Move","wayland_protocols::xdg_shell::server::xdg_toplevel","start an interactive move",495,null],[12,"seat","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[12,"serial","","",495,null],[13,"Resize","wayland_protocols::xdg_shell::server::xdg_toplevel","start an interactive resize",495,null],[12,"seat","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[12,"serial","","",495,null],[12,"edges","","",495,null],[13,"SetMaxSize","wayland_protocols::xdg_shell::server::xdg_toplevel","set the maximum size",495,null],[12,"width","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[12,"height","","",495,null],[13,"SetMinSize","wayland_protocols::xdg_shell::server::xdg_toplevel","set the minimum size",495,null],[12,"width","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[12,"height","","",495,null],[13,"SetMaximized","wayland_protocols::xdg_shell::server::xdg_toplevel","maximize the window",495,null],[13,"UnsetMaximized","","unmaximize the window",495,null],[13,"SetFullscreen","","set the window as fullscreen on an output",495,null],[12,"output","wayland_protocols::xdg_shell::server::xdg_toplevel::Request","",495,null],[13,"UnsetFullscreen","wayland_protocols::xdg_shell::server::xdg_toplevel","unset the window as fullscreen",495,null],[13,"SetMinimized","","set the window as minimized",495,null],[4,"Event","","",null,null],[13,"Configure","","suggest a surface change",496,null],[12,"width","wayland_protocols::xdg_shell::server::xdg_toplevel::Event","",496,null],[12,"height","","",496,null],[12,"states","","",496,null],[13,"Close","wayland_protocols::xdg_shell::server::xdg_toplevel","surface wants to be closed",496,null],[0,"xdg_popup","wayland_protocols::xdg_shell::server","short-lived, popup surfaces for menus",null,null],[3,"XdgPopup","wayland_protocols::xdg_shell::server::xdg_popup","",null,null],[4,"Error","","",null,null],[13,"InvalidGrab","","tried to grab after being mapped",497,null],[4,"Request","","",null,null],[13,"Destroy","","remove xdg_popup interface",498,null],[13,"Grab","","make the popup take an explicit grab",498,null],[12,"seat","wayland_protocols::xdg_shell::server::xdg_popup::Request","",498,null],[12,"serial","","",498,null],[4,"Event","wayland_protocols::xdg_shell::server::xdg_popup","",null,null],[13,"Configure","","configure the popup surface",499,null],[12,"x","wayland_protocols::xdg_shell::server::xdg_popup::Event","",499,null],[12,"y","","",499,null],[12,"width","","",499,null],[12,"height","","",499,null],[13,"PopupDone","wayland_protocols::xdg_shell::server::xdg_popup","popup interaction is done",499,null],[0,"c_interfaces","wayland_protocols::xdg_shell","C interfaces for this protocol",null,null],[7,"wl_seat_interface","wayland_protocols::xdg_shell::c_interfaces","",null,null],[7,"wl_surface_interface","","",null,null],[7,"wl_output_interface","","",null,null],[7,"xdg_wm_base_requests","","",null,null],[7,"xdg_wm_base_events","","",null,null],[7,"xdg_wm_base_interface","","",null,null],[7,"xdg_positioner_requests","","",null,null],[7,"xdg_positioner_interface","","",null,null],[7,"xdg_surface_requests","","",null,null],[7,"xdg_surface_events","","",null,null],[7,"xdg_surface_interface","","",null,null],[7,"xdg_toplevel_requests","","",null,null],[7,"xdg_toplevel_events","","",null,null],[7,"xdg_toplevel_interface","","",null,null],[7,"xdg_popup_requests","","",null,null],[7,"xdg_popup_events","","",null,null],[7,"xdg_popup_interface","","",null,null],[0,"viewporter","wayland_protocols","Viewporter protocol",null,null],[0,"client","wayland_protocols::viewporter","Client-side API of this protocol",null,null],[0,"wp_viewporter","wayland_protocols::viewporter::client","surface cropping and scaling",null,null],[3,"WpViewporter","wayland_protocols::viewporter::client::wp_viewporter","",null,null],[4,"Error","","",null,null],[13,"ViewportExists","","the surface already has a viewport object associated",500,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the cropping and scaling interface",501,null],[13,"GetViewport","","extend surface interface for crop and scale",501,null],[12,"id","wayland_protocols::viewporter::client::wp_viewporter::Request","",501,null],[12,"surface","","",501,null],[4,"Event","wayland_protocols::viewporter::client::wp_viewporter","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","unbind from the cropping and scaling interface",502,null],[10,"get_viewport","","extend surface interface for crop and scale",502,{"inputs":[{"name":"self"},{"name":"proxy"}],"output":{"generics":["newproxy"],"name":"result"}}],[0,"wp_viewport","wayland_protocols::viewporter::client","crop and scale interface to a wl_surface",null,null],[3,"WpViewport","wayland_protocols::viewporter::client::wp_viewport","",null,null],[4,"Error","","",null,null],[13,"BadValue","","negative or zero values in width or height",503,null],[13,"BadSize","","destination size is not integer",503,null],[13,"OutOfBuffer","","source rectangle extends outside of the content area",503,null],[13,"NoSurface","","the wl_surface was destroyed",503,null],[4,"Request","","",null,null],[13,"Destroy","","remove scaling and cropping from the surface",504,null],[13,"SetSource","","set the source rectangle for cropping",504,null],[12,"x","wayland_protocols::viewporter::client::wp_viewport::Request","",504,null],[12,"y","","",504,null],[12,"width","","",504,null],[12,"height","","",504,null],[13,"SetDestination","wayland_protocols::viewporter::client::wp_viewport","set the surface size for scaling",504,null],[12,"width","wayland_protocols::viewporter::client::wp_viewport::Request","",504,null],[12,"height","","",504,null],[4,"Event","wayland_protocols::viewporter::client::wp_viewport","",null,null],[8,"RequestsTrait","","",null,null],[10,"destroy","","remove scaling and cropping from the surface",505,null],[10,"set_source","","set the source rectangle for cropping",505,null],[10,"set_destination","","set the surface size for scaling",505,null],[0,"server","wayland_protocols::viewporter","Server-side API of this protocol",null,null],[0,"wp_viewporter","wayland_protocols::viewporter::server","surface cropping and scaling",null,null],[3,"WpViewporter","wayland_protocols::viewporter::server::wp_viewporter","",null,null],[4,"Error","","",null,null],[13,"ViewportExists","","the surface already has a viewport object associated",506,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the cropping and scaling interface",507,null],[13,"GetViewport","","extend surface interface for crop and scale",507,null],[12,"id","wayland_protocols::viewporter::server::wp_viewporter::Request","",507,null],[12,"surface","","",507,null],[4,"Event","wayland_protocols::viewporter::server::wp_viewporter","",null,null],[0,"wp_viewport","wayland_protocols::viewporter::server","crop and scale interface to a wl_surface",null,null],[3,"WpViewport","wayland_protocols::viewporter::server::wp_viewport","",null,null],[4,"Error","","",null,null],[13,"BadValue","","negative or zero values in width or height",508,null],[13,"BadSize","","destination size is not integer",508,null],[13,"OutOfBuffer","","source rectangle extends outside of the content area",508,null],[13,"NoSurface","","the wl_surface was destroyed",508,null],[4,"Request","","",null,null],[13,"Destroy","","remove scaling and cropping from the surface",509,null],[13,"SetSource","","set the source rectangle for cropping",509,null],[12,"x","wayland_protocols::viewporter::server::wp_viewport::Request","",509,null],[12,"y","","",509,null],[12,"width","","",509,null],[12,"height","","",509,null],[13,"SetDestination","wayland_protocols::viewporter::server::wp_viewport","set the surface size for scaling",509,null],[12,"width","wayland_protocols::viewporter::server::wp_viewport::Request","",509,null],[12,"height","","",509,null],[4,"Event","wayland_protocols::viewporter::server::wp_viewport","",null,null],[0,"c_interfaces","wayland_protocols::viewporter","C interfaces for this protocol",null,null],[7,"wl_surface_interface","wayland_protocols::viewporter::c_interfaces","",null,null],[7,"wp_viewporter_requests","","",null,null],[7,"wp_viewporter_interface","","",null,null],[7,"wp_viewport_requests","","",null,null],[7,"wp_viewport_interface","","",null,null],[11,"clone","wayland_protocols::presentation_time::client::wp_presentation","",450,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",450,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",450,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",450,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",450,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",451,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",451,null],[11,"as_raw_c_in","","",451,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",452,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",452,null],[11,"as_raw_c_in","","",452,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",510,null],[11,"clone","wayland_protocols::presentation_time::client::wp_presentation_feedback","",454,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",454,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",454,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"from_raw","","",454,{"inputs":[{"name":"u32"}],"output":{"generics":["kind"],"name":"option"}}],[11,"to_raw","","",454,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",511,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",511,null],[11,"as_raw_c_in","","",511,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",455,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",455,null],[11,"as_raw_c_in","","",455,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",512,null],[11,"clone","wayland_protocols::presentation_time::server::wp_presentation","",456,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",456,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",456,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",456,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",456,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",457,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",457,null],[11,"as_raw_c_in","","",457,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",458,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",458,null],[11,"as_raw_c_in","","",458,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",513,null],[11,"clone","wayland_protocols::presentation_time::server::wp_presentation_feedback","",459,{"inputs":[{"name":"self"}],"output":{"name":"kind"}}],[11,"fmt","","",459,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",459,{"inputs":[{"name":"self"},{"name":"kind"}],"output":{"name":"bool"}}],[11,"from_raw","","",459,{"inputs":[{"name":"u32"}],"output":{"generics":["kind"],"name":"option"}}],[11,"to_raw","","",459,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",514,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",514,null],[11,"as_raw_c_in","","",514,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",460,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",460,null],[11,"as_raw_c_in","","",460,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",515,null],[11,"clone","wayland_protocols::xdg_shell::client::xdg_wm_base","",461,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",461,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",461,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",461,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",461,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",462,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",462,null],[11,"as_raw_c_in","","",462,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",463,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",463,null],[11,"as_raw_c_in","","",463,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",516,null],[11,"clone","wayland_protocols::xdg_shell::client::xdg_positioner","",465,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",465,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",465,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",465,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",465,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",466,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",466,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",466,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"from_raw","","",466,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",466,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",467,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"fmt","","",467,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",467,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"from_raw","","",467,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",467,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",517,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",517,null],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",517,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",517,null],[18,"SlideX","","move along the x axis until unconstrained",517,null],[18,"SlideY","","move along the y axis until unconstrained",517,null],[18,"FlipX","","invert the anchor and gravity on the x axis",517,null],[18,"FlipY","","invert the anchor and gravity on the y axis",517,null],[18,"ResizeX","","horizontally resize the surface",517,null],[18,"ResizeY","","vertically resize the surface",517,null],[11,"empty","","Returns an empty set of flags.",517,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",517,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",517,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",517,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",517,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",517,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",517,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",517,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",517,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",517,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",517,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",517,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",517,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",468,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",468,null],[11,"as_raw_c_in","","",468,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",518,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",518,null],[11,"as_raw_c_in","","",518,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",519,null],[11,"clone","wayland_protocols::xdg_shell::client::xdg_surface","",470,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",470,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",470,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",470,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",470,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",471,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",471,null],[11,"as_raw_c_in","","",471,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",472,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",472,null],[11,"as_raw_c_in","","",472,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",520,null],[11,"clone","wayland_protocols::xdg_shell::client::xdg_toplevel","",474,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",474,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",474,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",474,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",474,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",475,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",475,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",475,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",475,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",475,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",476,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",476,null],[11,"as_raw_c_in","","",476,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",477,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",477,null],[11,"as_raw_c_in","","",477,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",521,null],[11,"clone","wayland_protocols::xdg_shell::client::xdg_popup","",479,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",479,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",479,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",479,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",479,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",480,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",480,null],[11,"as_raw_c_in","","",480,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",481,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",481,null],[11,"as_raw_c_in","","",481,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",522,null],[11,"clone","wayland_protocols::xdg_shell::server::xdg_wm_base","",483,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",483,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",483,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",483,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",483,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",484,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",484,null],[11,"as_raw_c_in","","",484,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",485,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",485,null],[11,"as_raw_c_in","","",485,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",523,null],[11,"clone","wayland_protocols::xdg_shell::server::xdg_positioner","",486,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",486,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",486,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",486,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",486,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",487,{"inputs":[{"name":"self"}],"output":{"name":"anchor"}}],[11,"fmt","","",487,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",487,{"inputs":[{"name":"self"},{"name":"anchor"}],"output":{"name":"bool"}}],[11,"from_raw","","",487,{"inputs":[{"name":"u32"}],"output":{"generics":["anchor"],"name":"option"}}],[11,"to_raw","","",487,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",488,{"inputs":[{"name":"self"}],"output":{"name":"gravity"}}],[11,"fmt","","",488,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",488,{"inputs":[{"name":"self"},{"name":"gravity"}],"output":{"name":"bool"}}],[11,"from_raw","","",488,{"inputs":[{"name":"u32"}],"output":{"generics":["gravity"],"name":"option"}}],[11,"to_raw","","",488,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ne","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"clone","","",524,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"partial_cmp","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"le","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"gt","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"ge","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"cmp","","",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"ordering"}}],[11,"hash","","",524,null],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",524,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","don't move the child surface when constrained",524,null],[18,"SlideX","","move along the x axis until unconstrained",524,null],[18,"SlideY","","move along the y axis until unconstrained",524,null],[18,"FlipX","","invert the anchor and gravity on the x axis",524,null],[18,"FlipY","","invert the anchor and gravity on the y axis",524,null],[18,"ResizeX","","horizontally resize the surface",524,null],[18,"ResizeY","","vertically resize the surface",524,null],[11,"empty","","Returns an empty set of flags.",524,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"all","","Returns the set containing all flags.",524,{"inputs":[],"output":{"name":"constraintadjustment"}}],[11,"bits","","Returns the raw value of the flags currently stored.",524,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",524,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",524,{"inputs":[{"name":"u32"}],"output":{"name":"constraintadjustment"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",524,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",524,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitor_assign","","Adds the set of flags.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitxor_assign","","Toggles the set of flags.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":{"name":"constraintadjustment"}}],[11,"sub_assign","","Disables all flags enabled in the set.",524,{"inputs":[{"name":"self"},{"name":"constraintadjustment"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",524,{"inputs":[{"name":"self"}],"output":{"name":"constraintadjustment"}}],[11,"extend","","",524,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",524,{"inputs":[{"name":"t"}],"output":{"name":"constraintadjustment"}}],[11,"from_raw","","",524,{"inputs":[{"name":"u32"}],"output":{"generics":["constraintadjustment"],"name":"option"}}],[11,"to_raw","","",524,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",489,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",489,null],[11,"as_raw_c_in","","",489,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",525,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",525,null],[11,"as_raw_c_in","","",525,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",526,null],[11,"clone","wayland_protocols::xdg_shell::server::xdg_surface","",490,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",490,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",490,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",490,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",490,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",491,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",491,null],[11,"as_raw_c_in","","",491,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",492,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",492,null],[11,"as_raw_c_in","","",492,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",527,null],[11,"clone","wayland_protocols::xdg_shell::server::xdg_toplevel","",493,{"inputs":[{"name":"self"}],"output":{"name":"resizeedge"}}],[11,"fmt","","",493,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",493,{"inputs":[{"name":"self"},{"name":"resizeedge"}],"output":{"name":"bool"}}],[11,"from_raw","","",493,{"inputs":[{"name":"u32"}],"output":{"generics":["resizeedge"],"name":"option"}}],[11,"to_raw","","",493,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",494,{"inputs":[{"name":"self"}],"output":{"name":"state"}}],[11,"fmt","","",494,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",494,{"inputs":[{"name":"self"},{"name":"state"}],"output":{"name":"bool"}}],[11,"from_raw","","",494,{"inputs":[{"name":"u32"}],"output":{"generics":["state"],"name":"option"}}],[11,"to_raw","","",494,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",495,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",495,null],[11,"as_raw_c_in","","",495,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",496,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",496,null],[11,"as_raw_c_in","","",496,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",528,null],[11,"clone","wayland_protocols::xdg_shell::server::xdg_popup","",497,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",497,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",497,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",497,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",497,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",498,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",498,null],[11,"as_raw_c_in","","",498,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",499,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",499,null],[11,"as_raw_c_in","","",499,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",529,null],[11,"clone","wayland_protocols::viewporter::client::wp_viewporter","",500,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",500,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",500,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",500,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",500,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",501,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",501,null],[11,"as_raw_c_in","","",501,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",530,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",530,null],[11,"as_raw_c_in","","",530,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",531,null],[11,"clone","wayland_protocols::viewporter::client::wp_viewport","",503,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",503,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",503,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",503,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",503,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",504,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",504,null],[11,"as_raw_c_in","","",504,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",532,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",532,null],[11,"as_raw_c_in","","",532,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",533,null],[11,"clone","wayland_protocols::viewporter::server::wp_viewporter","",506,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",506,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",506,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",506,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",506,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",507,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",507,null],[11,"as_raw_c_in","","",507,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",534,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",534,null],[11,"as_raw_c_in","","",534,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",535,null],[11,"clone","wayland_protocols::viewporter::server::wp_viewport","",508,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",508,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",508,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",508,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",508,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",509,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",509,null],[11,"as_raw_c_in","","",509,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",536,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",536,null],[11,"as_raw_c_in","","",536,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",537,null]],"paths":[[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Capability"],[4,"PresentMethod"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpFullscreenShellV1"],[4,"Request"],[3,"ZwpFullscreenShellModeFeedbackV1"],[3,"ZwpFullscreenShellV1"],[4,"Request"],[3,"ZwpFullscreenShellModeFeedbackV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[3,"ZwpIdleInhibitManagerV1"],[4,"Event"],[3,"ZwpIdleInhibitorV1"],[4,"Event"],[3,"ZwpIdleInhibitManagerV1"],[4,"Event"],[3,"ZwpIdleInhibitorV1"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Event"],[4,"Request"],[8,"RequestsTrait"],[4,"Position"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[4,"Event"],[4,"Request"],[4,"Position"],[4,"Request"],[3,"ZwpInputMethodContextV1"],[4,"Request"],[3,"ZwpInputMethodV1"],[4,"Event"],[3,"ZwpInputPanelV1"],[4,"Event"],[3,"ZwpInputPanelSurfaceV1"],[3,"ZwpInputMethodContextV1"],[4,"Request"],[3,"ZwpInputMethodV1"],[4,"Event"],[3,"ZwpInputPanelV1"],[4,"Event"],[3,"ZwpInputPanelSurfaceV1"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[4,"Event"],[3,"ZwpKeyboardShortcutsInhibitManagerV1"],[3,"ZwpKeyboardShortcutsInhibitorV1"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Flags"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Flags"],[4,"Request"],[4,"Event"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpLinuxBufferParamsV1"],[3,"ZwpLinuxDmabufV1"],[3,"ZwpLinuxBufferParamsV1"],[4,"Error"],[4,"Lifetime"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Lifetime"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpPointerConstraintsV1"],[3,"ZwpLockedPointerV1"],[3,"ZwpConfinedPointerV1"],[4,"Event"],[3,"ZwpPointerConstraintsV1"],[3,"ZwpLockedPointerV1"],[3,"ZwpConfinedPointerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZwpPointerGesturePinchV1"],[4,"Event"],[3,"ZwpPointerGesturesV1"],[3,"ZwpPointerGestureSwipeV1"],[3,"ZwpPointerGesturePinchV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpRelativePointerV1"],[4,"Event"],[3,"ZwpRelativePointerManagerV1"],[3,"ZwpRelativePointerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpTabletManagerV1"],[3,"ZwpTabletSeatV1"],[3,"ZwpTabletToolV1"],[3,"ZwpTabletV1"],[4,"Event"],[3,"ZwpTabletManagerV1"],[3,"ZwpTabletSeatV1"],[3,"ZwpTabletToolV1"],[3,"ZwpTabletV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Source"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ButtonState"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Type"],[4,"Capability"],[4,"ButtonState"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Source"],[4,"Request"],[4,"Event"],[4,"Source"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"ButtonState"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZwpTabletManagerV2"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletToolV2"],[3,"ZwpTabletV2"],[3,"ZwpTabletPadRingV2"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZwpTabletPadV2"],[4,"Event"],[3,"ZwpTabletManagerV2"],[3,"ZwpTabletSeatV2"],[3,"ZwpTabletToolV2"],[3,"ZwpTabletV2"],[3,"ZwpTabletPadRingV2"],[3,"ZwpTabletPadStripV2"],[3,"ZwpTabletPadGroupV2"],[3,"ZwpTabletPadV2"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"ContentHint"],[4,"ContentPurpose"],[4,"PreeditStyle"],[4,"TextDirection"],[4,"Request"],[4,"Event"],[4,"Request"],[3,"ZwpTextInputV1"],[4,"Event"],[3,"ZwpTextInputManagerV1"],[3,"ZwpTextInputV1"],[4,"Event"],[3,"ZwpTextInputManagerV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZxdgExporterV1"],[4,"Event"],[3,"ZxdgImporterV1"],[3,"ZxdgExportedV1"],[3,"ZxdgImportedV1"],[4,"Event"],[3,"ZxdgExporterV1"],[4,"Event"],[3,"ZxdgImporterV1"],[3,"ZxdgExportedV1"],[3,"ZxdgImportedV1"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZxdgExporterV2"],[4,"Event"],[3,"ZxdgImporterV2"],[3,"ZxdgExportedV2"],[3,"ZxdgImportedV2"],[4,"Event"],[3,"ZxdgExporterV2"],[4,"Event"],[3,"ZxdgImporterV2"],[3,"ZxdgExportedV2"],[3,"ZxdgImportedV2"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[4,"Event"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgOutputV1"],[4,"Event"],[3,"ZxdgOutputManagerV1"],[3,"ZxdgOutputV1"],[4,"Version"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Version"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"],[3,"XdgShell"],[3,"XdgSurface"],[3,"XdgPopup"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[3,"ZxdgShellV6"],[3,"Anchor"],[3,"Gravity"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"ZxdgPositionerV6"],[3,"ZxdgSurfaceV6"],[3,"ZxdgToplevelV6"],[3,"ZxdgPopupV6"],[3,"ZxdgShellV6"],[3,"Anchor"],[3,"Gravity"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"ZxdgPositionerV6"],[3,"ZxdgSurfaceV6"],[3,"ZxdgToplevelV6"],[3,"ZxdgPopupV6"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[8,"RequestsTrait"],[4,"Request"],[4,"Request"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabV1"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabManagerV1"],[4,"Event"],[3,"ZwpXwaylandKeyboardGrabV1"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Kind"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Kind"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Anchor"],[4,"Gravity"],[4,"Request"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"ResizeEdge"],[4,"State"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[8,"RequestsTrait"],[4,"Error"],[4,"Request"],[4,"Error"],[4,"Request"],[3,"WpPresentation"],[4,"Request"],[3,"WpPresentationFeedback"],[3,"WpPresentation"],[4,"Request"],[3,"WpPresentationFeedback"],[3,"XdgWmBase"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"XdgPositioner"],[3,"XdgSurface"],[3,"XdgToplevel"],[3,"XdgPopup"],[3,"XdgWmBase"],[3,"ConstraintAdjustment"],[4,"Event"],[3,"XdgPositioner"],[3,"XdgSurface"],[3,"XdgToplevel"],[3,"XdgPopup"],[4,"Event"],[3,"WpViewporter"],[4,"Event"],[3,"WpViewport"],[4,"Event"],[3,"WpViewporter"],[4,"Event"],[3,"WpViewport"]]};
searchIndex["wayland_scanner"] = {"doc":"Wayland scanner crate","items":[[4,"Side","wayland_scanner","Side to generate",null,null],[13,"Client","","wayland client applications",0,null],[13,"Server","","wayland compositors",0,null],[5,"generate_c_interfaces","","Generate the interfaces for a protocol",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":null}],[5,"generate_c_code","","Generate the code for a protocol",null,{"inputs":[{"name":"p1"},{"name":"p2"},{"name":"side"}],"output":null}],[5,"generate_c_interfaces_streams","","Generate the interfaces for a protocol from/to IO streams",null,{"inputs":[{"name":"p1"},{"name":"p2"}],"output":null}],[5,"generate_c_code_streams","","Generate the code for a protocol from/to IO streams",null,{"inputs":[{"name":"p1"},{"name":"p2"},{"name":"side"}],"output":null}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"side"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"side"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Side"]]};
searchIndex["wayland_server"] = {"doc":"Server-side Wayland connector","items":[[3,"Client","wayland_server","A handle to a client connected to your server",null,null],[3,"Display","","The wayland display",null,null],[3,"EventLoop","","An event loop",null,null],[3,"LoopSignal","","An event loop signal",null,null],[3,"LoopToken","","An event loop token",null,null],[3,"Global","","A handle to a global object",null,null],[3,"NewResource","","A newly-created resource that needs implementation",null,null],[3,"Resource","","An handle to a wayland resource",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"client"}}],[11,"from_ptr","","Create a client from a `wayland-server.so` pointer",0,null],[11,"c_ptr","","Retrieve a pointer to the underlying `wl_client` of `wayland-server.so`",0,null],[11,"alive","","Check whether this client is still connected to the server",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Check whether this client handle refers to the same client as an other",0,{"inputs":[{"name":"self"},{"name":"client"}],"output":{"name":"bool"}}],[11,"flush","","Flush the pending events to this client",0,{"inputs":[{"name":"self"}],"output":null}],[11,"kill","","Kills this client",0,{"inputs":[{"name":"self"}],"output":null}],[11,"set_user_data","","Associate an arbitrary payload to this client",0,null],[11,"get_user_data","","Retrieve the arbitrary payload associated to this client",0,null],[11,"set_destructor","","Set a destructor for this client",0,null],[11,"new","","Create a new display",1,null],[11,"create_global","","Create a new global object",1,{"inputs":[{"name":"self"},{"name":"looptoken"},{"name":"u32"},{"name":"impl"}],"output":{"name":"global"}}],[11,"flush_clients","","Flush events to the clients",1,{"inputs":[{"name":"self"}],"output":null}],[11,"add_socket","","Add a listening socket to this display",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":{"name":"ioresult"}}],[11,"add_socket_auto","","Add an automatically named listening socket to this display",1,{"inputs":[{"name":"self"}],"output":{"generics":["osstring"],"name":"ioresult"}}],[11,"add_socket_from","","Add existing listening socket to this display",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"ioresult"}}],[11,"add_socket_fd","","Add existing listening socket to this display from a raw file descriptor",1,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"ioresult"}}],[11,"create_client","","Create a new client to this display from an already-existing connected Fd",1,{"inputs":[{"name":"self"},{"name":"rawfd"}],"output":{"name":"client"}}],[11,"c_ptr","","Retrieve a pointer from the C lib to this `wl_display`",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"looptoken"}}],[11,"stop","","Signal the event loop to stop running",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new event loop",4,{"inputs":[],"output":{"name":"eventloop"}}],[11,"token","","Retrieve a `LoopToken` associated to this event loop",4,{"inputs":[{"name":"self"}],"output":{"name":"looptoken"}}],[11,"signal","","Retrieve a `LoopSignal` associated to this event loop",4,{"inputs":[{"name":"self"}],"output":{"name":"loopsignal"}}],[11,"dispatch","","Dispatch pending requests to their respective handlers",4,{"inputs":[{"name":"self"},{"generics":["u32"],"name":"option"}],"output":{"generics":["u32"],"name":"ioresult"}}],[11,"run","","Runs the event loop",4,{"inputs":[{"name":"self"}],"output":{"name":"ioresult"}}],[11,"add_fd_event_source","","Add a File Descriptor event source to this event loop",2,{"inputs":[{"name":"self"},{"name":"rawfd"},{"name":"fdinterest"},{"name":"impl"}],"output":{"generics":["source"],"name":"result"}}],[11,"add_timer_event_source","","Add a timer event source to this event loop",2,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"generics":["source"],"name":"result"}}],[11,"add_signal_event_source","","Add a signal event source to this event loop",2,{"inputs":[{"name":"self"},{"name":"signal"},{"name":"impl"}],"output":{"generics":["source"],"name":"result"}}],[11,"add_idle_event_source","","Add an idle event source to this event loop",2,{"inputs":[{"name":"self"},{"name":"impl"}],"output":{"name":"idlesource"}}],[11,"destroy","","Destroy the associated global object.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"send","","Send an event through this object",6,null],[11,"is_alive","","Check if the object associated with this resource is still alive",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"version","","Retrieve the interface version of this wayland object instance",6,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_external","","Check whether this resource is managed by the library or not",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"equals","","Check if the other resource refers to the same underlying wayland object",6,{"inputs":[{"name":"self"},{"name":"resource"}],"output":{"name":"bool"}}],[11,"same_client_as","","Check if this resource and the other belong to the same client",6,{"inputs":[{"name":"self"},{"name":"resource"}],"output":{"name":"bool"}}],[11,"post_error","","Posts a protocol error to this resource",6,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"string"}],"output":null}],[11,"set_user_data","","Associate an arbitrary payload to this object",6,null],[11,"get_user_data","","Retrieve the arbitrary payload associated to this object",6,null],[11,"client","","Retrieve an handle to the client associated with this resource",6,{"inputs":[{"name":"self"}],"output":{"generics":["client"],"name":"option"}}],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",6,null],[11,"from_c_ptr","","Create a `Resource` instance from a C pointer",6,null],[11,"is_implemented_with","","Check whether this resource has been implemented with given type",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"implement","","Implement this resource using given function, destructor, and implementation data.",7,{"inputs":[{"name":"self"},{"name":"impl"},{"name":"option"}],"output":{"name":"resource"}}],[11,"implement_nonsend","","Implement this resource using given function and implementation data.",7,{"inputs":[{"name":"self"},{"name":"impl"},{"name":"option"},{"name":"looptoken"}],"output":{"name":"resource"}}],[11,"c_ptr","","Get a raw pointer to the underlying wayland object",7,null],[11,"from_c_ptr","","Create a `NewResource` instance from a C pointer.",7,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"resource"}}],[0,"sources","","Event sources related functionnality",null,null],[3,"Source","wayland_server::sources","A handle to an event source",null,null],[3,"FdInterest","","Flags to register interest on a file descriptor",null,null],[3,"TimerEvent","","A timer generated event.",null,null],[3,"SignalEvent","","An event generated by an UNIX signal event source",null,null],[3,"IdleSource","","Idle event source",null,null],[4,"FdEvent","","An event generated by an FD event source",null,null],[13,"Ready","","The FD is ready to be acted upon",8,null],[12,"fd","wayland_server::sources::FdEvent","The concerned FD",8,null],[12,"mask","","Mask indicating if the FD is ready for reading or writing",8,null],[13,"Error","wayland_server::sources","An error occured while polling the FD",8,null],[12,"fd","wayland_server::sources::FdEvent","The concerned FD",8,null],[12,"error","","The reported error",8,null],[11,"remove","wayland_server::sources","Remove this event source from the event loop",9,{"inputs":[{"name":"self"}],"output":{"generics":["implementation"],"name":"box"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"fdinterest"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"ordering"}}],[11,"hash","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"READ","","Interest to be notified when the file descriptor is readable",10,null],[18,"WRITE","","Interest to be notified when the file descriptor is writable",10,null],[11,"empty","","Returns an empty set of flags.",10,{"inputs":[],"output":{"name":"fdinterest"}}],[11,"all","","Returns the set containing all flags.",10,{"inputs":[],"output":{"name":"fdinterest"}}],[11,"bits","","Returns the raw value of the flags currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",10,{"inputs":[{"name":"u32"}],"output":{"generics":["fdinterest"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",10,{"inputs":[{"name":"u32"}],"output":{"name":"fdinterest"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"fdinterest"}}],[11,"bitor_assign","","Adds the set of flags.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"fdinterest"}}],[11,"bitxor_assign","","Toggles the set of flags.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"fdinterest"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":{"name":"fdinterest"}}],[11,"sub_assign","","Disables all flags enabled in the set.",10,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",10,{"inputs":[{"name":"self"}],"output":{"name":"fdinterest"}}],[11,"extend","","",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",10,{"inputs":[{"name":"t"}],"output":{"name":"fdinterest"}}],[11,"update_mask","","Change the registered interest for this FD",9,{"inputs":[{"name":"self"},{"name":"fdinterest"}],"output":null}],[11,"set_delay_ms","","Set the delay of this timer",9,{"inputs":[{"name":"self"},{"name":"i32"}],"output":null}],[11,"remove","","Remove this event source from its event loop",11,{"inputs":[{"name":"self"}],"output":{"generics":["implementation"],"name":"box"}}],[0,"commons","wayland_server","Re-export of wayland-commons",null,null],[0,"sys","","C-associated types",null,null],[0,"common","wayland_server::sys","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_server::sys::common","",null,null],[12,"name","","",12,null],[12,"signature","","",12,null],[12,"types","","",12,null],[3,"wl_interface","","",null,null],[12,"name","","",13,null],[12,"version","","",13,null],[12,"request_count","","",13,null],[12,"requests","","",13,null],[12,"event_count","","",13,null],[12,"events","","",13,null],[3,"wl_list","","",null,null],[12,"prev","","",14,null],[12,"next","","",14,null],[3,"wl_array","","",null,null],[12,"size","","",15,null],[12,"alloc","","",15,null],[12,"data","","",15,null],[6,"wl_fixed_t","","",null,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"i32"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"i32"}}],[19,"wl_argument","","",null,null],[12,"i","","",16,null],[12,"u","","",16,null],[12,"f","","",16,null],[12,"s","","",16,null],[12,"o","","",16,null],[12,"n","","",16,null],[12,"a","","",16,null],[12,"h","","",16,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"server","wayland_server::sys","Bindings to the client library `libwayland-server.so`",null,null],[4,"wl_client","wayland_server::sys::server","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_loop","","",null,null],[4,"wl_event_source","","",null,null],[4,"wl_global","","",null,null],[4,"wl_resource","","",null,null],[4,"wl_shm_buffer","","",null,null],[6,"wl_event_loop_fd_func_t","","",null,null],[6,"wl_event_loop_timer_func_t","","",null,null],[6,"wl_event_loop_signal_func_t","","",null,null],[6,"wl_event_loop_idle_func_t","","",null,null],[6,"wl_global_bind_func_t","","",null,null],[6,"wl_notify_func_t","","",null,null],[6,"wl_resource_destroy_func_t","","",null,null],[3,"wl_listener","","",null,null],[12,"link","","",17,null],[12,"notify","","",17,null],[3,"wl_signal","","",null,null],[12,"listener_list","","",18,null],[3,"WaylandServer","","",null,null],[12,"wl_client_flush","","",19,null],[12,"wl_client_destroy","","",19,null],[12,"wl_client_get_display","","",19,null],[12,"wl_client_get_credentials","","",19,null],[12,"wl_client_get_object","","",19,null],[12,"wl_client_add_destroy_listener","","",19,null],[12,"wl_client_get_destroy_listener","","",19,null],[12,"wl_client_post_no_memory","","",19,null],[12,"wl_resource_create","","",19,null],[12,"wl_client_create","","",19,null],[12,"wl_display_create","","",19,null],[12,"wl_display_destroy","","",19,null],[12,"wl_display_get_serial","","",19,null],[12,"wl_display_next_serial","","",19,null],[12,"wl_display_add_socket","","",19,null],[12,"wl_display_add_socket_auto","","",19,null],[12,"wl_display_add_socket_fd","","",19,null],[12,"wl_display_add_shm_format","","",19,null],[12,"wl_display_get_event_loop","","",19,null],[12,"wl_display_terminate","","",19,null],[12,"wl_display_run","","",19,null],[12,"wl_display_flush_clients","","",19,null],[12,"wl_display_add_destroy_listener","","",19,null],[12,"wl_display_get_destroy_listener","","",19,null],[12,"wl_global_create","","",19,null],[12,"wl_display_init_shm","","",19,null],[12,"wl_display_add_client_created_listener","","",19,null],[12,"wl_event_loop_create","","",19,null],[12,"wl_event_loop_destroy","","",19,null],[12,"wl_event_loop_add_fd","","",19,null],[12,"wl_event_loop_add_timer","","",19,null],[12,"wl_event_loop_add_signal","","",19,null],[12,"wl_event_loop_dispatch","","",19,null],[12,"wl_event_loop_dispatch_idle","","",19,null],[12,"wl_event_loop_add_idle","","",19,null],[12,"wl_event_loop_get_fd","","",19,null],[12,"wl_event_loop_add_destroy_listener","","",19,null],[12,"wl_event_loop_get_destroy_listener","","",19,null],[12,"wl_event_source_fd_update","","",19,null],[12,"wl_event_source_timer_update","","",19,null],[12,"wl_event_source_remove","","",19,null],[12,"wl_event_source_check","","",19,null],[12,"wl_global_destroy","","",19,null],[12,"wl_resource_post_event_array","","",19,null],[12,"wl_resource_queue_event_array","","",19,null],[12,"wl_resource_post_no_memory","","",19,null],[12,"wl_resource_set_implementation","","",19,null],[12,"wl_resource_set_dispatcher","","",19,null],[12,"wl_resource_destroy","","",19,null],[12,"wl_resource_get_client","","",19,null],[12,"wl_resource_get_id","","",19,null],[12,"wl_resource_get_link","","",19,null],[12,"wl_resource_from_link","","",19,null],[12,"wl_resource_find_for_client","","",19,null],[12,"wl_resource_set_user_data","","",19,null],[12,"wl_resource_get_user_data","","",19,null],[12,"wl_resource_get_version","","",19,null],[12,"wl_resource_set_destructor","","",19,null],[12,"wl_resource_instance_of","","",19,null],[12,"wl_resource_add_destroy_listener","","",19,null],[12,"wl_resource_get_destroy_listener","","",19,null],[12,"wl_shm_buffer_begin_access","","",19,null],[12,"wl_shm_buffer_end_access","","",19,null],[12,"wl_shm_buffer_get","","",19,null],[12,"wl_shm_buffer_get_data","","",19,null],[12,"wl_shm_buffer_get_stride","","",19,null],[12,"wl_shm_buffer_get_format","","",19,null],[12,"wl_shm_buffer_get_width","","",19,null],[12,"wl_shm_buffer_get_height","","",19,null],[12,"wl_log_set_handler_server","","",19,null],[12,"wl_list_init","","",19,null],[12,"wl_list_insert","","",19,null],[12,"wl_list_remove","","",19,null],[12,"wl_list_length","","",19,null],[12,"wl_list_empty","","",19,null],[12,"wl_list_insert_list","","",19,null],[12,"wl_array_init","","",19,null],[12,"wl_array_release","","",19,null],[12,"wl_array_add","","",19,null],[12,"wl_array_copy","","",19,null],[12,"wl_resource_post_event","","",19,null],[12,"wl_resource_queue_event","","",19,null],[12,"wl_resource_post_error","","",19,null],[3,"WAYLAND_SERVER_OPTION","","",null,null],[3,"WAYLAND_SERVER_HANDLE","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"signal","","",null,null],[5,"wl_signal_init","wayland_server::sys::server::signal","",null,null],[5,"wl_signal_add","","",null,null],[5,"wl_signal_get","","",null,null],[5,"wl_signal_emit","","",null,null],[5,"rust_listener_create","","",null,null],[5,"rust_listener_get_user_data","","",null,null],[5,"rust_listener_set_user_data","","",null,null],[5,"rust_listener_destroy","","",null,null],[0,"protocol_interfaces","wayland_server::sys","",null,null],[7,"wl_display_requests","wayland_server::sys::protocol_interfaces","",null,null],[7,"wl_display_events","","",null,null],[7,"wl_display_interface","","",null,null],[7,"wl_registry_requests","","",null,null],[7,"wl_registry_events","","",null,null],[7,"wl_registry_interface","","",null,null],[7,"wl_callback_events","","",null,null],[7,"wl_callback_interface","","",null,null],[7,"wl_compositor_requests","","",null,null],[7,"wl_compositor_interface","","",null,null],[7,"wl_shm_pool_requests","","",null,null],[7,"wl_shm_pool_interface","","",null,null],[7,"wl_shm_requests","","",null,null],[7,"wl_shm_events","","",null,null],[7,"wl_shm_interface","","",null,null],[7,"wl_buffer_requests","","",null,null],[7,"wl_buffer_events","","",null,null],[7,"wl_buffer_interface","","",null,null],[7,"wl_data_offer_requests","","",null,null],[7,"wl_data_offer_events","","",null,null],[7,"wl_data_offer_interface","","",null,null],[7,"wl_data_source_requests","","",null,null],[7,"wl_data_source_events","","",null,null],[7,"wl_data_source_interface","","",null,null],[7,"wl_data_device_requests","","",null,null],[7,"wl_data_device_events","","",null,null],[7,"wl_data_device_interface","","",null,null],[7,"wl_data_device_manager_requests","","",null,null],[7,"wl_data_device_manager_interface","","",null,null],[7,"wl_shell_requests","","",null,null],[7,"wl_shell_interface","","",null,null],[7,"wl_shell_surface_requests","","",null,null],[7,"wl_shell_surface_events","","",null,null],[7,"wl_shell_surface_interface","","",null,null],[7,"wl_surface_requests","","",null,null],[7,"wl_surface_events","","",null,null],[7,"wl_surface_interface","","",null,null],[7,"wl_seat_requests","","",null,null],[7,"wl_seat_events","","",null,null],[7,"wl_seat_interface","","",null,null],[7,"wl_pointer_requests","","",null,null],[7,"wl_pointer_events","","",null,null],[7,"wl_pointer_interface","","",null,null],[7,"wl_keyboard_requests","","",null,null],[7,"wl_keyboard_events","","",null,null],[7,"wl_keyboard_interface","","",null,null],[7,"wl_touch_requests","","",null,null],[7,"wl_touch_events","","",null,null],[7,"wl_touch_interface","","",null,null],[7,"wl_output_requests","","",null,null],[7,"wl_output_events","","",null,null],[7,"wl_output_interface","","",null,null],[7,"wl_region_requests","","",null,null],[7,"wl_region_interface","","",null,null],[7,"wl_subcompositor_requests","","",null,null],[7,"wl_subcompositor_interface","","",null,null],[7,"wl_subsurface_requests","","",null,null],[7,"wl_subsurface_interface","","",null,null],[0,"protocol","wayland_server","Generated interfaces for the core wayland protocol",null,null],[0,"wl_callback","wayland_server::protocol","callback object",null,null],[3,"WlCallback","wayland_server::protocol::wl_callback","",null,null],[4,"Request","","",null,null],[4,"Event","","",null,null],[13,"Done","","done event",20,null],[12,"callback_data","wayland_server::protocol::wl_callback::Event","",20,null],[0,"wl_compositor","wayland_server::protocol","the compositor singleton",null,null],[3,"WlCompositor","wayland_server::protocol::wl_compositor","",null,null],[4,"Request","","",null,null],[13,"CreateSurface","","create new surface",21,null],[12,"id","wayland_server::protocol::wl_compositor::Request","",21,null],[13,"CreateRegion","wayland_server::protocol::wl_compositor","create new region",21,null],[12,"id","wayland_server::protocol::wl_compositor::Request","",21,null],[4,"Event","wayland_server::protocol::wl_compositor","",null,null],[0,"wl_shm_pool","wayland_server::protocol","a shared memory pool",null,null],[3,"WlShmPool","wayland_server::protocol::wl_shm_pool","",null,null],[4,"Request","","",null,null],[13,"CreateBuffer","","create a buffer from the pool",22,null],[12,"id","wayland_server::protocol::wl_shm_pool::Request","",22,null],[12,"offset","","",22,null],[12,"width","","",22,null],[12,"height","","",22,null],[12,"stride","","",22,null],[12,"format","","",22,null],[13,"Destroy","wayland_server::protocol::wl_shm_pool","destroy the pool",22,null],[13,"Resize","","change the size of the pool mapping",22,null],[12,"size","wayland_server::protocol::wl_shm_pool::Request","",22,null],[4,"Event","wayland_server::protocol::wl_shm_pool","",null,null],[0,"wl_shm","wayland_server::protocol","shared memory support",null,null],[3,"WlShm","wayland_server::protocol::wl_shm","",null,null],[4,"Error","","wl_shm error values",null,null],[13,"InvalidFormat","","buffer format is not known",23,null],[13,"InvalidStride","","invalid size or stride during pool or buffer creation",23,null],[13,"InvalidFd","","mmapping the file descriptor failed",23,null],[4,"Format","","pixel formats",null,null],[13,"Argb8888","","32-bit ARGB format, [31:0] A:R:G:B 8:8:8:8 little endian",24,null],[13,"Xrgb8888","","32-bit RGB format, [31:0] x:R:G:B 8:8:8:8 little endian",24,null],[13,"C8","","8-bit color index format, [7:0] C",24,null],[13,"Rgb332","","8-bit RGB format, [7:0] R:G:B 3:3:2",24,null],[13,"Bgr233","","8-bit BGR format, [7:0] B:G:R 2:3:3",24,null],[13,"Xrgb4444","","16-bit xRGB format, [15:0] x:R:G:B 4:4:4:4 little endian",24,null],[13,"Xbgr4444","","16-bit xBGR format, [15:0] x:B:G:R 4:4:4:4 little endian",24,null],[13,"Rgbx4444","","16-bit RGBx format, [15:0] R:G:B:x 4:4:4:4 little endian",24,null],[13,"Bgrx4444","","16-bit BGRx format, [15:0] B:G:R:x 4:4:4:4 little endian",24,null],[13,"Argb4444","","16-bit ARGB format, [15:0] A:R:G:B 4:4:4:4 little endian",24,null],[13,"Abgr4444","","16-bit ABGR format, [15:0] A:B:G:R 4:4:4:4 little endian",24,null],[13,"Rgba4444","","16-bit RBGA format, [15:0] R:G:B:A 4:4:4:4 little endian",24,null],[13,"Bgra4444","","16-bit BGRA format, [15:0] B:G:R:A 4:4:4:4 little endian",24,null],[13,"Xrgb1555","","16-bit xRGB format, [15:0] x:R:G:B 1:5:5:5 little endian",24,null],[13,"Xbgr1555","","16-bit xBGR 1555 format, [15:0] x:B:G:R 1:5:5:5 little endian",24,null],[13,"Rgbx5551","","16-bit RGBx 5551 format, [15:0] R:G:B:x 5:5:5:1 little endian",24,null],[13,"Bgrx5551","","16-bit BGRx 5551 format, [15:0] B:G:R:x 5:5:5:1 little endian",24,null],[13,"Argb1555","","16-bit ARGB 1555 format, [15:0] A:R:G:B 1:5:5:5 little endian",24,null],[13,"Abgr1555","","16-bit ABGR 1555 format, [15:0] A:B:G:R 1:5:5:5 little endian",24,null],[13,"Rgba5551","","16-bit RGBA 5551 format, [15:0] R:G:B:A 5:5:5:1 little endian",24,null],[13,"Bgra5551","","16-bit BGRA 5551 format, [15:0] B:G:R:A 5:5:5:1 little endian",24,null],[13,"Rgb565","","16-bit RGB 565 format, [15:0] R:G:B 5:6:5 little endian",24,null],[13,"Bgr565","","16-bit BGR 565 format, [15:0] B:G:R 5:6:5 little endian",24,null],[13,"Rgb888","","24-bit RGB format, [23:0] R:G:B little endian",24,null],[13,"Bgr888","","24-bit BGR format, [23:0] B:G:R little endian",24,null],[13,"Xbgr8888","","32-bit xBGR format, [31:0] x:B:G:R 8:8:8:8 little endian",24,null],[13,"Rgbx8888","","32-bit RGBx format, [31:0] R:G:B:x 8:8:8:8 little endian",24,null],[13,"Bgrx8888","","32-bit BGRx format, [31:0] B:G:R:x 8:8:8:8 little endian",24,null],[13,"Abgr8888","","32-bit ABGR format, [31:0] A:B:G:R 8:8:8:8 little endian",24,null],[13,"Rgba8888","","32-bit RGBA format, [31:0] R:G:B:A 8:8:8:8 little endian",24,null],[13,"Bgra8888","","32-bit BGRA format, [31:0] B:G:R:A 8:8:8:8 little endian",24,null],[13,"Xrgb2101010","","32-bit xRGB format, [31:0] x:R:G:B 2:10:10:10 little endian",24,null],[13,"Xbgr2101010","","32-bit xBGR format, [31:0] x:B:G:R 2:10:10:10 little endian",24,null],[13,"Rgbx1010102","","32-bit RGBx format, [31:0] R:G:B:x 10:10:10:2 little endian",24,null],[13,"Bgrx1010102","","32-bit BGRx format, [31:0] B:G:R:x 10:10:10:2 little endian",24,null],[13,"Argb2101010","","32-bit ARGB format, [31:0] A:R:G:B 2:10:10:10 little endian",24,null],[13,"Abgr2101010","","32-bit ABGR format, [31:0] A:B:G:R 2:10:10:10 little endian",24,null],[13,"Rgba1010102","","32-bit RGBA format, [31:0] R:G:B:A 10:10:10:2 little endian",24,null],[13,"Bgra1010102","","32-bit BGRA format, [31:0] B:G:R:A 10:10:10:2 little endian",24,null],[13,"Yuyv","","packed YCbCr format, [31:0] Cr0:Y1:Cb0:Y0 8:8:8:8 little endian",24,null],[13,"Yvyu","","packed YCbCr format, [31:0] Cb0:Y1:Cr0:Y0 8:8:8:8 little endian",24,null],[13,"Uyvy","","packed YCbCr format, [31:0] Y1:Cr0:Y0:Cb0 8:8:8:8 little endian",24,null],[13,"Vyuy","","packed YCbCr format, [31:0] Y1:Cb0:Y0:Cr0 8:8:8:8 little endian",24,null],[13,"Ayuv","","packed AYCbCr format, [31:0] A:Y:Cb:Cr 8:8:8:8 little endian",24,null],[13,"Nv12","","2 plane YCbCr Cr:Cb format, 2x2 subsampled Cr:Cb plane",24,null],[13,"Nv21","","2 plane YCbCr Cb:Cr format, 2x2 subsampled Cb:Cr plane",24,null],[13,"Nv16","","2 plane YCbCr Cr:Cb format, 2x1 subsampled Cr:Cb plane",24,null],[13,"Nv61","","2 plane YCbCr Cb:Cr format, 2x1 subsampled Cb:Cr plane",24,null],[13,"Yuv410","","3 plane YCbCr format, 4x4 subsampled Cb (1) and Cr (2) planes",24,null],[13,"Yvu410","","3 plane YCbCr format, 4x4 subsampled Cr (1) and Cb (2) planes",24,null],[13,"Yuv411","","3 plane YCbCr format, 4x1 subsampled Cb (1) and Cr (2) planes",24,null],[13,"Yvu411","","3 plane YCbCr format, 4x1 subsampled Cr (1) and Cb (2) planes",24,null],[13,"Yuv420","","3 plane YCbCr format, 2x2 subsampled Cb (1) and Cr (2) planes",24,null],[13,"Yvu420","","3 plane YCbCr format, 2x2 subsampled Cr (1) and Cb (2) planes",24,null],[13,"Yuv422","","3 plane YCbCr format, 2x1 subsampled Cb (1) and Cr (2) planes",24,null],[13,"Yvu422","","3 plane YCbCr format, 2x1 subsampled Cr (1) and Cb (2) planes",24,null],[13,"Yuv444","","3 plane YCbCr format, non-subsampled Cb (1) and Cr (2) planes",24,null],[13,"Yvu444","","3 plane YCbCr format, non-subsampled Cr (1) and Cb (2) planes",24,null],[4,"Request","","",null,null],[13,"CreatePool","","create a shm pool",25,null],[12,"id","wayland_server::protocol::wl_shm::Request","",25,null],[12,"fd","","",25,null],[12,"size","","",25,null],[4,"Event","wayland_server::protocol::wl_shm","",null,null],[13,"Format","","pixel format description",26,null],[12,"format","wayland_server::protocol::wl_shm::Event","",26,null],[0,"wl_buffer","wayland_server::protocol","content for a wl_surface",null,null],[3,"WlBuffer","wayland_server::protocol::wl_buffer","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy a buffer",27,null],[4,"Event","","",null,null],[13,"Release","","compositor releases buffer",28,null],[0,"wl_data_offer","wayland_server::protocol","offer to transfer data",null,null],[3,"WlDataOffer","wayland_server::protocol::wl_data_offer","",null,null],[4,"Error","","",null,null],[13,"InvalidFinish","","finish request was called untimely",29,null],[13,"InvalidActionMask","","action mask contains invalid values",29,null],[13,"InvalidAction","","action argument has an invalid value",29,null],[13,"InvalidOffer","","offer doesn't accept this request",29,null],[4,"Request","","",null,null],[13,"Accept","","accept one of the offered mime types",30,null],[12,"serial","wayland_server::protocol::wl_data_offer::Request","",30,null],[12,"mime_type","","",30,null],[13,"Receive","wayland_server::protocol::wl_data_offer","request that the data is transferred",30,null],[12,"mime_type","wayland_server::protocol::wl_data_offer::Request","",30,null],[12,"fd","","",30,null],[13,"Destroy","wayland_server::protocol::wl_data_offer","destroy data offer",30,null],[13,"Finish","","the offer will no longer be used",30,null],[13,"SetActions","","set the available/preferred drag-and-drop actions",30,null],[12,"dnd_actions","wayland_server::protocol::wl_data_offer::Request","",30,null],[12,"preferred_action","","",30,null],[4,"Event","wayland_server::protocol::wl_data_offer","",null,null],[13,"Offer","","advertise offered mime type",31,null],[12,"mime_type","wayland_server::protocol::wl_data_offer::Event","",31,null],[13,"SourceActions","wayland_server::protocol::wl_data_offer","notify the source-side available actions",31,null],[12,"source_actions","wayland_server::protocol::wl_data_offer::Event","",31,null],[13,"Action","wayland_server::protocol::wl_data_offer","notify the selected action",31,null],[12,"dnd_action","wayland_server::protocol::wl_data_offer::Event","",31,null],[0,"wl_data_source","wayland_server::protocol","offer to transfer data",null,null],[3,"WlDataSource","wayland_server::protocol::wl_data_source","",null,null],[4,"Error","","",null,null],[13,"InvalidActionMask","","action mask contains invalid values",32,null],[13,"InvalidSource","","source doesn't accept this request",32,null],[4,"Request","","",null,null],[13,"Offer","","add an offered mime type",33,null],[12,"mime_type","wayland_server::protocol::wl_data_source::Request","",33,null],[13,"Destroy","wayland_server::protocol::wl_data_source","destroy the data source",33,null],[13,"SetActions","","set the available drag-and-drop actions",33,null],[12,"dnd_actions","wayland_server::protocol::wl_data_source::Request","",33,null],[4,"Event","wayland_server::protocol::wl_data_source","",null,null],[13,"Target","","a target accepts an offered mime type",34,null],[12,"mime_type","wayland_server::protocol::wl_data_source::Event","",34,null],[13,"Send","wayland_server::protocol::wl_data_source","send the data",34,null],[12,"mime_type","wayland_server::protocol::wl_data_source::Event","",34,null],[12,"fd","","",34,null],[13,"Cancelled","wayland_server::protocol::wl_data_source","selection was cancelled",34,null],[13,"DndDropPerformed","","the drag-and-drop operation physically finished",34,null],[13,"DndFinished","","the drag-and-drop operation concluded",34,null],[13,"Action","","notify the selected action",34,null],[12,"dnd_action","wayland_server::protocol::wl_data_source::Event","",34,null],[0,"wl_data_device","wayland_server::protocol","data transfer device",null,null],[3,"WlDataDevice","wayland_server::protocol::wl_data_device","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",35,null],[4,"Request","","",null,null],[13,"StartDrag","","start drag-and-drop operation",36,null],[12,"source","wayland_server::protocol::wl_data_device::Request","",36,null],[12,"origin","","",36,null],[12,"icon","","",36,null],[12,"serial","","",36,null],[13,"SetSelection","wayland_server::protocol::wl_data_device","copy data to the selection",36,null],[12,"source","wayland_server::protocol::wl_data_device::Request","",36,null],[12,"serial","","",36,null],[13,"Release","wayland_server::protocol::wl_data_device","destroy data device",36,null],[4,"Event","","",null,null],[13,"DataOffer","","introduce a new wl_data_offer",37,null],[12,"id","wayland_server::protocol::wl_data_device::Event","",37,null],[13,"Enter","wayland_server::protocol::wl_data_device","initiate drag-and-drop session",37,null],[12,"serial","wayland_server::protocol::wl_data_device::Event","",37,null],[12,"surface","","",37,null],[12,"x","","",37,null],[12,"y","","",37,null],[12,"id","","",37,null],[13,"Leave","wayland_server::protocol::wl_data_device","end drag-and-drop session",37,null],[13,"Motion","","drag-and-drop session motion",37,null],[12,"time","wayland_server::protocol::wl_data_device::Event","",37,null],[12,"x","","",37,null],[12,"y","","",37,null],[13,"Drop","wayland_server::protocol::wl_data_device","end drag-and-drop session successfully",37,null],[13,"Selection","","advertise new selection",37,null],[12,"id","wayland_server::protocol::wl_data_device::Event","",37,null],[0,"wl_data_device_manager","wayland_server::protocol","data transfer interface",null,null],[3,"DndAction","wayland_server::protocol::wl_data_device_manager","drag and drop actions",null,null],[3,"WlDataDeviceManager","","",null,null],[4,"Request","","",null,null],[13,"CreateDataSource","","create a new data source",38,null],[12,"id","wayland_server::protocol::wl_data_device_manager::Request","",38,null],[13,"GetDataDevice","wayland_server::protocol::wl_data_device_manager","create a new data device",38,null],[12,"id","wayland_server::protocol::wl_data_device_manager::Request","",38,null],[12,"seat","","",38,null],[4,"Event","wayland_server::protocol::wl_data_device_manager","",null,null],[0,"wl_shell","wayland_server::protocol","create desktop-style surfaces",null,null],[3,"WlShell","wayland_server::protocol::wl_shell","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",39,null],[4,"Request","","",null,null],[13,"GetShellSurface","","create a shell surface from a surface",40,null],[12,"id","wayland_server::protocol::wl_shell::Request","",40,null],[12,"surface","","",40,null],[4,"Event","wayland_server::protocol::wl_shell","",null,null],[0,"wl_shell_surface","wayland_server::protocol","desktop-style metadata interface",null,null],[3,"Resize","wayland_server::protocol::wl_shell_surface","edge values for resizing",null,null],[3,"Transient","","details of transient behaviour",null,null],[3,"WlShellSurface","","",null,null],[4,"FullscreenMethod","","different method to set the surface fullscreen",null,null],[13,"Default","","no preference, apply default policy",41,null],[13,"Scale","","scale, preserve the surface's aspect ratio and center on output",41,null],[13,"Driver","","switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch",41,null],[13,"Fill","","no upscaling, center on output and add black borders to compensate size mismatch",41,null],[4,"Request","","",null,null],[13,"Pong","","respond to a ping event",42,null],[12,"serial","wayland_server::protocol::wl_shell_surface::Request","",42,null],[13,"Move","wayland_server::protocol::wl_shell_surface","start an interactive move",42,null],[12,"seat","wayland_server::protocol::wl_shell_surface::Request","",42,null],[12,"serial","","",42,null],[13,"Resize","wayland_server::protocol::wl_shell_surface","start an interactive resize",42,null],[12,"seat","wayland_server::protocol::wl_shell_surface::Request","",42,null],[12,"serial","","",42,null],[12,"edges","","",42,null],[13,"SetToplevel","wayland_server::protocol::wl_shell_surface","make the surface a toplevel surface",42,null],[13,"SetTransient","","make the surface a transient surface",42,null],[12,"parent","wayland_server::protocol::wl_shell_surface::Request","",42,null],[12,"x","","",42,null],[12,"y","","",42,null],[12,"flags","","",42,null],[13,"SetFullscreen","wayland_server::protocol::wl_shell_surface","make the surface a fullscreen surface",42,null],[12,"method","wayland_server::protocol::wl_shell_surface::Request","",42,null],[12,"framerate","","",42,null],[12,"output","","",42,null],[13,"SetPopup","wayland_server::protocol::wl_shell_surface","make the surface a popup surface",42,null],[12,"seat","wayland_server::protocol::wl_shell_surface::Request","",42,null],[12,"serial","","",42,null],[12,"parent","","",42,null],[12,"x","","",42,null],[12,"y","","",42,null],[12,"flags","","",42,null],[13,"SetMaximized","wayland_server::protocol::wl_shell_surface","make the surface a maximized surface",42,null],[12,"output","wayland_server::protocol::wl_shell_surface::Request","",42,null],[13,"SetTitle","wayland_server::protocol::wl_shell_surface","set surface title",42,null],[12,"title","wayland_server::protocol::wl_shell_surface::Request","",42,null],[13,"SetClass","wayland_server::protocol::wl_shell_surface","set surface class",42,null],[12,"class_","wayland_server::protocol::wl_shell_surface::Request","",42,null],[4,"Event","wayland_server::protocol::wl_shell_surface","",null,null],[13,"Ping","","ping client",43,null],[12,"serial","wayland_server::protocol::wl_shell_surface::Event","",43,null],[13,"Configure","wayland_server::protocol::wl_shell_surface","suggest resize",43,null],[12,"edges","wayland_server::protocol::wl_shell_surface::Event","",43,null],[12,"width","","",43,null],[12,"height","","",43,null],[13,"PopupDone","wayland_server::protocol::wl_shell_surface","popup interaction is done",43,null],[0,"wl_surface","wayland_server::protocol","an onscreen surface",null,null],[3,"WlSurface","wayland_server::protocol::wl_surface","",null,null],[4,"Error","","wl_surface error values",null,null],[13,"InvalidScale","","buffer scale value is invalid",44,null],[13,"InvalidTransform","","buffer transform value is invalid",44,null],[4,"Request","","",null,null],[13,"Destroy","","delete surface",45,null],[13,"Attach","","set the surface contents",45,null],[12,"buffer","wayland_server::protocol::wl_surface::Request","",45,null],[12,"x","","",45,null],[12,"y","","",45,null],[13,"Damage","wayland_server::protocol::wl_surface","mark part of the surface damaged",45,null],[12,"x","wayland_server::protocol::wl_surface::Request","",45,null],[12,"y","","",45,null],[12,"width","","",45,null],[12,"height","","",45,null],[13,"Frame","wayland_server::protocol::wl_surface","request a frame throttling hint",45,null],[12,"callback","wayland_server::protocol::wl_surface::Request","",45,null],[13,"SetOpaqueRegion","wayland_server::protocol::wl_surface","set opaque region",45,null],[12,"region","wayland_server::protocol::wl_surface::Request","",45,null],[13,"SetInputRegion","wayland_server::protocol::wl_surface","set input region",45,null],[12,"region","wayland_server::protocol::wl_surface::Request","",45,null],[13,"Commit","wayland_server::protocol::wl_surface","commit pending surface state",45,null],[13,"SetBufferTransform","","sets the buffer transformation",45,null],[12,"transform","wayland_server::protocol::wl_surface::Request","",45,null],[13,"SetBufferScale","wayland_server::protocol::wl_surface","sets the buffer scaling factor",45,null],[12,"scale","wayland_server::protocol::wl_surface::Request","",45,null],[13,"DamageBuffer","wayland_server::protocol::wl_surface","mark part of the surface damaged using buffer coordinates",45,null],[12,"x","wayland_server::protocol::wl_surface::Request","",45,null],[12,"y","","",45,null],[12,"width","","",45,null],[12,"height","","",45,null],[4,"Event","wayland_server::protocol::wl_surface","",null,null],[13,"Enter","","surface enters an output",46,null],[12,"output","wayland_server::protocol::wl_surface::Event","",46,null],[13,"Leave","wayland_server::protocol::wl_surface","surface leaves an output",46,null],[12,"output","wayland_server::protocol::wl_surface::Event","",46,null],[0,"wl_seat","wayland_server::protocol","group of input devices",null,null],[3,"Capability","wayland_server::protocol::wl_seat","seat capability bitmask",null,null],[3,"WlSeat","","",null,null],[4,"Request","","",null,null],[13,"GetPointer","","return pointer object",47,null],[12,"id","wayland_server::protocol::wl_seat::Request","",47,null],[13,"GetKeyboard","wayland_server::protocol::wl_seat","return keyboard object",47,null],[12,"id","wayland_server::protocol::wl_seat::Request","",47,null],[13,"GetTouch","wayland_server::protocol::wl_seat","return touch object",47,null],[12,"id","wayland_server::protocol::wl_seat::Request","",47,null],[13,"Release","wayland_server::protocol::wl_seat","release the seat object",47,null],[4,"Event","","",null,null],[13,"Capabilities","","seat capabilities changed",48,null],[12,"capabilities","wayland_server::protocol::wl_seat::Event","",48,null],[13,"Name","wayland_server::protocol::wl_seat","unique identifier for this seat",48,null],[12,"name","wayland_server::protocol::wl_seat::Event","",48,null],[0,"wl_pointer","wayland_server::protocol","pointer input device",null,null],[3,"WlPointer","wayland_server::protocol::wl_pointer","",null,null],[4,"Error","","",null,null],[13,"Role","","given wl_surface has another role",49,null],[4,"ButtonState","","physical button state",null,null],[13,"Released","","the button is not pressed",50,null],[13,"Pressed","","the button is pressed",50,null],[4,"Axis","","axis types",null,null],[13,"VerticalScroll","","vertical axis",51,null],[13,"HorizontalScroll","","horizontal axis",51,null],[4,"AxisSource","","axis source types",null,null],[13,"Wheel","","a physical wheel",52,null],[13,"Finger","","finger on a touch surface",52,null],[13,"Continuous","","continuous coordinate space",52,null],[4,"Request","","",null,null],[13,"SetCursor","","set the pointer surface",53,null],[12,"serial","wayland_server::protocol::wl_pointer::Request","",53,null],[12,"surface","","",53,null],[12,"hotspot_x","","",53,null],[12,"hotspot_y","","",53,null],[13,"Release","wayland_server::protocol::wl_pointer","release the pointer object",53,null],[4,"Event","","",null,null],[13,"Enter","","enter event",54,null],[12,"serial","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"surface","","",54,null],[12,"surface_x","","",54,null],[12,"surface_y","","",54,null],[13,"Leave","wayland_server::protocol::wl_pointer","leave event",54,null],[12,"serial","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"surface","","",54,null],[13,"Motion","wayland_server::protocol::wl_pointer","pointer motion event",54,null],[12,"time","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"surface_x","","",54,null],[12,"surface_y","","",54,null],[13,"Button","wayland_server::protocol::wl_pointer","pointer button event",54,null],[12,"serial","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"time","","",54,null],[12,"button","","",54,null],[12,"state","","",54,null],[13,"Axis","wayland_server::protocol::wl_pointer","axis event",54,null],[12,"time","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"axis","","",54,null],[12,"value","","",54,null],[13,"Frame","wayland_server::protocol::wl_pointer","end of a pointer event sequence",54,null],[13,"AxisSource","","axis source event",54,null],[12,"axis_source","wayland_server::protocol::wl_pointer::Event","",54,null],[13,"AxisStop","wayland_server::protocol::wl_pointer","axis stop event",54,null],[12,"time","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"axis","","",54,null],[13,"AxisDiscrete","wayland_server::protocol::wl_pointer","axis click event",54,null],[12,"axis","wayland_server::protocol::wl_pointer::Event","",54,null],[12,"discrete","","",54,null],[0,"wl_keyboard","wayland_server::protocol","keyboard input device",null,null],[3,"WlKeyboard","wayland_server::protocol::wl_keyboard","",null,null],[4,"KeymapFormat","","keyboard mapping format",null,null],[13,"NoKeymap","","no keymap; client must understand how to interpret the raw keycode",55,null],[13,"XkbV1","","libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode",55,null],[4,"KeyState","","physical key state",null,null],[13,"Released","","key is not pressed",56,null],[13,"Pressed","","key is pressed",56,null],[4,"Request","","",null,null],[13,"Release","","release the keyboard object",57,null],[4,"Event","","",null,null],[13,"Keymap","","keyboard mapping",58,null],[12,"format","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"fd","","",58,null],[12,"size","","",58,null],[13,"Enter","wayland_server::protocol::wl_keyboard","enter event",58,null],[12,"serial","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"surface","","",58,null],[12,"keys","","",58,null],[13,"Leave","wayland_server::protocol::wl_keyboard","leave event",58,null],[12,"serial","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"surface","","",58,null],[13,"Key","wayland_server::protocol::wl_keyboard","key event",58,null],[12,"serial","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"time","","",58,null],[12,"key","","",58,null],[12,"state","","",58,null],[13,"Modifiers","wayland_server::protocol::wl_keyboard","modifier and group state",58,null],[12,"serial","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"mods_depressed","","",58,null],[12,"mods_latched","","",58,null],[12,"mods_locked","","",58,null],[12,"group","","",58,null],[13,"RepeatInfo","wayland_server::protocol::wl_keyboard","repeat rate and delay",58,null],[12,"rate","wayland_server::protocol::wl_keyboard::Event","",58,null],[12,"delay","","",58,null],[0,"wl_touch","wayland_server::protocol","touchscreen input device",null,null],[3,"WlTouch","wayland_server::protocol::wl_touch","",null,null],[4,"Request","","",null,null],[13,"Release","","release the touch object",59,null],[4,"Event","","",null,null],[13,"Down","","touch down event and beginning of a touch sequence",60,null],[12,"serial","wayland_server::protocol::wl_touch::Event","",60,null],[12,"time","","",60,null],[12,"surface","","",60,null],[12,"id","","",60,null],[12,"x","","",60,null],[12,"y","","",60,null],[13,"Up","wayland_server::protocol::wl_touch","end of a touch event sequence",60,null],[12,"serial","wayland_server::protocol::wl_touch::Event","",60,null],[12,"time","","",60,null],[12,"id","","",60,null],[13,"Motion","wayland_server::protocol::wl_touch","update of touch point coordinates",60,null],[12,"time","wayland_server::protocol::wl_touch::Event","",60,null],[12,"id","","",60,null],[12,"x","","",60,null],[12,"y","","",60,null],[13,"Frame","wayland_server::protocol::wl_touch","end of touch frame event",60,null],[13,"Cancel","","touch session cancelled",60,null],[0,"wl_output","wayland_server::protocol","compositor output region",null,null],[3,"Mode","wayland_server::protocol::wl_output","mode information",null,null],[3,"WlOutput","","",null,null],[4,"Subpixel","","subpixel geometry information",null,null],[13,"Unknown","","unknown geometry",61,null],[13,"None","","no geometry",61,null],[13,"HorizontalRgb","","horizontal RGB",61,null],[13,"HorizontalBgr","","horizontal BGR",61,null],[13,"VerticalRgb","","vertical RGB",61,null],[13,"VerticalBgr","","vertical BGR",61,null],[4,"Transform","","transform from framebuffer to output",null,null],[13,"Normal","","no transform",62,null],[13,"_90","","90 degrees counter-clockwise",62,null],[13,"_180","","180 degrees counter-clockwise",62,null],[13,"_270","","270 degrees counter-clockwise",62,null],[13,"Flipped","","180 degree flip around a vertical axis",62,null],[13,"Flipped90","","flip and rotate 90 degrees counter-clockwise",62,null],[13,"Flipped180","","flip and rotate 180 degrees counter-clockwise",62,null],[13,"Flipped270","","flip and rotate 270 degrees counter-clockwise",62,null],[4,"Request","","",null,null],[13,"Release","","release the output object",63,null],[4,"Event","","",null,null],[13,"Geometry","","properties of the output",64,null],[12,"x","wayland_server::protocol::wl_output::Event","",64,null],[12,"y","","",64,null],[12,"physical_width","","",64,null],[12,"physical_height","","",64,null],[12,"subpixel","","",64,null],[12,"make","","",64,null],[12,"model","","",64,null],[12,"transform","","",64,null],[13,"Mode","wayland_server::protocol::wl_output","advertise available modes for the output",64,null],[12,"flags","wayland_server::protocol::wl_output::Event","",64,null],[12,"width","","",64,null],[12,"height","","",64,null],[12,"refresh","","",64,null],[13,"Done","wayland_server::protocol::wl_output","sent all information about output",64,null],[13,"Scale","","output scaling properties",64,null],[12,"factor","wayland_server::protocol::wl_output::Event","",64,null],[0,"wl_region","wayland_server::protocol","region interface",null,null],[3,"WlRegion","wayland_server::protocol::wl_region","",null,null],[4,"Request","","",null,null],[13,"Destroy","","destroy region",65,null],[13,"Add","","add rectangle to region",65,null],[12,"x","wayland_server::protocol::wl_region::Request","",65,null],[12,"y","","",65,null],[12,"width","","",65,null],[12,"height","","",65,null],[13,"Subtract","wayland_server::protocol::wl_region","subtract rectangle from region",65,null],[12,"x","wayland_server::protocol::wl_region::Request","",65,null],[12,"y","","",65,null],[12,"width","","",65,null],[12,"height","","",65,null],[4,"Event","wayland_server::protocol::wl_region","",null,null],[0,"wl_subcompositor","wayland_server::protocol","sub-surface compositing",null,null],[3,"WlSubcompositor","wayland_server::protocol::wl_subcompositor","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","the to-be sub-surface is invalid",66,null],[4,"Request","","",null,null],[13,"Destroy","","unbind from the subcompositor interface",67,null],[13,"GetSubsurface","","give a surface the role sub-surface",67,null],[12,"id","wayland_server::protocol::wl_subcompositor::Request","",67,null],[12,"surface","","",67,null],[12,"parent","","",67,null],[4,"Event","wayland_server::protocol::wl_subcompositor","",null,null],[0,"wl_subsurface","wayland_server::protocol","sub-surface interface to a wl_surface",null,null],[3,"WlSubsurface","wayland_server::protocol::wl_subsurface","",null,null],[4,"Error","","",null,null],[13,"BadSurface","","wl_surface is not a sibling or the parent",68,null],[4,"Request","","",null,null],[13,"Destroy","","remove sub-surface interface",69,null],[13,"SetPosition","","reposition the sub-surface",69,null],[12,"x","wayland_server::protocol::wl_subsurface::Request","",69,null],[12,"y","","",69,null],[13,"PlaceAbove","wayland_server::protocol::wl_subsurface","restack the sub-surface",69,null],[12,"sibling","wayland_server::protocol::wl_subsurface::Request","",69,null],[13,"PlaceBelow","wayland_server::protocol::wl_subsurface","restack the sub-surface",69,null],[12,"sibling","wayland_server::protocol::wl_subsurface::Request","",69,null],[13,"SetSync","wayland_server::protocol::wl_subsurface","set sub-surface to synchronized mode",69,null],[13,"SetDesync","","set sub-surface to desynchronized mode",69,null],[4,"Event","","",null,null],[11,"is_destructor","wayland_server::protocol::wl_callback","",70,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",70,null],[11,"as_raw_c_in","","",70,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",20,null],[11,"as_raw_c_in","","",20,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",71,null],[11,"is_destructor","wayland_server::protocol::wl_compositor","",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",21,null],[11,"as_raw_c_in","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",72,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",72,null],[11,"as_raw_c_in","","",72,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",73,null],[11,"is_destructor","wayland_server::protocol::wl_shm_pool","",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",22,null],[11,"as_raw_c_in","","",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",74,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",74,null],[11,"as_raw_c_in","","",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",75,null],[11,"clone","wayland_server::protocol::wl_shm","",23,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",23,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",23,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"format"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"format"}],"output":{"name":"bool"}}],[11,"from_raw","","",24,{"inputs":[{"name":"u32"}],"output":{"generics":["format"],"name":"option"}}],[11,"to_raw","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",25,null],[11,"as_raw_c_in","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",26,null],[11,"as_raw_c_in","","",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",76,null],[11,"is_destructor","wayland_server::protocol::wl_buffer","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",27,null],[11,"as_raw_c_in","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",28,null],[11,"as_raw_c_in","","",28,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",77,null],[11,"clone","wayland_server::protocol::wl_data_offer","",29,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",29,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",29,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",30,null],[11,"as_raw_c_in","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",31,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",31,null],[11,"as_raw_c_in","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",78,null],[11,"clone","wayland_server::protocol::wl_data_source","",32,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",32,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",33,null],[11,"as_raw_c_in","","",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",34,null],[11,"as_raw_c_in","","",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",79,null],[11,"clone","wayland_server::protocol::wl_data_device","",35,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",35,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",35,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",36,null],[11,"as_raw_c_in","","",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",37,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",37,null],[11,"as_raw_c_in","","",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",80,null],[11,"eq","wayland_server::protocol::wl_data_device_manager","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ne","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"partial_cmp","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"le","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"gt","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"ge","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"cmp","","",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"ordering"}}],[11,"hash","","",81,null],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no action",81,null],[18,"Copy","","copy action",81,null],[18,"Move","","move action",81,null],[18,"Ask","","ask action",81,null],[11,"empty","","Returns an empty set of flags.",81,{"inputs":[],"output":{"name":"dndaction"}}],[11,"all","","Returns the set containing all flags.",81,{"inputs":[],"output":{"name":"dndaction"}}],[11,"bits","","Returns the raw value of the flags currently stored.",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",81,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",81,{"inputs":[{"name":"u32"}],"output":{"name":"dndaction"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",81,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",81,{"inputs":[{"name":"self"},{"name":"dndaction"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitor_assign","","Adds the set of flags.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitxor_assign","","Toggles the set of flags.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":{"name":"dndaction"}}],[11,"sub_assign","","Disables all flags enabled in the set.",81,{"inputs":[{"name":"self"},{"name":"dndaction"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",81,{"inputs":[{"name":"self"}],"output":{"name":"dndaction"}}],[11,"extend","","",81,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",81,{"inputs":[{"name":"t"}],"output":{"name":"dndaction"}}],[11,"from_raw","","",81,{"inputs":[{"name":"u32"}],"output":{"generics":["dndaction"],"name":"option"}}],[11,"to_raw","","",81,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",38,null],[11,"as_raw_c_in","","",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",82,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",82,null],[11,"as_raw_c_in","","",82,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",83,null],[11,"clone","wayland_server::protocol::wl_shell","",39,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",39,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",39,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",40,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",40,null],[11,"as_raw_c_in","","",40,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",84,null],[11,"as_raw_c_in","","",84,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",85,null],[11,"eq","wayland_server::protocol::wl_shell_surface","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"cmp","","",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"ordering"}}],[11,"hash","","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"None","","no edge",86,null],[18,"Top","","top edge",86,null],[18,"Bottom","","bottom edge",86,null],[18,"Left","","left edge",86,null],[18,"TopLeft","","top and left edges",86,null],[18,"BottomLeft","","bottom and left edges",86,null],[18,"Right","","right edge",86,null],[18,"TopRight","","top and right edges",86,null],[18,"BottomRight","","bottom and right edges",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"resize"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"resize"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",86,{"inputs":[{"name":"u32"}],"output":{"name":"resize"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",86,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",86,{"inputs":[{"name":"self"},{"name":"resize"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitor_assign","","Adds the set of flags.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitxor_assign","","Toggles the set of flags.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":{"name":"resize"}}],[11,"sub_assign","","Disables all flags enabled in the set.",86,{"inputs":[{"name":"self"},{"name":"resize"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",86,{"inputs":[{"name":"self"}],"output":{"name":"resize"}}],[11,"extend","","",86,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"resize"}}],[11,"from_raw","","",86,{"inputs":[{"name":"u32"}],"output":{"generics":["resize"],"name":"option"}}],[11,"to_raw","","",86,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ne","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"partial_cmp","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"le","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"gt","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"ge","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"cmp","","",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"ordering"}}],[11,"hash","","",87,null],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Inactive","","do not set keyboard focus",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"transient"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"transient"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",87,{"inputs":[{"name":"u32"}],"output":{"name":"transient"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",87,{"inputs":[{"name":"self"},{"name":"transient"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitor_assign","","Adds the set of flags.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitxor_assign","","Toggles the set of flags.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":{"name":"transient"}}],[11,"sub_assign","","Disables all flags enabled in the set.",87,{"inputs":[{"name":"self"},{"name":"transient"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",87,{"inputs":[{"name":"self"}],"output":{"name":"transient"}}],[11,"extend","","",87,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"transient"}}],[11,"from_raw","","",87,{"inputs":[{"name":"u32"}],"output":{"generics":["transient"],"name":"option"}}],[11,"to_raw","","",87,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"fullscreenmethod"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"fullscreenmethod"}],"output":{"name":"bool"}}],[11,"from_raw","","",41,{"inputs":[{"name":"u32"}],"output":{"generics":["fullscreenmethod"],"name":"option"}}],[11,"to_raw","","",41,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",42,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",42,null],[11,"as_raw_c_in","","",42,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",43,null],[11,"as_raw_c_in","","",43,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",88,null],[11,"clone","wayland_server::protocol::wl_surface","",44,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",44,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",44,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",45,null],[11,"as_raw_c_in","","",45,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",46,null],[11,"as_raw_c_in","","",46,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",89,null],[11,"eq","wayland_server::protocol::wl_seat","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Pointer","","the seat has pointer devices",90,null],[18,"Keyboard","","the seat has one or more keyboards",90,null],[18,"Touch","","the seat has touch devices",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"capability"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"capability"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",90,{"inputs":[{"name":"u32"}],"output":{"name":"capability"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",90,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",90,{"inputs":[{"name":"self"},{"name":"capability"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitor_assign","","Adds the set of flags.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitxor_assign","","Toggles the set of flags.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"capability"}}],[11,"sub_assign","","Disables all flags enabled in the set.",90,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",90,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"extend","","",90,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"capability"}}],[11,"from_raw","","",90,{"inputs":[{"name":"u32"}],"output":{"generics":["capability"],"name":"option"}}],[11,"to_raw","","",90,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",47,null],[11,"as_raw_c_in","","",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",48,null],[11,"as_raw_c_in","","",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",91,null],[11,"clone","wayland_server::protocol::wl_pointer","",49,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",49,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",49,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"buttonstate"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"buttonstate"}],"output":{"name":"bool"}}],[11,"from_raw","","",50,{"inputs":[{"name":"u32"}],"output":{"generics":["buttonstate"],"name":"option"}}],[11,"to_raw","","",50,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"axis"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"axis"}],"output":{"name":"bool"}}],[11,"from_raw","","",51,{"inputs":[{"name":"u32"}],"output":{"generics":["axis"],"name":"option"}}],[11,"to_raw","","",51,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"axissource"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"axissource"}],"output":{"name":"bool"}}],[11,"from_raw","","",52,{"inputs":[{"name":"u32"}],"output":{"generics":["axissource"],"name":"option"}}],[11,"to_raw","","",52,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",53,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",53,null],[11,"as_raw_c_in","","",53,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",54,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",54,null],[11,"as_raw_c_in","","",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",92,null],[11,"clone","wayland_server::protocol::wl_keyboard","",55,{"inputs":[{"name":"self"}],"output":{"name":"keymapformat"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",55,{"inputs":[{"name":"self"},{"name":"keymapformat"}],"output":{"name":"bool"}}],[11,"from_raw","","",55,{"inputs":[{"name":"u32"}],"output":{"generics":["keymapformat"],"name":"option"}}],[11,"to_raw","","",55,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"keystate"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",56,{"inputs":[{"name":"self"},{"name":"keystate"}],"output":{"name":"bool"}}],[11,"from_raw","","",56,{"inputs":[{"name":"u32"}],"output":{"generics":["keystate"],"name":"option"}}],[11,"to_raw","","",56,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",57,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",57,null],[11,"as_raw_c_in","","",57,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",58,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",58,null],[11,"as_raw_c_in","","",58,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",93,null],[11,"is_destructor","wayland_server::protocol::wl_touch","",59,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",59,null],[11,"as_raw_c_in","","",59,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",60,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",60,null],[11,"as_raw_c_in","","",60,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",94,null],[11,"clone","wayland_server::protocol::wl_output","",61,{"inputs":[{"name":"self"}],"output":{"name":"subpixel"}}],[11,"fmt","","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",61,{"inputs":[{"name":"self"},{"name":"subpixel"}],"output":{"name":"bool"}}],[11,"from_raw","","",61,{"inputs":[{"name":"u32"}],"output":{"generics":["subpixel"],"name":"option"}}],[11,"to_raw","","",61,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"transform"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",62,{"inputs":[{"name":"self"},{"name":"transform"}],"output":{"name":"bool"}}],[11,"from_raw","","",62,{"inputs":[{"name":"u32"}],"output":{"generics":["transform"],"name":"option"}}],[11,"to_raw","","",62,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"eq","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"partial_cmp","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"le","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"gt","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"ge","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"cmp","","",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"ordering"}}],[11,"hash","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"Current","","indicates this is the current mode",95,null],[18,"Preferred","","indicates this is the preferred mode",95,null],[11,"empty","","Returns an empty set of flags.",95,{"inputs":[],"output":{"name":"mode"}}],[11,"all","","Returns the set containing all flags.",95,{"inputs":[],"output":{"name":"mode"}}],[11,"bits","","Returns the raw value of the flags currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",95,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",95,{"inputs":[{"name":"u32"}],"output":{"name":"mode"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",95,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",95,{"inputs":[{"name":"self"},{"name":"mode"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitor_assign","","Adds the set of flags.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitxor_assign","","Toggles the set of flags.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":{"name":"mode"}}],[11,"sub_assign","","Disables all flags enabled in the set.",95,{"inputs":[{"name":"self"},{"name":"mode"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",95,{"inputs":[{"name":"self"}],"output":{"name":"mode"}}],[11,"extend","","",95,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",95,{"inputs":[{"name":"t"}],"output":{"name":"mode"}}],[11,"from_raw","","",95,{"inputs":[{"name":"u32"}],"output":{"generics":["mode"],"name":"option"}}],[11,"to_raw","","",95,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",63,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",63,null],[11,"as_raw_c_in","","",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",64,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",64,null],[11,"as_raw_c_in","","",64,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",96,null],[11,"is_destructor","wayland_server::protocol::wl_region","",65,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",65,null],[11,"as_raw_c_in","","",65,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",97,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",97,null],[11,"as_raw_c_in","","",97,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",98,null],[11,"clone","wayland_server::protocol::wl_subcompositor","",66,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",66,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",66,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",66,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",67,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",67,null],[11,"as_raw_c_in","","",67,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",99,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",99,null],[11,"as_raw_c_in","","",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",100,null],[11,"clone","wayland_server::protocol::wl_subsurface","",68,{"inputs":[{"name":"self"}],"output":{"name":"error"}}],[11,"fmt","","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",68,{"inputs":[{"name":"self"},{"name":"error"}],"output":{"name":"bool"}}],[11,"from_raw","","",68,{"inputs":[{"name":"u32"}],"output":{"generics":["error"],"name":"option"}}],[11,"to_raw","","",68,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"is_destructor","","",69,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",69,null],[11,"as_raw_c_in","","",69,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"is_destructor","","",101,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_raw_c","","",101,null],[11,"as_raw_c_in","","",101,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"t"}}],[11,"c_interface","","",102,null],[11,"initialize","wayland_server::sys::server","",103,null],[11,"initialize","","",104,null],[11,"deref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"deref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"waylandserver"}}],[11,"open","","",19,{"inputs":[{"name":"str"}],"output":{"generics":["waylandserver","dlerror"],"name":"result"}}]],"paths":[[3,"Client"],[3,"Display"],[3,"LoopToken"],[3,"LoopSignal"],[3,"EventLoop"],[3,"Global"],[3,"Resource"],[3,"NewResource"],[4,"FdEvent"],[3,"Source"],[3,"FdInterest"],[3,"IdleSource"],[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[3,"wl_listener"],[3,"wl_signal"],[3,"WaylandServer"],[4,"Event"],[4,"Request"],[4,"Request"],[4,"Error"],[4,"Format"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Error"],[4,"Request"],[4,"FullscreenMethod"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Error"],[4,"ButtonState"],[4,"Axis"],[4,"AxisSource"],[4,"Request"],[4,"Event"],[4,"KeymapFormat"],[4,"KeyState"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Event"],[4,"Subpixel"],[4,"Transform"],[4,"Request"],[4,"Event"],[4,"Request"],[4,"Error"],[4,"Request"],[4,"Error"],[4,"Request"],[4,"Request"],[3,"WlCallback"],[4,"Event"],[3,"WlCompositor"],[4,"Event"],[3,"WlShmPool"],[3,"WlShm"],[3,"WlBuffer"],[3,"WlDataOffer"],[3,"WlDataSource"],[3,"WlDataDevice"],[3,"DndAction"],[4,"Event"],[3,"WlDataDeviceManager"],[4,"Event"],[3,"WlShell"],[3,"Resize"],[3,"Transient"],[3,"WlShellSurface"],[3,"WlSurface"],[3,"Capability"],[3,"WlSeat"],[3,"WlPointer"],[3,"WlKeyboard"],[3,"WlTouch"],[3,"Mode"],[3,"WlOutput"],[4,"Event"],[3,"WlRegion"],[4,"Event"],[3,"WlSubcompositor"],[4,"Event"],[3,"WlSubsurface"],[3,"WAYLAND_SERVER_OPTION"],[3,"WAYLAND_SERVER_HANDLE"]]};
searchIndex["wayland_sys"] = {"doc":"FFI bindings to the wayland system libraries.","items":[[6,"gid_t","wayland_sys","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[0,"common","","Various types and functions that are used by both the client and the server libraries.",null,null],[3,"wl_message","wayland_sys::common","",null,null],[12,"name","","",0,null],[12,"signature","","",0,null],[12,"types","","",0,null],[3,"wl_interface","","",null,null],[12,"name","","",1,null],[12,"version","","",1,null],[12,"request_count","","",1,null],[12,"requests","","",1,null],[12,"event_count","","",1,null],[12,"events","","",1,null],[3,"wl_list","","",null,null],[12,"prev","","",2,null],[12,"next","","",2,null],[3,"wl_array","","",null,null],[12,"size","","",3,null],[12,"alloc","","",3,null],[12,"data","","",3,null],[19,"wl_argument","","",null,null],[12,"i","","",4,null],[12,"u","","",4,null],[12,"f","","",4,null],[12,"s","","",4,null],[12,"o","","",4,null],[12,"n","","",4,null],[12,"a","","",4,null],[12,"h","","",4,null],[5,"wl_fixed_to_double","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"f64"}}],[5,"wl_fixed_from_double","","",null,{"inputs":[{"name":"f64"}],"output":{"name":"wl_fixed_t"}}],[5,"wl_fixed_to_int","","",null,{"inputs":[{"name":"wl_fixed_t"}],"output":{"name":"i32"}}],[5,"wl_fixed_from_int","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"wl_fixed_t"}}],[6,"wl_fixed_t","","",null,null],[6,"wl_dispatcher_func_t","","",null,null],[6,"wl_log_func_t","","",null,null],[0,"client","wayland_sys","Bindings to the client library `libwayland-client.so`",null,null],[3,"WaylandClient","wayland_sys::client","",null,null],[12,"wl_display_connect_to_fd","","",5,null],[12,"wl_display_connect","","",5,null],[12,"wl_display_disconnect","","",5,null],[12,"wl_display_get_fd","","",5,null],[12,"wl_display_roundtrip","","",5,null],[12,"wl_display_read_events","","",5,null],[12,"wl_display_prepare_read","","",5,null],[12,"wl_display_cancel_read","","",5,null],[12,"wl_display_dispatch","","",5,null],[12,"wl_display_dispatch_pending","","",5,null],[12,"wl_display_get_error","","",5,null],[12,"wl_display_get_protocol_error","","",5,null],[12,"wl_display_flush","","",5,null],[12,"wl_event_queue_destroy","","",5,null],[12,"wl_display_create_queue","","",5,null],[12,"wl_display_roundtrip_queue","","",5,null],[12,"wl_display_prepare_read_queue","","",5,null],[12,"wl_display_dispatch_queue","","",5,null],[12,"wl_display_dispatch_queue_pending","","",5,null],[12,"wl_proxy_create","","",5,null],[12,"wl_proxy_destroy","","",5,null],[12,"wl_proxy_add_listener","","",5,null],[12,"wl_proxy_get_listener","","",5,null],[12,"wl_proxy_add_dispatcher","","",5,null],[12,"wl_proxy_marshal_array_constructor","","",5,null],[12,"wl_proxy_marshal_array_constructor_versioned","","",5,null],[12,"wl_proxy_marshal_array","","",5,null],[12,"wl_proxy_set_user_data","","",5,null],[12,"wl_proxy_get_user_data","","",5,null],[12,"wl_proxy_get_id","","",5,null],[12,"wl_proxy_get_class","","",5,null],[12,"wl_proxy_set_queue","","",5,null],[12,"wl_proxy_get_version","","",5,null],[12,"wl_proxy_create_wrapper","","",5,null],[12,"wl_proxy_wrapper_destroy","","",5,null],[12,"wl_log_set_handler_client","","",5,null],[12,"wl_list_init","","",5,null],[12,"wl_list_insert","","",5,null],[12,"wl_list_remove","","",5,null],[12,"wl_list_length","","",5,null],[12,"wl_list_empty","","",5,null],[12,"wl_list_insert_list","","",5,null],[12,"wl_array_init","","",5,null],[12,"wl_array_release","","",5,null],[12,"wl_array_add","","",5,null],[12,"wl_array_copy","","",5,null],[12,"wl_proxy_marshal_constructor","","",5,null],[12,"wl_proxy_marshal_constructor_versioned","","",5,null],[12,"wl_proxy_marshal","","",5,null],[3,"WAYLAND_CLIENT_OPTION","","",null,null],[3,"WAYLAND_CLIENT_HANDLE","","",null,null],[4,"wl_proxy","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_queue","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",5,{"inputs":[{"name":"str"}],"output":{"generics":["waylandclient","dlerror"],"name":"result"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"waylandclient"}}],[11,"initialize","","",7,{"inputs":[{"name":"self"}],"output":null}],[0,"server","wayland_sys","Bindings to the client library `libwayland-server.so`",null,null],[3,"wl_listener","wayland_sys::server","",null,null],[12,"link","","",8,null],[12,"notify","","",8,null],[3,"wl_signal","","",null,null],[12,"listener_list","","",9,null],[3,"WaylandServer","","",null,null],[12,"wl_client_flush","","",10,null],[12,"wl_client_destroy","","",10,null],[12,"wl_client_get_display","","",10,null],[12,"wl_client_get_credentials","","",10,null],[12,"wl_client_get_object","","",10,null],[12,"wl_client_add_destroy_listener","","",10,null],[12,"wl_client_get_destroy_listener","","",10,null],[12,"wl_client_post_no_memory","","",10,null],[12,"wl_resource_create","","",10,null],[12,"wl_client_create","","",10,null],[12,"wl_display_create","","",10,null],[12,"wl_display_destroy","","",10,null],[12,"wl_display_get_serial","","",10,null],[12,"wl_display_next_serial","","",10,null],[12,"wl_display_add_socket","","",10,null],[12,"wl_display_add_socket_auto","","",10,null],[12,"wl_display_add_socket_fd","","",10,null],[12,"wl_display_add_shm_format","","",10,null],[12,"wl_display_get_event_loop","","",10,null],[12,"wl_display_terminate","","",10,null],[12,"wl_display_run","","",10,null],[12,"wl_display_flush_clients","","",10,null],[12,"wl_display_add_destroy_listener","","",10,null],[12,"wl_display_get_destroy_listener","","",10,null],[12,"wl_global_create","","",10,null],[12,"wl_display_init_shm","","",10,null],[12,"wl_display_add_client_created_listener","","",10,null],[12,"wl_event_loop_create","","",10,null],[12,"wl_event_loop_destroy","","",10,null],[12,"wl_event_loop_add_fd","","",10,null],[12,"wl_event_loop_add_timer","","",10,null],[12,"wl_event_loop_add_signal","","",10,null],[12,"wl_event_loop_dispatch","","",10,null],[12,"wl_event_loop_dispatch_idle","","",10,null],[12,"wl_event_loop_add_idle","","",10,null],[12,"wl_event_loop_get_fd","","",10,null],[12,"wl_event_loop_add_destroy_listener","","",10,null],[12,"wl_event_loop_get_destroy_listener","","",10,null],[12,"wl_event_source_fd_update","","",10,null],[12,"wl_event_source_timer_update","","",10,null],[12,"wl_event_source_remove","","",10,null],[12,"wl_event_source_check","","",10,null],[12,"wl_global_destroy","","",10,null],[12,"wl_resource_post_event_array","","",10,null],[12,"wl_resource_queue_event_array","","",10,null],[12,"wl_resource_post_no_memory","","",10,null],[12,"wl_resource_set_implementation","","",10,null],[12,"wl_resource_set_dispatcher","","",10,null],[12,"wl_resource_destroy","","",10,null],[12,"wl_resource_get_client","","",10,null],[12,"wl_resource_get_id","","",10,null],[12,"wl_resource_get_link","","",10,null],[12,"wl_resource_from_link","","",10,null],[12,"wl_resource_find_for_client","","",10,null],[12,"wl_resource_set_user_data","","",10,null],[12,"wl_resource_get_user_data","","",10,null],[12,"wl_resource_get_version","","",10,null],[12,"wl_resource_set_destructor","","",10,null],[12,"wl_resource_instance_of","","",10,null],[12,"wl_resource_add_destroy_listener","","",10,null],[12,"wl_resource_get_destroy_listener","","",10,null],[12,"wl_shm_buffer_begin_access","","",10,null],[12,"wl_shm_buffer_end_access","","",10,null],[12,"wl_shm_buffer_get","","",10,null],[12,"wl_shm_buffer_get_data","","",10,null],[12,"wl_shm_buffer_get_stride","","",10,null],[12,"wl_shm_buffer_get_format","","",10,null],[12,"wl_shm_buffer_get_width","","",10,null],[12,"wl_shm_buffer_get_height","","",10,null],[12,"wl_log_set_handler_server","","",10,null],[12,"wl_list_init","","",10,null],[12,"wl_list_insert","","",10,null],[12,"wl_list_remove","","",10,null],[12,"wl_list_length","","",10,null],[12,"wl_list_empty","","",10,null],[12,"wl_list_insert_list","","",10,null],[12,"wl_array_init","","",10,null],[12,"wl_array_release","","",10,null],[12,"wl_array_add","","",10,null],[12,"wl_array_copy","","",10,null],[12,"wl_resource_post_event","","",10,null],[12,"wl_resource_queue_event","","",10,null],[12,"wl_resource_post_error","","",10,null],[3,"WAYLAND_SERVER_OPTION","","",null,null],[3,"WAYLAND_SERVER_HANDLE","","",null,null],[4,"wl_client","","",null,null],[4,"wl_display","","",null,null],[4,"wl_event_loop","","",null,null],[4,"wl_event_source","","",null,null],[4,"wl_global","","",null,null],[4,"wl_resource","","",null,null],[4,"wl_shm_buffer","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[0,"signal","","",null,null],[5,"wl_signal_init","wayland_sys::server::signal","",null,null],[5,"wl_signal_add","","",null,null],[5,"wl_signal_get","","",null,null],[5,"wl_signal_emit","","",null,null],[5,"rust_listener_create","","",null,null],[5,"rust_listener_get_user_data","","",null,null],[5,"rust_listener_set_user_data","","",null,null],[5,"rust_listener_destroy","","",null,null],[6,"wl_event_loop_fd_func_t","wayland_sys::server","",null,null],[6,"wl_event_loop_timer_func_t","","",null,null],[6,"wl_event_loop_signal_func_t","","",null,null],[6,"wl_event_loop_idle_func_t","","",null,null],[6,"wl_global_bind_func_t","","",null,null],[6,"wl_notify_func_t","","",null,null],[6,"wl_resource_destroy_func_t","","",null,null],[11,"open","","",10,{"inputs":[{"name":"str"}],"output":{"generics":["waylandserver","dlerror"],"name":"result"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"waylandserver"}}],[11,"initialize","","",12,{"inputs":[{"name":"self"}],"output":null}],[0,"egl","wayland_sys","Bindings to the EGL library `libwayland-egl.so`",null,null],[3,"WaylandEgl","wayland_sys::egl","",null,null],[12,"wl_egl_window_create","","",13,null],[12,"wl_egl_window_destroy","","",13,null],[12,"wl_egl_window_resize","","",13,null],[12,"wl_egl_window_get_attached_size","","",13,null],[3,"WAYLAND_EGL_OPTION","","",null,null],[3,"WAYLAND_EGL_HANDLE","","",null,null],[4,"wl_egl_window","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",13,{"inputs":[{"name":"str"}],"output":{"generics":["waylandegl","dlerror"],"name":"result"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"waylandegl"}}],[11,"initialize","","",15,{"inputs":[{"name":"self"}],"output":null}],[0,"cursor","wayland_sys","Bindings to the `wayland-cursor.so` library",null,null],[3,"wl_cursor_image","wayland_sys::cursor","",null,null],[12,"width","","actual width",16,null],[12,"height","","actual height",16,null],[12,"hotspot_x","","hot spot x (must be inside image)",16,null],[12,"hotspot_y","","hot spot y (must be inside image)",16,null],[12,"delay","","animation delay to next frame",16,null],[3,"wl_cursor","","",null,null],[12,"image_count","","",17,null],[12,"images","","",17,null],[12,"name","","",17,null],[3,"WaylandCursor","","",null,null],[12,"wl_cursor_theme_load","","",18,null],[12,"wl_cursor_theme_destroy","","",18,null],[12,"wl_cursor_theme_get_cursor","","",18,null],[12,"wl_cursor_image_get_buffer","","",18,null],[12,"wl_cursor_frame","","",18,null],[12,"wl_cursor_frame_and_duration","","",18,null],[3,"WAYLAND_CURSOR_OPTION","","",null,null],[3,"WAYLAND_CURSOR_HANDLE","","",null,null],[4,"wl_cursor_theme","","",null,null],[5,"is_lib_available","","",null,{"inputs":[],"output":{"name":"bool"}}],[11,"open","","",18,{"inputs":[{"name":"str"}],"output":{"generics":["waylandcursor","dlerror"],"name":"result"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"initialize","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"waylandcursor"}}],[11,"initialize","","",20,{"inputs":[{"name":"self"}],"output":null}],[7,"RUST_MANAGED","wayland_sys","Magic pointer for wayland objects managed by wayland-client or wayland-server",null,null],[14,"ffi_dispatch","","",null,null]],"paths":[[3,"wl_message"],[3,"wl_interface"],[3,"wl_list"],[3,"wl_array"],[19,"wl_argument"],[3,"WaylandClient"],[3,"WAYLAND_CLIENT_OPTION"],[3,"WAYLAND_CLIENT_HANDLE"],[3,"wl_listener"],[3,"wl_signal"],[3,"WaylandServer"],[3,"WAYLAND_SERVER_OPTION"],[3,"WAYLAND_SERVER_HANDLE"],[3,"WaylandEgl"],[3,"WAYLAND_EGL_OPTION"],[3,"WAYLAND_EGL_HANDLE"],[3,"wl_cursor_image"],[3,"wl_cursor"],[3,"WaylandCursor"],[3,"WAYLAND_CURSOR_OPTION"],[3,"WAYLAND_CURSOR_HANDLE"]]};
initSearch(searchIndex);
